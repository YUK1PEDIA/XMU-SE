/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 50.0, "series": [{"data": [[0.0, 5.0], [0.1, 6.0], [0.2, 13.0], [0.3, 13.0], [0.4, 13.0], [0.5, 13.0], [0.6, 13.0], [0.7, 13.0], [0.8, 13.0], [0.9, 13.0], [1.0, 13.0], [1.1, 13.0], [1.2, 13.0], [1.3, 13.0], [1.4, 13.0], [1.5, 13.0], [1.6, 13.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 13.0], [2.1, 13.0], [2.2, 14.0], [2.3, 14.0], [2.4, 14.0], [2.5, 14.0], [2.6, 14.0], [2.7, 14.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 14.0], [3.5, 14.0], [3.6, 14.0], [3.7, 14.0], [3.8, 14.0], [3.9, 14.0], [4.0, 14.0], [4.1, 14.0], [4.2, 14.0], [4.3, 14.0], [4.4, 14.0], [4.5, 14.0], [4.6, 14.0], [4.7, 14.0], [4.8, 14.0], [4.9, 14.0], [5.0, 14.0], [5.1, 14.0], [5.2, 14.0], [5.3, 14.0], [5.4, 14.0], [5.5, 14.0], [5.6, 14.0], [5.7, 14.0], [5.8, 14.0], [5.9, 14.0], [6.0, 14.0], [6.1, 14.0], [6.2, 14.0], [6.3, 14.0], [6.4, 14.0], [6.5, 14.0], [6.6, 14.0], [6.7, 14.0], [6.8, 14.0], [6.9, 14.0], [7.0, 14.0], [7.1, 14.0], [7.2, 14.0], [7.3, 14.0], [7.4, 14.0], [7.5, 14.0], [7.6, 14.0], [7.7, 14.0], [7.8, 14.0], [7.9, 14.0], [8.0, 14.0], [8.1, 14.0], [8.2, 14.0], [8.3, 14.0], [8.4, 14.0], [8.5, 14.0], [8.6, 14.0], [8.7, 14.0], [8.8, 14.0], [8.9, 14.0], [9.0, 14.0], [9.1, 14.0], [9.2, 14.0], [9.3, 14.0], [9.4, 14.0], [9.5, 14.0], [9.6, 14.0], [9.7, 14.0], [9.8, 14.0], [9.9, 14.0], [10.0, 14.0], [10.1, 14.0], [10.2, 14.0], [10.3, 14.0], [10.4, 14.0], [10.5, 14.0], [10.6, 14.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 14.0], [11.5, 14.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 14.0], [12.4, 14.0], [12.5, 14.0], [12.6, 14.0], [12.7, 14.0], [12.8, 14.0], [12.9, 14.0], [13.0, 14.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 14.0], [13.6, 14.0], [13.7, 14.0], [13.8, 14.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 14.0], [15.4, 14.0], [15.5, 14.0], [15.6, 14.0], [15.7, 14.0], [15.8, 14.0], [15.9, 14.0], [16.0, 14.0], [16.1, 14.0], [16.2, 14.0], [16.3, 14.0], [16.4, 14.0], [16.5, 14.0], [16.6, 14.0], [16.7, 14.0], [16.8, 14.0], [16.9, 14.0], [17.0, 14.0], [17.1, 14.0], [17.2, 14.0], [17.3, 14.0], [17.4, 14.0], [17.5, 14.0], [17.6, 14.0], [17.7, 14.0], [17.8, 14.0], [17.9, 14.0], [18.0, 14.0], [18.1, 14.0], [18.2, 14.0], [18.3, 14.0], [18.4, 14.0], [18.5, 14.0], [18.6, 14.0], [18.7, 14.0], [18.8, 14.0], [18.9, 14.0], [19.0, 14.0], [19.1, 14.0], [19.2, 14.0], [19.3, 14.0], [19.4, 14.0], [19.5, 14.0], [19.6, 14.0], [19.7, 14.0], [19.8, 14.0], [19.9, 14.0], [20.0, 14.0], [20.1, 14.0], [20.2, 14.0], [20.3, 14.0], [20.4, 14.0], [20.5, 14.0], [20.6, 14.0], [20.7, 14.0], [20.8, 14.0], [20.9, 14.0], [21.0, 14.0], [21.1, 14.0], [21.2, 14.0], [21.3, 14.0], [21.4, 14.0], [21.5, 14.0], [21.6, 14.0], [21.7, 14.0], [21.8, 14.0], [21.9, 14.0], [22.0, 14.0], [22.1, 14.0], [22.2, 14.0], [22.3, 14.0], [22.4, 14.0], [22.5, 14.0], [22.6, 14.0], [22.7, 14.0], [22.8, 14.0], [22.9, 14.0], [23.0, 14.0], [23.1, 14.0], [23.2, 14.0], [23.3, 14.0], [23.4, 14.0], [23.5, 14.0], [23.6, 14.0], [23.7, 14.0], [23.8, 14.0], [23.9, 14.0], [24.0, 14.0], [24.1, 14.0], [24.2, 14.0], [24.3, 14.0], [24.4, 14.0], [24.5, 14.0], [24.6, 14.0], [24.7, 14.0], [24.8, 14.0], [24.9, 14.0], [25.0, 14.0], [25.1, 14.0], [25.2, 14.0], [25.3, 14.0], [25.4, 14.0], [25.5, 14.0], [25.6, 14.0], [25.7, 14.0], [25.8, 14.0], [25.9, 14.0], [26.0, 14.0], [26.1, 14.0], [26.2, 14.0], [26.3, 14.0], [26.4, 14.0], [26.5, 14.0], [26.6, 14.0], [26.7, 14.0], [26.8, 14.0], [26.9, 14.0], [27.0, 14.0], [27.1, 14.0], [27.2, 14.0], [27.3, 14.0], [27.4, 14.0], [27.5, 14.0], [27.6, 14.0], [27.7, 14.0], [27.8, 14.0], [27.9, 14.0], [28.0, 14.0], [28.1, 14.0], [28.2, 14.0], [28.3, 14.0], [28.4, 14.0], [28.5, 14.0], [28.6, 14.0], [28.7, 14.0], [28.8, 14.0], [28.9, 14.0], [29.0, 14.0], [29.1, 14.0], [29.2, 14.0], [29.3, 14.0], [29.4, 14.0], [29.5, 14.0], [29.6, 14.0], [29.7, 14.0], [29.8, 14.0], [29.9, 14.0], [30.0, 14.0], [30.1, 14.0], [30.2, 14.0], [30.3, 14.0], [30.4, 14.0], [30.5, 14.0], [30.6, 14.0], [30.7, 14.0], [30.8, 14.0], [30.9, 14.0], [31.0, 14.0], [31.1, 14.0], [31.2, 14.0], [31.3, 14.0], [31.4, 14.0], [31.5, 14.0], [31.6, 14.0], [31.7, 14.0], [31.8, 14.0], [31.9, 14.0], [32.0, 14.0], [32.1, 14.0], [32.2, 14.0], [32.3, 14.0], [32.4, 14.0], [32.5, 14.0], [32.6, 14.0], [32.7, 14.0], [32.8, 14.0], [32.9, 14.0], [33.0, 14.0], [33.1, 14.0], [33.2, 14.0], [33.3, 14.0], [33.4, 14.0], [33.5, 14.0], [33.6, 14.0], [33.7, 14.0], [33.8, 14.0], [33.9, 14.0], [34.0, 14.0], [34.1, 14.0], [34.2, 14.0], [34.3, 14.0], [34.4, 14.0], [34.5, 14.0], [34.6, 14.0], [34.7, 14.0], [34.8, 14.0], [34.9, 14.0], [35.0, 14.0], [35.1, 14.0], [35.2, 14.0], [35.3, 14.0], [35.4, 14.0], [35.5, 14.0], [35.6, 14.0], [35.7, 14.0], [35.8, 14.0], [35.9, 14.0], [36.0, 14.0], [36.1, 14.0], [36.2, 14.0], [36.3, 14.0], [36.4, 14.0], [36.5, 14.0], [36.6, 14.0], [36.7, 14.0], [36.8, 14.0], [36.9, 14.0], [37.0, 14.0], [37.1, 14.0], [37.2, 14.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 14.0], [38.3, 14.0], [38.4, 14.0], [38.5, 14.0], [38.6, 14.0], [38.7, 14.0], [38.8, 14.0], [38.9, 14.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 14.0], [41.0, 14.0], [41.1, 14.0], [41.2, 14.0], [41.3, 14.0], [41.4, 14.0], [41.5, 14.0], [41.6, 14.0], [41.7, 14.0], [41.8, 14.0], [41.9, 14.0], [42.0, 14.0], [42.1, 14.0], [42.2, 14.0], [42.3, 14.0], [42.4, 14.0], [42.5, 14.0], [42.6, 14.0], [42.7, 14.0], [42.8, 14.0], [42.9, 14.0], [43.0, 14.0], [43.1, 15.0], [43.2, 15.0], [43.3, 15.0], [43.4, 15.0], [43.5, 15.0], [43.6, 15.0], [43.7, 15.0], [43.8, 15.0], [43.9, 15.0], [44.0, 15.0], [44.1, 15.0], [44.2, 15.0], [44.3, 15.0], [44.4, 15.0], [44.5, 15.0], [44.6, 15.0], [44.7, 15.0], [44.8, 15.0], [44.9, 15.0], [45.0, 15.0], [45.1, 15.0], [45.2, 15.0], [45.3, 15.0], [45.4, 15.0], [45.5, 15.0], [45.6, 15.0], [45.7, 15.0], [45.8, 15.0], [45.9, 15.0], [46.0, 15.0], [46.1, 15.0], [46.2, 15.0], [46.3, 15.0], [46.4, 15.0], [46.5, 15.0], [46.6, 15.0], [46.7, 15.0], [46.8, 15.0], [46.9, 15.0], [47.0, 15.0], [47.1, 15.0], [47.2, 15.0], [47.3, 15.0], [47.4, 15.0], [47.5, 15.0], [47.6, 15.0], [47.7, 15.0], [47.8, 15.0], [47.9, 15.0], [48.0, 15.0], [48.1, 15.0], [48.2, 15.0], [48.3, 15.0], [48.4, 15.0], [48.5, 15.0], [48.6, 15.0], [48.7, 15.0], [48.8, 15.0], [48.9, 15.0], [49.0, 15.0], [49.1, 15.0], [49.2, 15.0], [49.3, 15.0], [49.4, 15.0], [49.5, 15.0], [49.6, 15.0], [49.7, 15.0], [49.8, 15.0], [49.9, 15.0], [50.0, 15.0], [50.1, 15.0], [50.2, 15.0], [50.3, 15.0], [50.4, 15.0], [50.5, 15.0], [50.6, 15.0], [50.7, 15.0], [50.8, 15.0], [50.9, 15.0], [51.0, 15.0], [51.1, 15.0], [51.2, 15.0], [51.3, 15.0], [51.4, 15.0], [51.5, 15.0], [51.6, 15.0], [51.7, 15.0], [51.8, 15.0], [51.9, 15.0], [52.0, 15.0], [52.1, 15.0], [52.2, 15.0], [52.3, 15.0], [52.4, 15.0], [52.5, 15.0], [52.6, 15.0], [52.7, 15.0], [52.8, 15.0], [52.9, 15.0], [53.0, 15.0], [53.1, 15.0], [53.2, 15.0], [53.3, 15.0], [53.4, 15.0], [53.5, 15.0], [53.6, 15.0], [53.7, 15.0], [53.8, 15.0], [53.9, 15.0], [54.0, 15.0], [54.1, 15.0], [54.2, 15.0], [54.3, 15.0], [54.4, 15.0], [54.5, 15.0], [54.6, 15.0], [54.7, 15.0], [54.8, 15.0], [54.9, 15.0], [55.0, 15.0], [55.1, 15.0], [55.2, 15.0], [55.3, 15.0], [55.4, 15.0], [55.5, 15.0], [55.6, 15.0], [55.7, 15.0], [55.8, 15.0], [55.9, 15.0], [56.0, 15.0], [56.1, 15.0], [56.2, 15.0], [56.3, 15.0], [56.4, 15.0], [56.5, 15.0], [56.6, 15.0], [56.7, 15.0], [56.8, 15.0], [56.9, 15.0], [57.0, 15.0], [57.1, 15.0], [57.2, 15.0], [57.3, 15.0], [57.4, 15.0], [57.5, 15.0], [57.6, 15.0], [57.7, 15.0], [57.8, 15.0], [57.9, 15.0], [58.0, 15.0], [58.1, 15.0], [58.2, 15.0], [58.3, 15.0], [58.4, 15.0], [58.5, 15.0], [58.6, 15.0], [58.7, 15.0], [58.8, 15.0], [58.9, 15.0], [59.0, 15.0], [59.1, 15.0], [59.2, 15.0], [59.3, 15.0], [59.4, 15.0], [59.5, 15.0], [59.6, 15.0], [59.7, 15.0], [59.8, 15.0], [59.9, 15.0], [60.0, 15.0], [60.1, 15.0], [60.2, 15.0], [60.3, 15.0], [60.4, 15.0], [60.5, 15.0], [60.6, 15.0], [60.7, 15.0], [60.8, 15.0], [60.9, 15.0], [61.0, 15.0], [61.1, 15.0], [61.2, 15.0], [61.3, 15.0], [61.4, 15.0], [61.5, 15.0], [61.6, 15.0], [61.7, 15.0], [61.8, 15.0], [61.9, 15.0], [62.0, 15.0], [62.1, 15.0], [62.2, 15.0], [62.3, 15.0], [62.4, 15.0], [62.5, 15.0], [62.6, 15.0], [62.7, 15.0], [62.8, 15.0], [62.9, 15.0], [63.0, 15.0], [63.1, 15.0], [63.2, 15.0], [63.3, 15.0], [63.4, 15.0], [63.5, 15.0], [63.6, 15.0], [63.7, 15.0], [63.8, 15.0], [63.9, 15.0], [64.0, 15.0], [64.1, 15.0], [64.2, 15.0], [64.3, 15.0], [64.4, 15.0], [64.5, 15.0], [64.6, 15.0], [64.7, 15.0], [64.8, 15.0], [64.9, 15.0], [65.0, 15.0], [65.1, 15.0], [65.2, 15.0], [65.3, 15.0], [65.4, 15.0], [65.5, 15.0], [65.6, 15.0], [65.7, 15.0], [65.8, 15.0], [65.9, 15.0], [66.0, 15.0], [66.1, 15.0], [66.2, 15.0], [66.3, 15.0], [66.4, 15.0], [66.5, 15.0], [66.6, 15.0], [66.7, 15.0], [66.8, 15.0], [66.9, 15.0], [67.0, 15.0], [67.1, 15.0], [67.2, 15.0], [67.3, 15.0], [67.4, 15.0], [67.5, 15.0], [67.6, 15.0], [67.7, 15.0], [67.8, 15.0], [67.9, 15.0], [68.0, 15.0], [68.1, 15.0], [68.2, 15.0], [68.3, 15.0], [68.4, 15.0], [68.5, 15.0], [68.6, 15.0], [68.7, 15.0], [68.8, 15.0], [68.9, 15.0], [69.0, 15.0], [69.1, 15.0], [69.2, 15.0], [69.3, 15.0], [69.4, 15.0], [69.5, 15.0], [69.6, 15.0], [69.7, 15.0], [69.8, 15.0], [69.9, 15.0], [70.0, 15.0], [70.1, 15.0], [70.2, 15.0], [70.3, 15.0], [70.4, 15.0], [70.5, 15.0], [70.6, 15.0], [70.7, 15.0], [70.8, 15.0], [70.9, 15.0], [71.0, 15.0], [71.1, 15.0], [71.2, 15.0], [71.3, 15.0], [71.4, 15.0], [71.5, 15.0], [71.6, 15.0], [71.7, 15.0], [71.8, 15.0], [71.9, 15.0], [72.0, 15.0], [72.1, 15.0], [72.2, 15.0], [72.3, 15.0], [72.4, 15.0], [72.5, 15.0], [72.6, 15.0], [72.7, 15.0], [72.8, 15.0], [72.9, 15.0], [73.0, 15.0], [73.1, 15.0], [73.2, 15.0], [73.3, 15.0], [73.4, 15.0], [73.5, 15.0], [73.6, 15.0], [73.7, 15.0], [73.8, 15.0], [73.9, 15.0], [74.0, 15.0], [74.1, 15.0], [74.2, 15.0], [74.3, 15.0], [74.4, 15.0], [74.5, 15.0], [74.6, 15.0], [74.7, 15.0], [74.8, 15.0], [74.9, 15.0], [75.0, 15.0], [75.1, 15.0], [75.2, 15.0], [75.3, 15.0], [75.4, 15.0], [75.5, 15.0], [75.6, 15.0], [75.7, 15.0], [75.8, 15.0], [75.9, 15.0], [76.0, 15.0], [76.1, 15.0], [76.2, 15.0], [76.3, 15.0], [76.4, 15.0], [76.5, 16.0], [76.6, 16.0], [76.7, 16.0], [76.8, 16.0], [76.9, 16.0], [77.0, 16.0], [77.1, 16.0], [77.2, 16.0], [77.3, 16.0], [77.4, 16.0], [77.5, 16.0], [77.6, 16.0], [77.7, 16.0], [77.8, 16.0], [77.9, 16.0], [78.0, 16.0], [78.1, 16.0], [78.2, 16.0], [78.3, 16.0], [78.4, 16.0], [78.5, 16.0], [78.6, 16.0], [78.7, 16.0], [78.8, 16.0], [78.9, 16.0], [79.0, 16.0], [79.1, 16.0], [79.2, 16.0], [79.3, 16.0], [79.4, 16.0], [79.5, 16.0], [79.6, 16.0], [79.7, 16.0], [79.8, 16.0], [79.9, 16.0], [80.0, 16.0], [80.1, 16.0], [80.2, 16.0], [80.3, 16.0], [80.4, 16.0], [80.5, 16.0], [80.6, 16.0], [80.7, 16.0], [80.8, 16.0], [80.9, 16.0], [81.0, 16.0], [81.1, 16.0], [81.2, 16.0], [81.3, 16.0], [81.4, 16.0], [81.5, 16.0], [81.6, 16.0], [81.7, 16.0], [81.8, 16.0], [81.9, 16.0], [82.0, 16.0], [82.1, 16.0], [82.2, 16.0], [82.3, 16.0], [82.4, 16.0], [82.5, 16.0], [82.6, 16.0], [82.7, 16.0], [82.8, 16.0], [82.9, 16.0], [83.0, 16.0], [83.1, 16.0], [83.2, 16.0], [83.3, 16.0], [83.4, 16.0], [83.5, 16.0], [83.6, 16.0], [83.7, 16.0], [83.8, 16.0], [83.9, 16.0], [84.0, 16.0], [84.1, 16.0], [84.2, 16.0], [84.3, 16.0], [84.4, 16.0], [84.5, 16.0], [84.6, 16.0], [84.7, 16.0], [84.8, 16.0], [84.9, 16.0], [85.0, 16.0], [85.1, 17.0], [85.2, 17.0], [85.3, 17.0], [85.4, 17.0], [85.5, 17.0], [85.6, 17.0], [85.7, 17.0], [85.8, 17.0], [85.9, 17.0], [86.0, 17.0], [86.1, 17.0], [86.2, 17.0], [86.3, 17.0], [86.4, 17.0], [86.5, 17.0], [86.6, 17.0], [86.7, 17.0], [86.8, 17.0], [86.9, 17.0], [87.0, 17.0], [87.1, 17.0], [87.2, 17.0], [87.3, 17.0], [87.4, 17.0], [87.5, 17.0], [87.6, 17.0], [87.7, 18.0], [87.8, 18.0], [87.9, 18.0], [88.0, 18.0], [88.1, 18.0], [88.2, 18.0], [88.3, 18.0], [88.4, 18.0], [88.5, 18.0], [88.6, 18.0], [88.7, 19.0], [88.8, 19.0], [88.9, 20.0], [89.0, 20.0], [89.1, 21.0], [89.2, 21.0], [89.3, 22.0], [89.4, 22.0], [89.5, 22.0], [89.6, 22.0], [89.7, 22.0], [89.8, 22.0], [89.9, 22.0], [90.0, 22.0], [90.1, 22.0], [90.2, 22.0], [90.3, 22.0], [90.4, 22.0], [90.5, 22.0], [90.6, 22.0], [90.7, 22.0], [90.8, 22.0], [90.9, 22.0], [91.0, 22.0], [91.1, 22.0], [91.2, 22.0], [91.3, 22.0], [91.4, 22.0], [91.5, 22.0], [91.6, 22.0], [91.7, 23.0], [91.8, 23.0], [91.9, 23.0], [92.0, 23.0], [92.1, 23.0], [92.2, 23.0], [92.3, 23.0], [92.4, 23.0], [92.5, 23.0], [92.6, 23.0], [92.7, 23.0], [92.8, 23.0], [92.9, 23.0], [93.0, 23.0], [93.1, 23.0], [93.2, 23.0], [93.3, 23.0], [93.4, 23.0], [93.5, 23.0], [93.6, 23.0], [93.7, 23.0], [93.8, 23.0], [93.9, 23.0], [94.0, 23.0], [94.1, 23.0], [94.2, 23.0], [94.3, 23.0], [94.4, 23.0], [94.5, 23.0], [94.6, 23.0], [94.7, 23.0], [94.8, 24.0], [94.9, 24.0], [95.0, 24.0], [95.1, 24.0], [95.2, 24.0], [95.3, 24.0], [95.4, 24.0], [95.5, 24.0], [95.6, 24.0], [95.7, 24.0], [95.8, 24.0], [95.9, 24.0], [96.0, 25.0], [96.1, 25.0], [96.2, 25.0], [96.3, 25.0], [96.4, 25.0], [96.5, 26.0], [96.6, 26.0], [96.7, 27.0], [96.8, 30.0], [96.9, 30.0], [97.0, 30.0], [97.1, 30.0], [97.2, 30.0], [97.3, 30.0], [97.4, 31.0], [97.5, 31.0], [97.6, 31.0], [97.7, 31.0], [97.8, 31.0], [97.9, 31.0], [98.0, 31.0], [98.1, 31.0], [98.2, 31.0], [98.3, 32.0], [98.4, 32.0], [98.5, 32.0], [98.6, 32.0], [98.7, 32.0], [98.8, 33.0], [98.9, 33.0], [99.0, 33.0], [99.1, 34.0], [99.2, 38.0], [99.3, 39.0], [99.4, 39.0], [99.5, 40.0], [99.6, 40.0], [99.7, 41.0], [99.8, 41.0], [99.9, 42.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 12000.0, "minX": 0.0, "maxY": 12000.0, "series": [{"data": [[0.0, 12000.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4.9E-324, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12000.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12000.0, "series": [{"data": [[0.0, 12000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.731754304E12, "maxY": 2.170212765957447, "series": [{"data": [[1.731754378E12, 1.7745098039215683], [1.731754419E12, 1.6914893617021272], [1.731754333E12, 1.7551020408163263], [1.731754374E12, 1.7684210526315791], [1.731754415E12, 1.7570093457943932], [1.731754329E12, 1.8686868686868687], [1.73175437E12, 1.8504672897196262], [1.731754411E12, 1.6842105263157898], [1.731754304E12, 2.170212765957447], [1.731754345E12, 1.7980769230769231], [1.731754386E12, 1.676767676767677], [1.731754341E12, 1.7010309278350513], [1.731754382E12, 1.7777777777777772], [1.731754423E12, 1.6666666666666667], [1.731754337E12, 1.803921568627451], [1.731754357E12, 1.798076923076923], [1.731754398E12, 1.745098039215686], [1.731754312E12, 1.7920792079207921], [1.731754353E12, 1.803921568627451], [1.731754394E12, 1.7127659574468086], [1.731754308E12, 1.831683168316832], [1.731754349E12, 1.8061224489795917], [1.73175439E12, 1.8715596330275224], [1.73175441E12, 1.731481481481481], [1.731754324E12, 1.8181818181818177], [1.731754365E12, 1.773584905660377], [1.731754406E12, 1.7040816326530606], [1.73175432E12, 1.7961165048543684], [1.731754361E12, 1.721649484536083], [1.731754402E12, 1.7400000000000002], [1.731754316E12, 1.7216494845360821], [1.73175442E12, 1.7735849056603776], [1.731754334E12, 1.8453608247422675], [1.731754375E12, 1.7714285714285707], [1.731754416E12, 1.6734693877551021], [1.73175433E12, 1.7843137254901953], [1.731754371E12, 1.7142857142857146], [1.731754412E12, 1.7300000000000002], [1.731754326E12, 1.7500000000000002], [1.731754346E12, 1.7422680412371137], [1.731754387E12, 1.7244897959183676], [1.731754342E12, 1.7722772277227716], [1.731754383E12, 1.7572815533980584], [1.731754424E12, 1.0], [1.731754338E12, 1.7474747474747476], [1.731754379E12, 1.7553191489361701], [1.731754399E12, 1.7157894736842105], [1.731754313E12, 1.7010309278350515], [1.731754354E12, 1.8061224489795922], [1.731754395E12, 1.7641509433962268], [1.731754309E12, 1.7941176470588227], [1.73175435E12, 1.7864077669902907], [1.731754391E12, 1.6530612244897953], [1.731754305E12, 1.7864077669902914], [1.731754325E12, 1.7745098039215683], [1.731754366E12, 1.6597938144329893], [1.731754407E12, 1.7272727272727273], [1.731754321E12, 1.7551020408163258], [1.731754362E12, 1.8529411764705883], [1.731754403E12, 1.7254901960784315], [1.731754317E12, 1.7745098039215683], [1.731754358E12, 1.7244897959183676], [1.731754421E12, 1.6938775510204076], [1.731754335E12, 1.8557692307692304], [1.731754376E12, 1.7040816326530612], [1.731754417E12, 1.744897959183674], [1.731754331E12, 1.7600000000000002], [1.731754372E12, 1.7799999999999998], [1.731754413E12, 1.7281553398058254], [1.731754327E12, 1.818181818181818], [1.731754388E12, 1.7572815533980586], [1.731754343E12, 1.8181818181818183], [1.731754384E12, 1.7578947368421054], [1.731754339E12, 1.775510204081633], [1.73175438E12, 1.8571428571428572], [1.7317544E12, 1.7663551401869162], [1.731754314E12, 1.7722772277227723], [1.731754355E12, 1.7669902912621358], [1.731754396E12, 1.6530612244897953], [1.73175431E12, 1.7425742574257426], [1.731754351E12, 1.7083333333333335], [1.731754392E12, 1.707070707070707], [1.731754306E12, 1.7777777777777775], [1.731754347E12, 1.8039215686274501], [1.731754367E12, 1.799999999999999], [1.731754408E12, 1.737864077669903], [1.731754322E12, 1.8252427184466014], [1.731754363E12, 1.7450980392156865], [1.731754404E12, 1.7052631578947373], [1.731754318E12, 1.7525773195876286], [1.731754359E12, 1.8144329896907212], [1.731754336E12, 1.6938775510204083], [1.731754377E12, 1.78], [1.731754418E12, 1.7307692307692308], [1.731754332E12, 1.784313725490196], [1.731754373E12, 1.754901960784314], [1.731754414E12, 1.712765957446809], [1.731754328E12, 1.78], [1.731754369E12, 1.7826086956521734], [1.731754389E12, 1.7499999999999991], [1.731754344E12, 1.8367346938775506], [1.731754385E12, 1.8095238095238095], [1.73175434E12, 1.759615384615385], [1.731754381E12, 1.7575757575757576], [1.731754422E12, 1.6938775510204078], [1.731754356E12, 1.6804123711340206], [1.731754397E12, 1.7373737373737377], [1.731754311E12, 1.693877551020408], [1.731754352E12, 1.8316831683168315], [1.731754393E12, 1.7475728155339805], [1.731754307E12, 1.8252427184466014], [1.731754348E12, 1.7600000000000002], [1.731754368E12, 1.7572815533980586], [1.731754409E12, 1.7340425531914891], [1.731754323E12, 1.7755102040816324], [1.731754364E12, 1.75531914893617], [1.731754405E12, 1.7924528301886797], [1.731754319E12, 1.898989898989899], [1.73175436E12, 1.8058252427184465], [1.731754401E12, 1.6562499999999998], [1.731754315E12, 1.7596153846153852]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731754424E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 15.465311843027342, "minX": 1.0, "maxY": 19.5, "series": [{"data": [[1.0, 15.465311843027342], [2.0, 16.087900043840484], [3.0, 19.5]], "isOverall": false, "label": "Products", "isController": false}, {"data": [[1.763999999999995, 15.946083333333402]], "isOverall": false, "label": "Products-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 226.0, "minX": 1.731754304E12, "maxY": 207417.0, "series": [{"data": [[1.731754378E12, 182908.0], [1.731754419E12, 189703.0], [1.731754333E12, 179588.0], [1.731754374E12, 201981.0], [1.731754415E12, 199047.0], [1.731754329E12, 205302.0], [1.73175437E12, 193098.0], [1.731754411E12, 176308.0], [1.731754304E12, 191566.0], [1.731754345E12, 186454.0], [1.731754386E12, 189130.0], [1.731754341E12, 180131.0], [1.731754382E12, 192585.0], [1.731754423E12, 178453.0], [1.731754337E12, 197561.0], [1.731754357E12, 200967.0], [1.731754398E12, 183098.0], [1.731754312E12, 196169.0], [1.731754353E12, 184318.0], [1.731754394E12, 200346.0], [1.731754308E12, 188179.0], [1.731754349E12, 205317.0], [1.73175439E12, 191997.0], [1.73175441E12, 195670.0], [1.731754324E12, 204886.0], [1.731754365E12, 191139.0], [1.731754406E12, 185301.0], [1.73175432E12, 186244.0], [1.731754361E12, 181471.0], [1.731754402E12, 195826.0], [1.731754316E12, 180721.0], [1.73175442E12, 196398.0], [1.731754334E12, 200800.0], [1.731754375E12, 188752.0], [1.731754416E12, 183467.0], [1.73175433E12, 183977.0], [1.731754371E12, 182521.0], [1.731754412E12, 196474.0], [1.731754326E12, 185900.0], [1.731754346E12, 181100.0], [1.731754387E12, 190871.0], [1.731754342E12, 196130.0], [1.731754383E12, 185544.0], [1.731754424E12, 2212.0], [1.731754338E12, 181235.0], [1.731754379E12, 199352.0], [1.731754399E12, 201632.0], [1.731754313E12, 178019.0], [1.731754354E12, 205165.0], [1.731754395E12, 185146.0], [1.731754309E12, 206282.0], [1.73175435E12, 185198.0], [1.731754391E12, 187062.0], [1.731754305E12, 185691.0], [1.731754325E12, 184222.0], [1.731754366E12, 181471.0], [1.731754407E12, 193914.0], [1.731754321E12, 181994.0], [1.731754362E12, 196842.0], [1.731754403E12, 182609.0], [1.731754317E12, 197744.0], [1.731754358E12, 177240.0], [1.731754421E12, 182564.0], [1.731754335E12, 188479.0], [1.731754376E12, 182666.0], [1.731754417E12, 191215.0], [1.731754331E12, 185574.0], [1.731754372E12, 194506.0], [1.731754413E12, 187203.0], [1.731754327E12, 191955.0], [1.731754388E12, 185131.0], [1.731754343E12, 180040.0], [1.731754384E12, 200608.0], [1.731754339E12, 203215.0], [1.73175438E12, 184475.0], [1.7317544E12, 187783.0], [1.731754314E12, 207417.0], [1.731754355E12, 185991.0], [1.731754396E12, 187077.0], [1.73175431E12, 182714.0], [1.731754351E12, 179720.0], [1.731754392E12, 192939.0], [1.731754306E12, 183591.0], [1.731754347E12, 198331.0], [1.731754367E12, 193723.0], [1.731754408E12, 184521.0], [1.731754322E12, 199630.0], [1.731754363E12, 184329.0], [1.731754404E12, 201809.0], [1.731754318E12, 178019.0], [1.731754359E12, 203567.0], [1.731754336E12, 181852.0], [1.731754377E12, 194455.0], [1.731754418E12, 188910.0], [1.731754332E12, 197901.0], [1.731754373E12, 182884.0], [1.731754414E12, 189703.0], [1.731754328E12, 183650.0], [1.731754369E12, 195236.0], [1.731754389E12, 195213.0], [1.731754344E12, 205317.0], [1.731754385E12, 184475.0], [1.73175434E12, 188479.0], [1.731754381E12, 189130.0], [1.731754422E12, 190223.0], [1.731754356E12, 181583.0], [1.731754397E12, 192752.0], [1.731754311E12, 182296.0], [1.731754352E12, 195285.0], [1.731754393E12, 185131.0], [1.731754307E12, 199884.0], [1.731754348E12, 181140.0], [1.731754368E12, 185264.0], [1.731754409E12, 194825.0], [1.731754323E12, 179588.0], [1.731754364E12, 198561.0], [1.731754405E12, 186797.0], [1.731754319E12, 204886.0], [1.73175436E12, 186133.0], [1.731754401E12, 181819.0], [1.731754315E12, 188441.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.731754378E12, 25313.0], [1.731754419E12, 22965.0], [1.731754333E12, 24249.0], [1.731754374E12, 23269.0], [1.731754415E12, 26312.0], [1.731754329E12, 24313.0], [1.73175437E12, 26357.0], [1.731754411E12, 23683.0], [1.731754304E12, 23110.0], [1.731754345E12, 25571.0], [1.731754386E12, 24578.0], [1.731754341E12, 23906.0], [1.731754382E12, 24152.0], [1.731754423E12, 24521.0], [1.731754337E12, 25118.0], [1.731754357E12, 25523.0], [1.731754398E12, 25321.0], [1.731754312E12, 24799.0], [1.731754353E12, 25281.0], [1.731754394E12, 23001.0], [1.731754308E12, 24981.0], [1.731754349E12, 24061.0], [1.73175439E12, 26899.0], [1.73175441E12, 26592.0], [1.731754324E12, 24376.0], [1.731754365E12, 26122.0], [1.731754406E12, 24415.0], [1.73175432E12, 25269.0], [1.731754361E12, 24105.0], [1.731754402E12, 24414.0], [1.731754316E12, 24016.0], [1.73175442E12, 26032.0], [1.731754334E12, 23841.0], [1.731754375E12, 25914.0], [1.731754416E12, 24442.0], [1.73175433E12, 25082.0], [1.731754371E12, 24320.0], [1.731754412E12, 24396.0], [1.731754326E12, 24717.0], [1.731754346E12, 23941.0], [1.731754387E12, 23899.0], [1.731754342E12, 24895.0], [1.731754383E12, 25565.0], [1.731754424E12, 226.0], [1.731754338E12, 24517.0], [1.731754379E12, 23034.0], [1.731754399E12, 23209.0], [1.731754313E12, 23987.0], [1.731754354E12, 23998.0], [1.731754395E12, 26104.0], [1.731754309E12, 25174.0], [1.73175435E12, 25300.0], [1.731754391E12, 24316.0], [1.731754305E12, 25309.0], [1.731754325E12, 25004.0], [1.731754366E12, 24105.0], [1.731754407E12, 24170.0], [1.731754321E12, 24180.0], [1.731754362E12, 24981.0], [1.731754403E12, 25312.0], [1.731754317E12, 25071.0], [1.731754358E12, 24292.0], [1.731754421E12, 24487.0], [1.731754335E12, 25554.0], [1.731754376E12, 24291.0], [1.731754417E12, 23908.0], [1.731754331E12, 24674.0], [1.731754372E12, 24502.0], [1.731754413E12, 25547.0], [1.731754327E12, 24322.0], [1.731754388E12, 25574.0], [1.731754343E12, 24487.0], [1.731754384E12, 23272.0], [1.731754339E12, 24088.0], [1.73175438E12, 25860.0], [1.7317544E12, 26375.0], [1.731754314E12, 24909.0], [1.731754355E12, 25327.0], [1.731754396E12, 24352.0], [1.73175431E12, 24691.0], [1.731754351E12, 23790.0], [1.731754392E12, 24161.0], [1.731754306E12, 24412.0], [1.731754347E12, 25101.0], [1.731754367E12, 24509.0], [1.731754408E12, 25556.0], [1.731754322E12, 25344.0], [1.731754363E12, 25299.0], [1.731754404E12, 23200.0], [1.731754318E12, 23987.0], [1.731754359E12, 23664.0], [1.731754336E12, 24150.0], [1.731754377E12, 24405.0], [1.731754418E12, 25800.0], [1.731754332E12, 25109.0], [1.731754373E12, 25214.0], [1.731754414E12, 22965.0], [1.731754328E12, 24764.0], [1.731754369E12, 22510.0], [1.731754389E12, 22477.0], [1.731754344E12, 24061.0], [1.731754385E12, 25860.0], [1.73175434E12, 25554.0], [1.731754381E12, 24578.0], [1.731754422E12, 23899.0], [1.731754356E12, 24061.0], [1.731754397E12, 24170.0], [1.731754311E12, 24288.0], [1.731754352E12, 24760.0], [1.731754393E12, 25574.0], [1.731754307E12, 25371.0], [1.731754348E12, 24753.0], [1.731754368E12, 25494.0], [1.731754409E12, 22956.0], [1.731754323E12, 24258.0], [1.731754364E12, 22920.0], [1.731754405E12, 26086.0], [1.731754319E12, 24376.0], [1.73175436E12, 25378.0], [1.731754401E12, 23873.0], [1.731754315E12, 25444.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731754424E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14.81632653061225, "minX": 1.731754304E12, "maxY": 18.47474747474747, "series": [{"data": [[1.731754378E12, 15.911764705882355], [1.731754419E12, 16.010638297872344], [1.731754333E12, 15.836734693877546], [1.731754374E12, 16.831578947368428], [1.731754415E12, 15.345794392523366], [1.731754329E12, 17.707070707070706], [1.73175437E12, 15.794392523364486], [1.731754411E12, 14.968421052631577], [1.731754304E12, 18.31914893617022], [1.731754345E12, 15.894230769230766], [1.731754386E12, 15.444444444444443], [1.731754341E12, 15.494845360824744], [1.731754382E12, 16.060606060606055], [1.731754423E12, 15.323232323232318], [1.731754337E12, 16.107843137254903], [1.731754357E12, 15.932692307692305], [1.731754398E12, 15.3921568627451], [1.731754312E12, 16.04950495049505], [1.731754353E12, 16.12745098039216], [1.731754394E12, 16.489361702127663], [1.731754308E12, 16.524752475247528], [1.731754349E12, 16.80612244897959], [1.73175439E12, 15.724770642201836], [1.73175441E12, 14.990740740740742], [1.731754324E12, 16.85858585858587], [1.731754365E12, 15.132075471698112], [1.731754406E12, 15.581632653061224], [1.73175432E12, 15.893203883495147], [1.731754361E12, 15.701030927835053], [1.731754402E12, 16.090000000000003], [1.731754316E12, 15.608247422680412], [1.73175442E12, 15.669811320754716], [1.731754334E12, 17.371134020618562], [1.731754375E12, 15.314285714285715], [1.731754416E12, 14.93877551020408], [1.73175433E12, 15.941176470588237], [1.731754371E12, 15.438775510204081], [1.731754412E12, 15.989999999999997], [1.731754326E12, 15.89], [1.731754346E12, 15.7319587628866], [1.731754387E12, 15.93877551020408], [1.731754342E12, 16.019801980198018], [1.731754383E12, 15.6116504854369], [1.731754424E12, 15.0], [1.731754338E12, 15.363636363636365], [1.731754379E12, 17.095744680851066], [1.731754399E12, 16.694736842105268], [1.731754313E12, 15.628865979381445], [1.731754354E12, 16.83673469387755], [1.731754395E12, 15.103773584905662], [1.731754309E12, 16.343137254901958], [1.73175435E12, 15.368932038834949], [1.731754391E12, 15.346938775510205], [1.731754305E12, 15.427184466019417], [1.731754325E12, 15.803921568627448], [1.731754366E12, 15.278350515463917], [1.731754407E12, 16.0], [1.731754321E12, 16.020408163265305], [1.731754362E12, 16.725490196078436], [1.731754403E12, 15.254901960784316], [1.731754317E12, 15.833333333333332], [1.731754358E12, 15.469387755102037], [1.731754421E12, 14.81632653061225], [1.731754335E12, 16.423076923076916], [1.731754376E12, 15.54081632653061], [1.731754417E12, 15.89795918367347], [1.731754331E12, 15.730000000000004], [1.731754372E12, 15.969999999999992], [1.731754413E12, 15.582524271844663], [1.731754327E12, 16.71717171717171], [1.731754388E12, 15.553398058252426], [1.731754343E12, 16.383838383838384], [1.731754384E12, 16.97894736842105], [1.731754339E12, 16.62244897959183], [1.73175438E12, 16.171428571428567], [1.7317544E12, 14.869158878504669], [1.731754314E12, 16.415841584158418], [1.731754355E12, 15.291262135922338], [1.731754396E12, 15.520408163265301], [1.73175431E12, 15.297029702970297], [1.731754351E12, 15.552083333333332], [1.731754392E12, 15.666666666666673], [1.731754306E12, 15.888888888888893], [1.731754347E12, 16.11764705882353], [1.731754367E12, 16.229999999999997], [1.731754408E12, 15.291262135922334], [1.731754322E12, 16.242718446601945], [1.731754363E12, 15.323529411764703], [1.731754404E12, 16.926315789473687], [1.731754318E12, 16.08247422680412], [1.731754359E12, 16.97938144329897], [1.731754336E12, 15.469387755102042], [1.731754377E12, 15.919999999999998], [1.731754418E12, 15.384615384615389], [1.731754332E12, 15.980392156862738], [1.731754373E12, 15.656862745098035], [1.731754414E12, 16.49999999999999], [1.731754328E12, 16.220000000000006], [1.731754369E12, 17.06521739130435], [1.731754389E12, 17.304347826086957], [1.731754344E12, 17.367346938775512], [1.731754385E12, 15.523809523809526], [1.73175434E12, 15.403846153846155], [1.731754381E12, 16.242424242424246], [1.731754422E12, 15.734693877551022], [1.731754356E12, 15.195876288659795], [1.731754397E12, 15.828282828282822], [1.731754311E12, 15.387755102040822], [1.731754352E12, 16.60396039603961], [1.731754393E12, 15.436893203883498], [1.731754307E12, 16.116504854368934], [1.731754348E12, 15.639999999999997], [1.731754368E12, 15.582524271844658], [1.731754409E12, 16.638297872340424], [1.731754323E12, 16.09183673469388], [1.731754364E12, 16.57446808510638], [1.731754405E12, 15.264150943396226], [1.731754319E12, 18.47474747474747], [1.73175436E12, 16.02912621359223], [1.731754401E12, 15.375000000000002], [1.731754315E12, 15.278846153846153]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731754424E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 14.81632653061225, "minX": 1.731754304E12, "maxY": 18.46464646464646, "series": [{"data": [[1.731754378E12, 15.911764705882355], [1.731754419E12, 16.000000000000004], [1.731754333E12, 15.836734693877546], [1.731754374E12, 16.831578947368428], [1.731754415E12, 15.345794392523366], [1.731754329E12, 17.69696969696971], [1.73175437E12, 15.794392523364486], [1.731754411E12, 14.957894736842107], [1.731754304E12, 18.24468085106384], [1.731754345E12, 15.894230769230766], [1.731754386E12, 15.444444444444443], [1.731754341E12, 15.494845360824744], [1.731754382E12, 16.060606060606055], [1.731754423E12, 15.323232323232318], [1.731754337E12, 16.107843137254903], [1.731754357E12, 15.923076923076923], [1.731754398E12, 15.3921568627451], [1.731754312E12, 16.039603960396036], [1.731754353E12, 16.117647058823522], [1.731754394E12, 16.489361702127663], [1.731754308E12, 16.475247524752483], [1.731754349E12, 16.80612244897959], [1.73175439E12, 15.724770642201836], [1.73175441E12, 14.98148148148148], [1.731754324E12, 16.848484848484848], [1.731754365E12, 15.122641509433963], [1.731754406E12, 15.581632653061224], [1.73175432E12, 15.873786407766996], [1.731754361E12, 15.701030927835053], [1.731754402E12, 16.080000000000002], [1.731754316E12, 15.587628865979381], [1.73175442E12, 15.650943396226408], [1.731754334E12, 17.371134020618562], [1.731754375E12, 15.304761904761909], [1.731754416E12, 14.93877551020408], [1.73175433E12, 15.941176470588237], [1.731754371E12, 15.438775510204081], [1.731754412E12, 15.989999999999997], [1.731754326E12, 15.87], [1.731754346E12, 15.690721649484535], [1.731754387E12, 15.93877551020408], [1.731754342E12, 15.960396039603959], [1.731754383E12, 15.601941747572818], [1.731754424E12, 15.0], [1.731754338E12, 15.343434343434343], [1.731754379E12, 17.08510638297871], [1.731754399E12, 16.694736842105268], [1.731754313E12, 15.618556701030927], [1.731754354E12, 16.826530612244905], [1.731754395E12, 15.103773584905662], [1.731754309E12, 16.323529411764703], [1.73175435E12, 15.359223300970879], [1.731754391E12, 15.346938775510205], [1.731754305E12, 15.398058252427187], [1.731754325E12, 15.794117647058826], [1.731754366E12, 15.237113402061855], [1.731754407E12, 15.989898989898984], [1.731754321E12, 16.020408163265305], [1.731754362E12, 16.725490196078436], [1.731754403E12, 15.235294117647062], [1.731754317E12, 15.81372549019608], [1.731754358E12, 15.448979591836732], [1.731754421E12, 14.81632653061225], [1.731754335E12, 16.403846153846153], [1.731754376E12, 15.530612244897958], [1.731754417E12, 15.887755102040815], [1.731754331E12, 15.719999999999995], [1.731754372E12, 15.959999999999997], [1.731754413E12, 15.582524271844663], [1.731754327E12, 16.71717171717171], [1.731754388E12, 15.553398058252426], [1.731754343E12, 16.373737373737374], [1.731754384E12, 16.97894736842105], [1.731754339E12, 16.62244897959183], [1.73175438E12, 16.161904761904765], [1.7317544E12, 14.869158878504669], [1.731754314E12, 16.386138613861377], [1.731754355E12, 15.281553398058259], [1.731754396E12, 15.520408163265301], [1.73175431E12, 15.297029702970297], [1.731754351E12, 15.541666666666673], [1.731754392E12, 15.666666666666673], [1.731754306E12, 15.848484848484848], [1.731754347E12, 16.08823529411764], [1.731754367E12, 16.21999999999999], [1.731754408E12, 15.281553398058255], [1.731754322E12, 16.21359223300971], [1.731754363E12, 15.323529411764703], [1.731754404E12, 16.915789473684214], [1.731754318E12, 16.07216494845361], [1.731754359E12, 16.95876288659794], [1.731754336E12, 15.448979591836736], [1.731754377E12, 15.919999999999998], [1.731754418E12, 15.384615384615389], [1.731754332E12, 15.970588235294114], [1.731754373E12, 15.656862745098035], [1.731754414E12, 16.47872340425532], [1.731754328E12, 16.20000000000001], [1.731754369E12, 17.06521739130435], [1.731754389E12, 17.304347826086957], [1.731754344E12, 17.357142857142858], [1.731754385E12, 15.514285714285714], [1.73175434E12, 15.39423076923077], [1.731754381E12, 16.232323232323225], [1.731754422E12, 15.693877551020403], [1.731754356E12, 15.185567010309276], [1.731754397E12, 15.818181818181813], [1.731754311E12, 15.367346938775508], [1.731754352E12, 16.60396039603961], [1.731754393E12, 15.436893203883498], [1.731754307E12, 16.077669902912614], [1.731754348E12, 15.639999999999997], [1.731754368E12, 15.572815533980577], [1.731754409E12, 16.638297872340424], [1.731754323E12, 16.09183673469388], [1.731754364E12, 16.57446808510638], [1.731754405E12, 15.254716981132077], [1.731754319E12, 18.46464646464646], [1.73175436E12, 16.02912621359223], [1.731754401E12, 15.375000000000002], [1.731754315E12, 15.278846153846153]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731754424E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.731754304E12, "maxY": 0.3085106382978722, "series": [{"data": [[1.731754378E12, 0.049019607843137254], [1.731754419E12, 0.0425531914893617], [1.731754333E12, 0.05102040816326533], [1.731754374E12, 0.05263157894736844], [1.731754415E12, 0.028037383177570104], [1.731754329E12, 0.05050505050505051], [1.73175437E12, 0.028037383177570097], [1.731754411E12, 0.031578947368421054], [1.731754304E12, 0.3085106382978722], [1.731754345E12, 0.03846153846153844], [1.731754386E12, 0.040404040404040414], [1.731754341E12, 0.020618556701030938], [1.731754382E12, 0.0404040404040404], [1.731754423E12, 0.04040404040404042], [1.731754337E12, 0.04901960784313725], [1.731754357E12, 0.038461538461538464], [1.731754398E12, 0.019607843137254905], [1.731754312E12, 0.0297029702970297], [1.731754353E12, 0.029411764705882353], [1.731754394E12, 0.04255319148936171], [1.731754308E12, 0.0495049504950495], [1.731754349E12, 0.051020408163265314], [1.73175439E12, 0.03669724770642202], [1.73175441E12, 0.027777777777777787], [1.731754324E12, 0.0303030303030303], [1.731754365E12, 0.028301886792452834], [1.731754406E12, 0.010204081632653073], [1.73175432E12, 0.03883495145631068], [1.731754361E12, 0.041237113402061855], [1.731754402E12, 0.039999999999999994], [1.731754316E12, 0.04123711340206187], [1.73175442E12, 0.04716981132075472], [1.731754334E12, 0.030927835051546393], [1.731754375E12, 0.04761904761904762], [1.731754416E12, 0.05102040816326532], [1.73175433E12, 0.02941176470588236], [1.731754371E12, 0.05102040816326531], [1.731754412E12, 0.020000000000000004], [1.731754326E12, 0.049999999999999996], [1.731754346E12, 0.06185567010309277], [1.731754387E12, 0.010204081632653062], [1.731754342E12, 0.02970297029702971], [1.731754383E12, 0.04854368932038835], [1.731754424E12, 0.0], [1.731754338E12, 0.04040404040404041], [1.731754379E12, 0.03191489361702128], [1.731754399E12, 0.052631578947368425], [1.731754313E12, 0.051546391752577324], [1.731754354E12, 0.010204081632653064], [1.731754395E12, 0.02830188679245284], [1.731754309E12, 0.029411764705882353], [1.73175435E12, 0.03883495145631067], [1.731754391E12, 0.0], [1.731754305E12, 0.048543689320388356], [1.731754325E12, 0.019607843137254905], [1.731754366E12, 0.051546391752577324], [1.731754407E12, 0.030303030303030307], [1.731754321E12, 0.040816326530612256], [1.731754362E12, 0.03921568627450981], [1.731754403E12, 0.019607843137254905], [1.731754317E12, 0.04901960784313725], [1.731754358E12, 0.030612244897959193], [1.731754421E12, 0.030612244897959193], [1.731754335E12, 0.03846153846153844], [1.731754376E12, 0.040816326530612235], [1.731754417E12, 0.04081632653061224], [1.731754331E12, 0.04000000000000001], [1.731754372E12, 0.020000000000000004], [1.731754413E12, 0.03883495145631068], [1.731754327E12, 0.0404040404040404], [1.731754388E12, 0.03883495145631066], [1.731754343E12, 0.030303030303030307], [1.731754384E12, 0.042105263157894736], [1.731754339E12, 0.030612244897959173], [1.73175438E12, 0.047619047619047616], [1.7317544E12, 0.03738317757009344], [1.731754314E12, 0.019801980198019802], [1.731754355E12, 0.029126213592233018], [1.731754396E12, 0.030612244897959186], [1.73175431E12, 0.0297029702970297], [1.731754351E12, 0.020833333333333346], [1.731754392E12, 0.020202020202020204], [1.731754306E12, 0.05050505050505051], [1.731754347E12, 0.03921568627450979], [1.731754367E12, 0.019999999999999997], [1.731754408E12, 0.00970873786407767], [1.731754322E12, 0.03883495145631067], [1.731754363E12, 0.02941176470588236], [1.731754404E12, 0.02105263157894737], [1.731754318E12, 0.05154639175257733], [1.731754359E12, 0.05154639175257732], [1.731754336E12, 0.04081632653061225], [1.731754377E12, 0.03], [1.731754418E12, 0.02884615384615386], [1.731754332E12, 0.04901960784313726], [1.731754373E12, 0.049019607843137254], [1.731754414E12, 0.042553191489361715], [1.731754328E12, 0.049999999999999996], [1.731754369E12, 0.04347826086956522], [1.731754389E12, 0.043478260869565216], [1.731754344E12, 0.03061224489795918], [1.731754385E12, 0.028571428571428588], [1.73175434E12, 0.04807692307692308], [1.731754381E12, 0.0404040404040404], [1.731754422E12, 0.04081632653061224], [1.731754356E12, 0.02061855670103093], [1.731754397E12, 0.030303030303030314], [1.731754311E12, 0.040816326530612256], [1.731754352E12, 0.0396039603960396], [1.731754393E12, 0.029126213592233025], [1.731754307E12, 0.038834951456310676], [1.731754348E12, 0.030000000000000006], [1.731754368E12, 0.03883495145631067], [1.731754409E12, 0.05319148936170215], [1.731754323E12, 0.020408163265306124], [1.731754364E12, 0.03191489361702128], [1.731754405E12, 0.03773584905660378], [1.731754319E12, 0.0202020202020202], [1.73175436E12, 0.04854368932038835], [1.731754401E12, 0.041666666666666664], [1.731754315E12, 0.028846153846153848]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731754424E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.731754304E12, "maxY": 50.0, "series": [{"data": [[1.731754378E12, 36.0], [1.731754419E12, 38.0], [1.731754333E12, 32.0], [1.731754374E12, 40.0], [1.731754415E12, 39.0], [1.731754329E12, 41.0], [1.73175437E12, 26.0], [1.731754411E12, 23.0], [1.731754304E12, 47.0], [1.731754345E12, 25.0], [1.731754386E12, 31.0], [1.731754341E12, 33.0], [1.731754382E12, 33.0], [1.731754423E12, 33.0], [1.731754337E12, 32.0], [1.731754357E12, 32.0], [1.731754398E12, 32.0], [1.731754312E12, 33.0], [1.731754353E12, 33.0], [1.731754394E12, 41.0], [1.731754308E12, 35.0], [1.731754349E12, 42.0], [1.73175439E12, 24.0], [1.73175441E12, 40.0], [1.731754324E12, 42.0], [1.731754365E12, 25.0], [1.731754406E12, 31.0], [1.73175432E12, 25.0], [1.731754361E12, 33.0], [1.731754402E12, 32.0], [1.731754316E12, 34.0], [1.73175442E12, 39.0], [1.731754334E12, 44.0], [1.731754375E12, 26.0], [1.731754416E12, 30.0], [1.73175433E12, 26.0], [1.731754371E12, 32.0], [1.731754412E12, 32.0], [1.731754326E12, 33.0], [1.731754346E12, 31.0], [1.731754387E12, 33.0], [1.731754342E12, 30.0], [1.731754383E12, 32.0], [1.731754424E12, 15.0], [1.731754338E12, 31.0], [1.731754379E12, 42.0], [1.731754399E12, 43.0], [1.731754313E12, 32.0], [1.731754354E12, 41.0], [1.731754395E12, 23.0], [1.731754309E12, 40.0], [1.73175435E12, 24.0], [1.731754391E12, 32.0], [1.731754305E12, 24.0], [1.731754325E12, 26.0], [1.731754366E12, 34.0], [1.731754407E12, 32.0], [1.731754321E12, 32.0], [1.731754362E12, 33.0], [1.731754403E12, 33.0], [1.731754317E12, 31.0], [1.731754358E12, 31.0], [1.731754421E12, 23.0], [1.731754335E12, 26.0], [1.731754376E12, 35.0], [1.731754417E12, 31.0], [1.731754331E12, 31.0], [1.731754372E12, 33.0], [1.731754413E12, 33.0], [1.731754327E12, 34.0], [1.731754388E12, 31.0], [1.731754343E12, 35.0], [1.731754384E12, 41.0], [1.731754339E12, 44.0], [1.73175438E12, 27.0], [1.7317544E12, 25.0], [1.731754314E12, 41.0], [1.731754355E12, 23.0], [1.731754396E12, 31.0], [1.73175431E12, 23.0], [1.731754351E12, 34.0], [1.731754392E12, 33.0], [1.731754306E12, 33.0], [1.731754347E12, 34.0], [1.731754367E12, 31.0], [1.731754408E12, 34.0], [1.731754322E12, 34.0], [1.731754363E12, 30.0], [1.731754404E12, 41.0], [1.731754318E12, 35.0], [1.731754359E12, 42.0], [1.731754336E12, 31.0], [1.731754377E12, 32.0], [1.731754418E12, 31.0], [1.731754332E12, 31.0], [1.731754373E12, 34.0], [1.731754414E12, 39.0], [1.731754328E12, 34.0], [1.731754369E12, 43.0], [1.731754389E12, 50.0], [1.731754344E12, 41.0], [1.731754385E12, 24.0], [1.73175434E12, 27.0], [1.731754381E12, 31.0], [1.731754422E12, 31.0], [1.731754356E12, 32.0], [1.731754397E12, 33.0], [1.731754311E12, 31.0], [1.731754352E12, 32.0], [1.731754393E12, 32.0], [1.731754307E12, 32.0], [1.731754348E12, 30.0], [1.731754368E12, 34.0], [1.731754409E12, 39.0], [1.731754323E12, 31.0], [1.731754364E12, 41.0], [1.731754405E12, 23.0], [1.731754319E12, 42.0], [1.73175436E12, 25.0], [1.731754401E12, 33.0], [1.731754315E12, 25.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.731754378E12, 17.0], [1.731754419E12, 23.0], [1.731754333E12, 19.300000000000026], [1.731754374E12, 24.0], [1.731754415E12, 17.200000000000017], [1.731754329E12, 24.0], [1.73175437E12, 18.000000000000014], [1.731754411E12, 16.400000000000006], [1.731754304E12, 24.0], [1.731754345E12, 20.5], [1.731754386E12, 17.0], [1.731754341E12, 16.0], [1.731754382E12, 22.0], [1.731754423E12, 17.0], [1.731754337E12, 23.0], [1.731754357E12, 23.0], [1.731754398E12, 16.0], [1.731754312E12, 22.799999999999997], [1.731754353E12, 20.700000000000003], [1.731754394E12, 24.0], [1.731754308E12, 23.0], [1.731754349E12, 23.0], [1.73175439E12, 20.0], [1.73175441E12, 16.0], [1.731754324E12, 24.0], [1.731754365E12, 18.499999999999986], [1.731754406E12, 17.10000000000001], [1.73175432E12, 20.400000000000034], [1.731754361E12, 17.0], [1.731754402E12, 23.0], [1.731754316E12, 16.0], [1.73175442E12, 19.599999999999994], [1.731754334E12, 24.0], [1.731754375E12, 18.00000000000003], [1.731754416E12, 16.0], [1.73175433E12, 20.80000000000001], [1.731754371E12, 17.0], [1.731754412E12, 22.0], [1.731754326E12, 17.0], [1.731754346E12, 17.0], [1.731754387E12, 23.0], [1.731754342E12, 22.0], [1.731754383E12, 17.0], [1.731754424E12, 15.0], [1.731754338E12, 17.0], [1.731754379E12, 24.0], [1.731754399E12, 23.400000000000006], [1.731754313E12, 22.0], [1.731754354E12, 23.10000000000001], [1.731754395E12, 17.0], [1.731754309E12, 23.0], [1.73175435E12, 19.400000000000034], [1.731754391E12, 18.400000000000034], [1.731754305E12, 19.60000000000005], [1.731754325E12, 21.200000000000017], [1.731754366E12, 17.0], [1.731754407E12, 23.0], [1.731754321E12, 18.0], [1.731754362E12, 23.700000000000003], [1.731754403E12, 16.0], [1.731754317E12, 22.0], [1.731754358E12, 17.60000000000005], [1.731754421E12, 16.10000000000001], [1.731754335E12, 22.0], [1.731754376E12, 17.0], [1.731754417E12, 22.10000000000001], [1.731754331E12, 17.0], [1.731754372E12, 22.0], [1.731754413E12, 17.0], [1.731754327E12, 24.0], [1.731754388E12, 17.0], [1.731754343E12, 21.0], [1.731754384E12, 23.0], [1.731754339E12, 22.0], [1.73175438E12, 18.0], [1.7317544E12, 16.200000000000003], [1.731754314E12, 23.0], [1.731754355E12, 20.400000000000034], [1.731754396E12, 22.0], [1.73175431E12, 20.799999999999983], [1.731754351E12, 16.0], [1.731754392E12, 22.0], [1.731754306E12, 18.0], [1.731754347E12, 23.0], [1.731754367E12, 23.0], [1.731754408E12, 16.0], [1.731754322E12, 23.0], [1.731754363E12, 19.80000000000001], [1.731754404E12, 23.80000000000001], [1.731754318E12, 19.000000000000014], [1.731754359E12, 23.200000000000003], [1.731754336E12, 16.10000000000001], [1.731754377E12, 23.0], [1.731754418E12, 16.5], [1.731754332E12, 22.700000000000003], [1.731754373E12, 21.80000000000001], [1.731754414E12, 23.5], [1.731754328E12, 18.0], [1.731754369E12, 24.700000000000003], [1.731754389E12, 24.700000000000003], [1.731754344E12, 25.10000000000001], [1.731754385E12, 17.0], [1.73175434E12, 19.5], [1.731754381E12, 18.0], [1.731754422E12, 22.0], [1.731754356E12, 16.200000000000003], [1.731754397E12, 22.0], [1.731754311E12, 16.0], [1.731754352E12, 23.799999999999997], [1.731754393E12, 19.800000000000026], [1.731754307E12, 23.0], [1.731754348E12, 17.80000000000001], [1.731754368E12, 16.60000000000001], [1.731754409E12, 24.0], [1.731754323E12, 20.300000000000026], [1.731754364E12, 23.0], [1.731754405E12, 17.0], [1.731754319E12, 27.0], [1.73175436E12, 20.400000000000034], [1.731754401E12, 17.0], [1.731754315E12, 21.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.731754378E12, 35.91], [1.731754419E12, 38.0], [1.731754333E12, 32.0], [1.731754374E12, 40.0], [1.731754415E12, 39.0], [1.731754329E12, 41.0], [1.73175437E12, 25.92], [1.731754411E12, 23.0], [1.731754304E12, 47.0], [1.731754345E12, 24.950000000000003], [1.731754386E12, 31.0], [1.731754341E12, 33.0], [1.731754382E12, 33.0], [1.731754423E12, 33.0], [1.731754337E12, 32.0], [1.731754357E12, 31.900000000000006], [1.731754398E12, 32.0], [1.731754312E12, 32.980000000000004], [1.731754353E12, 33.0], [1.731754394E12, 41.0], [1.731754308E12, 34.980000000000004], [1.731754349E12, 42.0], [1.73175439E12, 23.900000000000006], [1.73175441E12, 38.559999999999945], [1.731754324E12, 42.0], [1.731754365E12, 24.929999999999993], [1.731754406E12, 31.0], [1.73175432E12, 24.959999999999994], [1.731754361E12, 33.0], [1.731754402E12, 31.989999999999995], [1.731754316E12, 34.0], [1.73175442E12, 39.0], [1.731754334E12, 44.0], [1.731754375E12, 25.879999999999995], [1.731754416E12, 30.0], [1.73175433E12, 25.939999999999998], [1.731754371E12, 32.0], [1.731754412E12, 32.0], [1.731754326E12, 32.97999999999999], [1.731754346E12, 31.0], [1.731754387E12, 33.0], [1.731754342E12, 30.0], [1.731754383E12, 31.959999999999994], [1.731754424E12, 15.0], [1.731754338E12, 31.0], [1.731754379E12, 42.0], [1.731754399E12, 43.0], [1.731754313E12, 32.0], [1.731754354E12, 41.0], [1.731754395E12, 22.929999999999993], [1.731754309E12, 39.97], [1.73175435E12, 24.0], [1.731754391E12, 32.0], [1.731754305E12, 24.0], [1.731754325E12, 25.97], [1.731754366E12, 34.0], [1.731754407E12, 32.0], [1.731754321E12, 32.0], [1.731754362E12, 32.94], [1.731754403E12, 32.91], [1.731754317E12, 31.0], [1.731754358E12, 31.0], [1.731754421E12, 23.0], [1.731754335E12, 25.950000000000003], [1.731754376E12, 35.0], [1.731754417E12, 31.0], [1.731754331E12, 31.0], [1.731754372E12, 32.989999999999995], [1.731754413E12, 32.959999999999994], [1.731754327E12, 34.0], [1.731754388E12, 31.0], [1.731754343E12, 35.0], [1.731754384E12, 41.0], [1.731754339E12, 44.0], [1.73175438E12, 26.939999999999998], [1.7317544E12, 24.92], [1.731754314E12, 40.96000000000001], [1.731754355E12, 23.0], [1.731754396E12, 31.0], [1.73175431E12, 23.0], [1.731754351E12, 34.0], [1.731754392E12, 33.0], [1.731754306E12, 33.0], [1.731754347E12, 34.0], [1.731754367E12, 31.0], [1.731754408E12, 33.91999999999999], [1.731754322E12, 33.87999999999998], [1.731754363E12, 30.0], [1.731754404E12, 41.0], [1.731754318E12, 35.0], [1.731754359E12, 42.0], [1.731754336E12, 31.0], [1.731754377E12, 31.989999999999995], [1.731754418E12, 31.0], [1.731754332E12, 31.0], [1.731754373E12, 33.94], [1.731754414E12, 39.0], [1.731754328E12, 33.989999999999995], [1.731754369E12, 43.0], [1.731754389E12, 50.0], [1.731754344E12, 41.0], [1.731754385E12, 23.939999999999998], [1.73175434E12, 26.85000000000001], [1.731754381E12, 31.0], [1.731754422E12, 31.0], [1.731754356E12, 32.0], [1.731754397E12, 33.0], [1.731754311E12, 31.0], [1.731754352E12, 32.0], [1.731754393E12, 31.959999999999994], [1.731754307E12, 31.959999999999994], [1.731754348E12, 30.0], [1.731754368E12, 33.91999999999999], [1.731754409E12, 39.0], [1.731754323E12, 31.0], [1.731754364E12, 41.0], [1.731754405E12, 23.0], [1.731754319E12, 42.0], [1.73175436E12, 25.0], [1.731754401E12, 33.0], [1.731754315E12, 25.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.731754378E12, 23.849999999999994], [1.731754419E12, 30.0], [1.731754333E12, 23.049999999999997], [1.731754374E12, 33.19999999999993], [1.731754415E12, 23.0], [1.731754329E12, 33.0], [1.73175437E12, 23.599999999999994], [1.731754411E12, 22.0], [1.731754304E12, 39.0], [1.731754345E12, 23.0], [1.731754386E12, 23.0], [1.731754341E12, 23.19999999999999], [1.731754382E12, 24.0], [1.731754423E12, 30.0], [1.731754337E12, 23.849999999999994], [1.731754357E12, 25.75], [1.731754398E12, 23.0], [1.731754312E12, 23.0], [1.731754353E12, 24.0], [1.731754394E12, 34.25], [1.731754308E12, 30.0], [1.731754349E12, 32.34999999999998], [1.73175439E12, 22.0], [1.73175441E12, 22.549999999999997], [1.731754324E12, 32.0], [1.731754365E12, 22.64999999999999], [1.731754406E12, 24.0], [1.73175432E12, 23.0], [1.731754361E12, 24.0], [1.731754402E12, 24.94999999999999], [1.731754316E12, 22.099999999999994], [1.73175442E12, 23.0], [1.731754334E12, 33.99999999999994], [1.731754375E12, 23.0], [1.731754416E12, 23.0], [1.73175433E12, 23.0], [1.731754371E12, 22.0], [1.731754412E12, 30.64999999999992], [1.731754326E12, 22.94999999999999], [1.731754346E12, 23.19999999999999], [1.731754387E12, 24.0], [1.731754342E12, 23.0], [1.731754383E12, 23.0], [1.731754424E12, 15.0], [1.731754338E12, 22.0], [1.731754379E12, 34.25], [1.731754399E12, 32.59999999999991], [1.731754313E12, 23.0], [1.731754354E12, 32.34999999999998], [1.731754395E12, 22.0], [1.731754309E12, 29.94999999999996], [1.73175435E12, 22.0], [1.731754391E12, 23.0], [1.731754305E12, 22.799999999999997], [1.731754325E12, 23.0], [1.731754366E12, 23.099999999999994], [1.731754407E12, 24.0], [1.731754321E12, 23.049999999999997], [1.731754362E12, 25.0], [1.731754403E12, 23.0], [1.731754317E12, 24.69999999999999], [1.731754358E12, 23.049999999999997], [1.731754421E12, 22.0], [1.731754335E12, 23.0], [1.731754376E12, 22.049999999999997], [1.731754417E12, 23.399999999999977], [1.731754331E12, 23.0], [1.731754372E12, 23.94999999999999], [1.731754413E12, 23.799999999999997], [1.731754327E12, 25.0], [1.731754388E12, 23.799999999999997], [1.731754343E12, 25.0], [1.731754384E12, 35.599999999999966], [1.731754339E12, 31.399999999999977], [1.73175438E12, 25.69999999999999], [1.7317544E12, 22.0], [1.731754314E12, 32.0], [1.731754355E12, 23.0], [1.731754396E12, 23.0], [1.73175431E12, 22.89999999999999], [1.731754351E12, 23.14999999999999], [1.731754392E12, 24.0], [1.731754306E12, 23.0], [1.731754347E12, 23.0], [1.731754367E12, 24.0], [1.731754408E12, 22.0], [1.731754322E12, 24.0], [1.731754363E12, 22.0], [1.731754404E12, 33.19999999999993], [1.731754318E12, 27.299999999999983], [1.731754359E12, 32.69999999999996], [1.731754336E12, 23.049999999999997], [1.731754377E12, 24.0], [1.731754418E12, 23.0], [1.731754332E12, 24.0], [1.731754373E12, 24.0], [1.731754414E12, 30.0], [1.731754328E12, 25.0], [1.731754369E12, 34.799999999999955], [1.731754389E12, 34.799999999999955], [1.731754344E12, 31.449999999999974], [1.731754385E12, 23.0], [1.73175434E12, 23.0], [1.731754381E12, 25.0], [1.731754422E12, 26.249999999999986], [1.731754356E12, 23.099999999999994], [1.731754397E12, 23.0], [1.731754311E12, 22.049999999999997], [1.731754352E12, 26.0], [1.731754393E12, 23.0], [1.731754307E12, 24.0], [1.731754348E12, 23.94999999999999], [1.731754368E12, 23.0], [1.731754409E12, 31.25], [1.731754323E12, 24.0], [1.731754364E12, 33.5], [1.731754405E12, 22.0], [1.731754319E12, 33.0], [1.73175436E12, 23.0], [1.731754401E12, 22.14999999999999], [1.731754315E12, 22.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.731754378E12, 14.0], [1.731754419E12, 6.0], [1.731754333E12, 14.0], [1.731754374E12, 5.0], [1.731754415E12, 14.0], [1.731754329E12, 6.0], [1.73175437E12, 13.0], [1.731754411E12, 13.0], [1.731754304E12, 14.0], [1.731754345E12, 14.0], [1.731754386E12, 13.0], [1.731754341E12, 14.0], [1.731754382E12, 13.0], [1.731754423E12, 13.0], [1.731754337E12, 14.0], [1.731754357E12, 13.0], [1.731754398E12, 13.0], [1.731754312E12, 14.0], [1.731754353E12, 14.0], [1.731754394E12, 6.0], [1.731754308E12, 14.0], [1.731754349E12, 6.0], [1.73175439E12, 13.0], [1.73175441E12, 13.0], [1.731754324E12, 7.0], [1.731754365E12, 13.0], [1.731754406E12, 14.0], [1.73175432E12, 14.0], [1.731754361E12, 13.0], [1.731754402E12, 14.0], [1.731754316E12, 13.0], [1.73175442E12, 13.0], [1.731754334E12, 6.0], [1.731754375E12, 13.0], [1.731754416E12, 13.0], [1.73175433E12, 14.0], [1.731754371E12, 13.0], [1.731754412E12, 13.0], [1.731754326E12, 14.0], [1.731754346E12, 14.0], [1.731754387E12, 14.0], [1.731754342E12, 14.0], [1.731754383E12, 13.0], [1.731754424E12, 15.0], [1.731754338E12, 13.0], [1.731754379E12, 5.0], [1.731754399E12, 5.0], [1.731754313E12, 13.0], [1.731754354E12, 7.0], [1.731754395E12, 13.0], [1.731754309E12, 6.0], [1.73175435E12, 13.0], [1.731754391E12, 13.0], [1.731754305E12, 14.0], [1.731754325E12, 14.0], [1.731754366E12, 13.0], [1.731754407E12, 13.0], [1.731754321E12, 14.0], [1.731754362E12, 14.0], [1.731754403E12, 13.0], [1.731754317E12, 13.0], [1.731754358E12, 13.0], [1.731754421E12, 13.0], [1.731754335E12, 14.0], [1.731754376E12, 13.0], [1.731754417E12, 13.0], [1.731754331E12, 14.0], [1.731754372E12, 13.0], [1.731754413E12, 13.0], [1.731754327E12, 14.0], [1.731754388E12, 13.0], [1.731754343E12, 13.0], [1.731754384E12, 6.0], [1.731754339E12, 6.0], [1.73175438E12, 14.0], [1.7317544E12, 13.0], [1.731754314E12, 5.0], [1.731754355E12, 13.0], [1.731754396E12, 13.0], [1.73175431E12, 13.0], [1.731754351E12, 14.0], [1.731754392E12, 13.0], [1.731754306E12, 13.0], [1.731754347E12, 14.0], [1.731754367E12, 14.0], [1.731754408E12, 13.0], [1.731754322E12, 14.0], [1.731754363E12, 13.0], [1.731754404E12, 5.0], [1.731754318E12, 13.0], [1.731754359E12, 8.0], [1.731754336E12, 14.0], [1.731754377E12, 13.0], [1.731754418E12, 13.0], [1.731754332E12, 13.0], [1.731754373E12, 13.0], [1.731754414E12, 6.0], [1.731754328E12, 14.0], [1.731754369E12, 6.0], [1.731754389E12, 6.0], [1.731754344E12, 6.0], [1.731754385E12, 13.0], [1.73175434E12, 13.0], [1.731754381E12, 13.0], [1.731754422E12, 13.0], [1.731754356E12, 13.0], [1.731754397E12, 13.0], [1.731754311E12, 13.0], [1.731754352E12, 14.0], [1.731754393E12, 13.0], [1.731754307E12, 14.0], [1.731754348E12, 13.0], [1.731754368E12, 13.0], [1.731754409E12, 6.0], [1.731754323E12, 13.0], [1.731754364E12, 6.0], [1.731754405E12, 13.0], [1.731754319E12, 7.0], [1.73175436E12, 14.0], [1.731754401E12, 13.0], [1.731754315E12, 13.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.731754378E12, 15.0], [1.731754419E12, 14.0], [1.731754333E12, 15.0], [1.731754374E12, 15.0], [1.731754415E12, 14.0], [1.731754329E12, 16.0], [1.73175437E12, 15.0], [1.731754411E12, 14.0], [1.731754304E12, 16.0], [1.731754345E12, 15.0], [1.731754386E12, 14.0], [1.731754341E12, 15.0], [1.731754382E12, 15.0], [1.731754423E12, 14.0], [1.731754337E12, 15.0], [1.731754357E12, 14.0], [1.731754398E12, 14.0], [1.731754312E12, 15.0], [1.731754353E12, 15.0], [1.731754394E12, 14.0], [1.731754308E12, 15.0], [1.731754349E12, 15.0], [1.73175439E12, 15.0], [1.73175441E12, 14.0], [1.731754324E12, 15.0], [1.731754365E12, 14.0], [1.731754406E12, 15.0], [1.73175432E12, 15.0], [1.731754361E12, 15.0], [1.731754402E12, 15.0], [1.731754316E12, 15.0], [1.73175442E12, 14.0], [1.731754334E12, 15.0], [1.731754375E12, 14.0], [1.731754416E12, 14.0], [1.73175433E12, 15.0], [1.731754371E12, 15.0], [1.731754412E12, 14.0], [1.731754326E12, 15.0], [1.731754346E12, 15.0], [1.731754387E12, 15.0], [1.731754342E12, 15.0], [1.731754383E12, 15.0], [1.731754424E12, 15.0], [1.731754338E12, 14.0], [1.731754379E12, 15.0], [1.731754399E12, 14.0], [1.731754313E12, 14.0], [1.731754354E12, 15.0], [1.731754395E12, 14.0], [1.731754309E12, 15.0], [1.73175435E12, 15.0], [1.731754391E12, 14.0], [1.731754305E12, 15.0], [1.731754325E12, 15.0], [1.731754366E12, 14.0], [1.731754407E12, 14.0], [1.731754321E12, 15.0], [1.731754362E12, 15.0], [1.731754403E12, 14.0], [1.731754317E12, 15.0], [1.731754358E12, 14.0], [1.731754421E12, 14.0], [1.731754335E12, 15.0], [1.731754376E12, 14.5], [1.731754417E12, 14.0], [1.731754331E12, 15.0], [1.731754372E12, 15.0], [1.731754413E12, 14.0], [1.731754327E12, 15.0], [1.731754388E12, 15.0], [1.731754343E12, 15.0], [1.731754384E12, 15.0], [1.731754339E12, 14.0], [1.73175438E12, 15.0], [1.7317544E12, 14.0], [1.731754314E12, 14.0], [1.731754355E12, 14.0], [1.731754396E12, 14.0], [1.73175431E12, 14.0], [1.731754351E12, 15.0], [1.731754392E12, 14.0], [1.731754306E12, 15.0], [1.731754347E12, 15.0], [1.731754367E12, 15.0], [1.731754408E12, 14.0], [1.731754322E12, 15.0], [1.731754363E12, 14.0], [1.731754404E12, 15.0], [1.731754318E12, 15.0], [1.731754359E12, 15.0], [1.731754336E12, 15.0], [1.731754377E12, 15.0], [1.731754418E12, 14.0], [1.731754332E12, 15.0], [1.731754373E12, 14.0], [1.731754414E12, 15.0], [1.731754328E12, 15.0], [1.731754369E12, 15.0], [1.731754389E12, 15.0], [1.731754344E12, 15.0], [1.731754385E12, 15.0], [1.73175434E12, 15.0], [1.731754381E12, 15.0], [1.731754422E12, 14.0], [1.731754356E12, 14.0], [1.731754397E12, 15.0], [1.731754311E12, 15.0], [1.731754352E12, 15.0], [1.731754393E12, 14.0], [1.731754307E12, 15.0], [1.731754348E12, 15.0], [1.731754368E12, 15.0], [1.731754409E12, 15.0], [1.731754323E12, 15.0], [1.731754364E12, 14.0], [1.731754405E12, 15.0], [1.731754319E12, 16.0], [1.73175436E12, 15.0], [1.731754401E12, 14.0], [1.731754315E12, 14.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731754424E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 15.0, "series": [{"data": [[1.0, 15.0], [94.0, 15.0], [92.0, 15.0], [95.0, 15.0], [99.0, 15.0], [98.0, 15.0], [97.0, 15.0], [96.0, 15.0], [103.0, 15.0], [101.0, 15.0], [102.0, 15.0], [100.0, 15.0], [104.0, 15.0], [106.0, 14.0], [107.0, 14.0], [105.0, 15.0], [109.0, 15.0], [108.0, 14.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 109.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 15.0, "series": [{"data": [[1.0, 15.0], [94.0, 15.0], [92.0, 15.0], [95.0, 15.0], [99.0, 15.0], [98.0, 15.0], [97.0, 15.0], [96.0, 15.0], [103.0, 15.0], [101.0, 15.0], [102.0, 15.0], [100.0, 15.0], [104.0, 15.0], [106.0, 14.0], [107.0, 14.0], [105.0, 15.0], [109.0, 15.0], [108.0, 14.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 109.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 92.0, "minX": 1.731754304E12, "maxY": 109.0, "series": [{"data": [[1.731754378E12, 102.0], [1.731754419E12, 94.0], [1.731754333E12, 98.0], [1.731754374E12, 95.0], [1.731754415E12, 107.0], [1.731754329E12, 99.0], [1.73175437E12, 107.0], [1.731754411E12, 95.0], [1.731754304E12, 96.0], [1.731754345E12, 104.0], [1.731754386E12, 99.0], [1.731754341E12, 96.0], [1.731754382E12, 99.0], [1.731754423E12, 98.0], [1.731754337E12, 102.0], [1.731754357E12, 104.0], [1.731754398E12, 102.0], [1.731754312E12, 101.0], [1.731754353E12, 102.0], [1.731754394E12, 94.0], [1.731754308E12, 101.0], [1.731754349E12, 98.0], [1.73175439E12, 109.0], [1.73175441E12, 108.0], [1.731754324E12, 99.0], [1.731754365E12, 106.0], [1.731754406E12, 98.0], [1.73175432E12, 103.0], [1.731754361E12, 97.0], [1.731754402E12, 100.0], [1.731754316E12, 97.0], [1.73175442E12, 106.0], [1.731754334E12, 97.0], [1.731754375E12, 105.0], [1.731754416E12, 98.0], [1.73175433E12, 102.0], [1.731754371E12, 98.0], [1.731754412E12, 100.0], [1.731754326E12, 100.0], [1.731754346E12, 97.0], [1.731754387E12, 98.0], [1.731754342E12, 102.0], [1.731754383E12, 103.0], [1.731754338E12, 99.0], [1.731754379E12, 94.0], [1.731754399E12, 95.0], [1.731754313E12, 97.0], [1.731754354E12, 98.0], [1.731754395E12, 106.0], [1.731754309E12, 102.0], [1.73175435E12, 103.0], [1.731754391E12, 98.0], [1.731754305E12, 103.0], [1.731754325E12, 102.0], [1.731754366E12, 97.0], [1.731754407E12, 99.0], [1.731754321E12, 98.0], [1.731754362E12, 102.0], [1.731754403E12, 102.0], [1.731754317E12, 102.0], [1.731754358E12, 98.0], [1.731754421E12, 98.0], [1.731754335E12, 104.0], [1.731754376E12, 98.0], [1.731754417E12, 98.0], [1.731754331E12, 100.0], [1.731754372E12, 100.0], [1.731754413E12, 103.0], [1.731754327E12, 99.0], [1.731754388E12, 103.0], [1.731754343E12, 99.0], [1.731754384E12, 95.0], [1.731754339E12, 98.0], [1.73175438E12, 105.0], [1.7317544E12, 107.0], [1.731754314E12, 101.0], [1.731754355E12, 103.0], [1.731754396E12, 98.0], [1.73175431E12, 101.0], [1.731754351E12, 96.0], [1.731754392E12, 99.0], [1.731754306E12, 98.0], [1.731754347E12, 102.0], [1.731754367E12, 100.0], [1.731754408E12, 103.0], [1.731754322E12, 103.0], [1.731754363E12, 102.0], [1.731754404E12, 95.0], [1.731754318E12, 97.0], [1.731754359E12, 97.0], [1.731754336E12, 98.0], [1.731754377E12, 100.0], [1.731754418E12, 104.0], [1.731754332E12, 102.0], [1.731754373E12, 102.0], [1.731754414E12, 94.0], [1.731754328E12, 100.0], [1.731754369E12, 92.0], [1.731754389E12, 92.0], [1.731754344E12, 98.0], [1.731754385E12, 105.0], [1.73175434E12, 104.0], [1.731754381E12, 99.0], [1.731754422E12, 98.0], [1.731754356E12, 97.0], [1.731754397E12, 99.0], [1.731754311E12, 98.0], [1.731754352E12, 101.0], [1.731754393E12, 103.0], [1.731754307E12, 104.0], [1.731754348E12, 100.0], [1.731754368E12, 103.0], [1.731754409E12, 94.0], [1.731754323E12, 98.0], [1.731754364E12, 94.0], [1.731754405E12, 106.0], [1.731754319E12, 99.0], [1.73175436E12, 103.0], [1.731754401E12, 96.0], [1.731754315E12, 104.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731754423E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.731754304E12, "maxY": 109.0, "series": [{"data": [[1.731754378E12, 102.0], [1.731754419E12, 94.0], [1.731754333E12, 98.0], [1.731754374E12, 95.0], [1.731754415E12, 107.0], [1.731754329E12, 99.0], [1.73175437E12, 107.0], [1.731754411E12, 95.0], [1.731754304E12, 94.0], [1.731754345E12, 104.0], [1.731754386E12, 99.0], [1.731754341E12, 97.0], [1.731754382E12, 99.0], [1.731754423E12, 99.0], [1.731754337E12, 102.0], [1.731754357E12, 104.0], [1.731754398E12, 102.0], [1.731754312E12, 101.0], [1.731754353E12, 102.0], [1.731754394E12, 94.0], [1.731754308E12, 101.0], [1.731754349E12, 98.0], [1.73175439E12, 109.0], [1.73175441E12, 108.0], [1.731754324E12, 99.0], [1.731754365E12, 106.0], [1.731754406E12, 98.0], [1.73175432E12, 103.0], [1.731754361E12, 97.0], [1.731754402E12, 100.0], [1.731754316E12, 97.0], [1.73175442E12, 106.0], [1.731754334E12, 97.0], [1.731754375E12, 105.0], [1.731754416E12, 98.0], [1.73175433E12, 102.0], [1.731754371E12, 98.0], [1.731754412E12, 100.0], [1.731754326E12, 100.0], [1.731754346E12, 97.0], [1.731754387E12, 98.0], [1.731754342E12, 101.0], [1.731754383E12, 103.0], [1.731754424E12, 1.0], [1.731754338E12, 99.0], [1.731754379E12, 94.0], [1.731754399E12, 95.0], [1.731754313E12, 97.0], [1.731754354E12, 98.0], [1.731754395E12, 106.0], [1.731754309E12, 102.0], [1.73175435E12, 103.0], [1.731754391E12, 98.0], [1.731754305E12, 103.0], [1.731754325E12, 102.0], [1.731754366E12, 97.0], [1.731754407E12, 99.0], [1.731754321E12, 98.0], [1.731754362E12, 102.0], [1.731754403E12, 102.0], [1.731754317E12, 102.0], [1.731754358E12, 98.0], [1.731754421E12, 98.0], [1.731754335E12, 104.0], [1.731754376E12, 98.0], [1.731754417E12, 98.0], [1.731754331E12, 100.0], [1.731754372E12, 100.0], [1.731754413E12, 103.0], [1.731754327E12, 99.0], [1.731754388E12, 103.0], [1.731754343E12, 99.0], [1.731754384E12, 95.0], [1.731754339E12, 98.0], [1.73175438E12, 105.0], [1.7317544E12, 107.0], [1.731754314E12, 101.0], [1.731754355E12, 103.0], [1.731754396E12, 98.0], [1.73175431E12, 101.0], [1.731754351E12, 96.0], [1.731754392E12, 99.0], [1.731754306E12, 99.0], [1.731754347E12, 102.0], [1.731754367E12, 100.0], [1.731754408E12, 103.0], [1.731754322E12, 103.0], [1.731754363E12, 102.0], [1.731754404E12, 95.0], [1.731754318E12, 97.0], [1.731754359E12, 97.0], [1.731754336E12, 98.0], [1.731754377E12, 100.0], [1.731754418E12, 104.0], [1.731754332E12, 102.0], [1.731754373E12, 102.0], [1.731754414E12, 94.0], [1.731754328E12, 100.0], [1.731754369E12, 92.0], [1.731754389E12, 92.0], [1.731754344E12, 98.0], [1.731754385E12, 105.0], [1.73175434E12, 104.0], [1.731754381E12, 99.0], [1.731754422E12, 98.0], [1.731754356E12, 97.0], [1.731754397E12, 99.0], [1.731754311E12, 98.0], [1.731754352E12, 101.0], [1.731754393E12, 103.0], [1.731754307E12, 103.0], [1.731754348E12, 100.0], [1.731754368E12, 103.0], [1.731754409E12, 94.0], [1.731754323E12, 98.0], [1.731754364E12, 94.0], [1.731754405E12, 106.0], [1.731754319E12, 99.0], [1.73175436E12, 103.0], [1.731754401E12, 96.0], [1.731754315E12, 104.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.731754424E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.731754304E12, "maxY": 109.0, "series": [{"data": [[1.731754378E12, 102.0], [1.731754419E12, 94.0], [1.731754333E12, 98.0], [1.731754374E12, 95.0], [1.731754415E12, 107.0], [1.731754329E12, 99.0], [1.73175437E12, 107.0], [1.731754411E12, 95.0], [1.731754304E12, 94.0], [1.731754345E12, 104.0], [1.731754386E12, 99.0], [1.731754341E12, 97.0], [1.731754382E12, 99.0], [1.731754423E12, 99.0], [1.731754337E12, 102.0], [1.731754357E12, 104.0], [1.731754398E12, 102.0], [1.731754312E12, 101.0], [1.731754353E12, 102.0], [1.731754394E12, 94.0], [1.731754308E12, 101.0], [1.731754349E12, 98.0], [1.73175439E12, 109.0], [1.73175441E12, 108.0], [1.731754324E12, 99.0], [1.731754365E12, 106.0], [1.731754406E12, 98.0], [1.73175432E12, 103.0], [1.731754361E12, 97.0], [1.731754402E12, 100.0], [1.731754316E12, 97.0], [1.73175442E12, 106.0], [1.731754334E12, 97.0], [1.731754375E12, 105.0], [1.731754416E12, 98.0], [1.73175433E12, 102.0], [1.731754371E12, 98.0], [1.731754412E12, 100.0], [1.731754326E12, 100.0], [1.731754346E12, 97.0], [1.731754387E12, 98.0], [1.731754342E12, 101.0], [1.731754383E12, 103.0], [1.731754424E12, 1.0], [1.731754338E12, 99.0], [1.731754379E12, 94.0], [1.731754399E12, 95.0], [1.731754313E12, 97.0], [1.731754354E12, 98.0], [1.731754395E12, 106.0], [1.731754309E12, 102.0], [1.73175435E12, 103.0], [1.731754391E12, 98.0], [1.731754305E12, 103.0], [1.731754325E12, 102.0], [1.731754366E12, 97.0], [1.731754407E12, 99.0], [1.731754321E12, 98.0], [1.731754362E12, 102.0], [1.731754403E12, 102.0], [1.731754317E12, 102.0], [1.731754358E12, 98.0], [1.731754421E12, 98.0], [1.731754335E12, 104.0], [1.731754376E12, 98.0], [1.731754417E12, 98.0], [1.731754331E12, 100.0], [1.731754372E12, 100.0], [1.731754413E12, 103.0], [1.731754327E12, 99.0], [1.731754388E12, 103.0], [1.731754343E12, 99.0], [1.731754384E12, 95.0], [1.731754339E12, 98.0], [1.73175438E12, 105.0], [1.7317544E12, 107.0], [1.731754314E12, 101.0], [1.731754355E12, 103.0], [1.731754396E12, 98.0], [1.73175431E12, 101.0], [1.731754351E12, 96.0], [1.731754392E12, 99.0], [1.731754306E12, 99.0], [1.731754347E12, 102.0], [1.731754367E12, 100.0], [1.731754408E12, 103.0], [1.731754322E12, 103.0], [1.731754363E12, 102.0], [1.731754404E12, 95.0], [1.731754318E12, 97.0], [1.731754359E12, 97.0], [1.731754336E12, 98.0], [1.731754377E12, 100.0], [1.731754418E12, 104.0], [1.731754332E12, 102.0], [1.731754373E12, 102.0], [1.731754414E12, 94.0], [1.731754328E12, 100.0], [1.731754369E12, 92.0], [1.731754389E12, 92.0], [1.731754344E12, 98.0], [1.731754385E12, 105.0], [1.73175434E12, 104.0], [1.731754381E12, 99.0], [1.731754422E12, 98.0], [1.731754356E12, 97.0], [1.731754397E12, 99.0], [1.731754311E12, 98.0], [1.731754352E12, 101.0], [1.731754393E12, 103.0], [1.731754307E12, 103.0], [1.731754348E12, 100.0], [1.731754368E12, 103.0], [1.731754409E12, 94.0], [1.731754323E12, 98.0], [1.731754364E12, 94.0], [1.731754405E12, 106.0], [1.731754319E12, 99.0], [1.73175436E12, 103.0], [1.731754401E12, 96.0], [1.731754315E12, 104.0]], "isOverall": false, "label": "Products-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731754424E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.731754304E12, "maxY": 109.0, "series": [{"data": [[1.731754378E12, 102.0], [1.731754419E12, 94.0], [1.731754333E12, 98.0], [1.731754374E12, 95.0], [1.731754415E12, 107.0], [1.731754329E12, 99.0], [1.73175437E12, 107.0], [1.731754411E12, 95.0], [1.731754304E12, 94.0], [1.731754345E12, 104.0], [1.731754386E12, 99.0], [1.731754341E12, 97.0], [1.731754382E12, 99.0], [1.731754423E12, 99.0], [1.731754337E12, 102.0], [1.731754357E12, 104.0], [1.731754398E12, 102.0], [1.731754312E12, 101.0], [1.731754353E12, 102.0], [1.731754394E12, 94.0], [1.731754308E12, 101.0], [1.731754349E12, 98.0], [1.73175439E12, 109.0], [1.73175441E12, 108.0], [1.731754324E12, 99.0], [1.731754365E12, 106.0], [1.731754406E12, 98.0], [1.73175432E12, 103.0], [1.731754361E12, 97.0], [1.731754402E12, 100.0], [1.731754316E12, 97.0], [1.73175442E12, 106.0], [1.731754334E12, 97.0], [1.731754375E12, 105.0], [1.731754416E12, 98.0], [1.73175433E12, 102.0], [1.731754371E12, 98.0], [1.731754412E12, 100.0], [1.731754326E12, 100.0], [1.731754346E12, 97.0], [1.731754387E12, 98.0], [1.731754342E12, 101.0], [1.731754383E12, 103.0], [1.731754424E12, 1.0], [1.731754338E12, 99.0], [1.731754379E12, 94.0], [1.731754399E12, 95.0], [1.731754313E12, 97.0], [1.731754354E12, 98.0], [1.731754395E12, 106.0], [1.731754309E12, 102.0], [1.73175435E12, 103.0], [1.731754391E12, 98.0], [1.731754305E12, 103.0], [1.731754325E12, 102.0], [1.731754366E12, 97.0], [1.731754407E12, 99.0], [1.731754321E12, 98.0], [1.731754362E12, 102.0], [1.731754403E12, 102.0], [1.731754317E12, 102.0], [1.731754358E12, 98.0], [1.731754421E12, 98.0], [1.731754335E12, 104.0], [1.731754376E12, 98.0], [1.731754417E12, 98.0], [1.731754331E12, 100.0], [1.731754372E12, 100.0], [1.731754413E12, 103.0], [1.731754327E12, 99.0], [1.731754388E12, 103.0], [1.731754343E12, 99.0], [1.731754384E12, 95.0], [1.731754339E12, 98.0], [1.73175438E12, 105.0], [1.7317544E12, 107.0], [1.731754314E12, 101.0], [1.731754355E12, 103.0], [1.731754396E12, 98.0], [1.73175431E12, 101.0], [1.731754351E12, 96.0], [1.731754392E12, 99.0], [1.731754306E12, 99.0], [1.731754347E12, 102.0], [1.731754367E12, 100.0], [1.731754408E12, 103.0], [1.731754322E12, 103.0], [1.731754363E12, 102.0], [1.731754404E12, 95.0], [1.731754318E12, 97.0], [1.731754359E12, 97.0], [1.731754336E12, 98.0], [1.731754377E12, 100.0], [1.731754418E12, 104.0], [1.731754332E12, 102.0], [1.731754373E12, 102.0], [1.731754414E12, 94.0], [1.731754328E12, 100.0], [1.731754369E12, 92.0], [1.731754389E12, 92.0], [1.731754344E12, 98.0], [1.731754385E12, 105.0], [1.73175434E12, 104.0], [1.731754381E12, 99.0], [1.731754422E12, 98.0], [1.731754356E12, 97.0], [1.731754397E12, 99.0], [1.731754311E12, 98.0], [1.731754352E12, 101.0], [1.731754393E12, 103.0], [1.731754307E12, 103.0], [1.731754348E12, 100.0], [1.731754368E12, 103.0], [1.731754409E12, 94.0], [1.731754323E12, 98.0], [1.731754364E12, 94.0], [1.731754405E12, 106.0], [1.731754319E12, 99.0], [1.73175436E12, 103.0], [1.731754401E12, 96.0], [1.731754315E12, 104.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.731754424E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

