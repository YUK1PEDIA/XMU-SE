/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1354.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 3.0], [2.5, 3.0], [2.6, 3.0], [2.7, 3.0], [2.8, 3.0], [2.9, 3.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 4.0], [4.9, 4.0], [5.0, 4.0], [5.1, 4.0], [5.2, 4.0], [5.3, 4.0], [5.4, 4.0], [5.5, 4.0], [5.6, 4.0], [5.7, 4.0], [5.8, 4.0], [5.9, 4.0], [6.0, 4.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 5.0], [7.2, 5.0], [7.3, 5.0], [7.4, 5.0], [7.5, 5.0], [7.6, 5.0], [7.7, 5.0], [7.8, 5.0], [7.9, 5.0], [8.0, 5.0], [8.1, 5.0], [8.2, 5.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 5.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 9.0], [13.2, 9.0], [13.3, 9.0], [13.4, 9.0], [13.5, 9.0], [13.6, 9.0], [13.7, 10.0], [13.8, 10.0], [13.9, 10.0], [14.0, 10.0], [14.1, 10.0], [14.2, 11.0], [14.3, 11.0], [14.4, 11.0], [14.5, 12.0], [14.6, 12.0], [14.7, 12.0], [14.8, 13.0], [14.9, 13.0], [15.0, 13.0], [15.1, 14.0], [15.2, 15.0], [15.3, 15.0], [15.4, 16.0], [15.5, 17.0], [15.6, 17.0], [15.7, 18.0], [15.8, 19.0], [15.9, 20.0], [16.0, 21.0], [16.1, 22.0], [16.2, 23.0], [16.3, 24.0], [16.4, 25.0], [16.5, 26.0], [16.6, 27.0], [16.7, 28.0], [16.8, 29.0], [16.9, 31.0], [17.0, 32.0], [17.1, 33.0], [17.2, 35.0], [17.3, 36.0], [17.4, 37.0], [17.5, 39.0], [17.6, 41.0], [17.7, 42.0], [17.8, 44.0], [17.9, 46.0], [18.0, 47.0], [18.1, 49.0], [18.2, 50.0], [18.3, 52.0], [18.4, 54.0], [18.5, 55.0], [18.6, 57.0], [18.7, 59.0], [18.8, 61.0], [18.9, 64.0], [19.0, 65.0], [19.1, 68.0], [19.2, 72.0], [19.3, 74.0], [19.4, 77.0], [19.5, 80.0], [19.6, 83.0], [19.7, 85.0], [19.8, 87.0], [19.9, 88.0], [20.0, 90.0], [20.1, 92.0], [20.2, 93.0], [20.3, 95.0], [20.4, 96.0], [20.5, 97.0], [20.6, 98.0], [20.7, 100.0], [20.8, 101.0], [20.9, 102.0], [21.0, 104.0], [21.1, 105.0], [21.2, 106.0], [21.3, 107.0], [21.4, 108.0], [21.5, 109.0], [21.6, 110.0], [21.7, 112.0], [21.8, 113.0], [21.9, 114.0], [22.0, 115.0], [22.1, 116.0], [22.2, 118.0], [22.3, 119.0], [22.4, 120.0], [22.5, 121.0], [22.6, 122.0], [22.7, 123.0], [22.8, 125.0], [22.9, 126.0], [23.0, 127.0], [23.1, 128.0], [23.2, 129.0], [23.3, 130.0], [23.4, 131.0], [23.5, 132.0], [23.6, 133.0], [23.7, 134.0], [23.8, 135.0], [23.9, 136.0], [24.0, 137.0], [24.1, 138.0], [24.2, 139.0], [24.3, 140.0], [24.4, 142.0], [24.5, 143.0], [24.6, 144.0], [24.7, 145.0], [24.8, 146.0], [24.9, 147.0], [25.0, 148.0], [25.1, 148.0], [25.2, 149.0], [25.3, 150.0], [25.4, 150.0], [25.5, 151.0], [25.6, 152.0], [25.7, 153.0], [25.8, 154.0], [25.9, 155.0], [26.0, 155.0], [26.1, 156.0], [26.2, 156.0], [26.3, 157.0], [26.4, 158.0], [26.5, 159.0], [26.6, 159.0], [26.7, 160.0], [26.8, 161.0], [26.9, 161.0], [27.0, 162.0], [27.1, 163.0], [27.2, 163.0], [27.3, 164.0], [27.4, 165.0], [27.5, 165.0], [27.6, 166.0], [27.7, 166.0], [27.8, 166.0], [27.9, 167.0], [28.0, 168.0], [28.1, 168.0], [28.2, 169.0], [28.3, 169.0], [28.4, 170.0], [28.5, 170.0], [28.6, 171.0], [28.7, 171.0], [28.8, 172.0], [28.9, 172.0], [29.0, 172.0], [29.1, 173.0], [29.2, 173.0], [29.3, 174.0], [29.4, 174.0], [29.5, 174.0], [29.6, 175.0], [29.7, 175.0], [29.8, 176.0], [29.9, 176.0], [30.0, 176.0], [30.1, 177.0], [30.2, 177.0], [30.3, 177.0], [30.4, 177.0], [30.5, 178.0], [30.6, 178.0], [30.7, 178.0], [30.8, 179.0], [30.9, 179.0], [31.0, 180.0], [31.1, 180.0], [31.2, 180.0], [31.3, 180.0], [31.4, 181.0], [31.5, 181.0], [31.6, 181.0], [31.7, 182.0], [31.8, 182.0], [31.9, 182.0], [32.0, 182.0], [32.1, 183.0], [32.2, 183.0], [32.3, 183.0], [32.4, 183.0], [32.5, 184.0], [32.6, 184.0], [32.7, 184.0], [32.8, 185.0], [32.9, 185.0], [33.0, 185.0], [33.1, 186.0], [33.2, 186.0], [33.3, 186.0], [33.4, 186.0], [33.5, 187.0], [33.6, 187.0], [33.7, 187.0], [33.8, 188.0], [33.9, 188.0], [34.0, 188.0], [34.1, 188.0], [34.2, 189.0], [34.3, 189.0], [34.4, 189.0], [34.5, 189.0], [34.6, 190.0], [34.7, 190.0], [34.8, 190.0], [34.9, 190.0], [35.0, 191.0], [35.1, 191.0], [35.2, 191.0], [35.3, 191.0], [35.4, 192.0], [35.5, 192.0], [35.6, 192.0], [35.7, 193.0], [35.8, 193.0], [35.9, 193.0], [36.0, 193.0], [36.1, 194.0], [36.2, 194.0], [36.3, 194.0], [36.4, 194.0], [36.5, 194.0], [36.6, 195.0], [36.7, 195.0], [36.8, 195.0], [36.9, 195.0], [37.0, 196.0], [37.1, 196.0], [37.2, 196.0], [37.3, 196.0], [37.4, 197.0], [37.5, 197.0], [37.6, 197.0], [37.7, 197.0], [37.8, 197.0], [37.9, 198.0], [38.0, 198.0], [38.1, 198.0], [38.2, 198.0], [38.3, 198.0], [38.4, 199.0], [38.5, 199.0], [38.6, 199.0], [38.7, 199.0], [38.8, 200.0], [38.9, 200.0], [39.0, 200.0], [39.1, 200.0], [39.2, 200.0], [39.3, 200.0], [39.4, 201.0], [39.5, 201.0], [39.6, 201.0], [39.7, 201.0], [39.8, 202.0], [39.9, 202.0], [40.0, 202.0], [40.1, 202.0], [40.2, 203.0], [40.3, 203.0], [40.4, 203.0], [40.5, 203.0], [40.6, 204.0], [40.7, 204.0], [40.8, 204.0], [40.9, 204.0], [41.0, 204.0], [41.1, 205.0], [41.2, 205.0], [41.3, 205.0], [41.4, 205.0], [41.5, 205.0], [41.6, 206.0], [41.7, 206.0], [41.8, 206.0], [41.9, 206.0], [42.0, 206.0], [42.1, 207.0], [42.2, 207.0], [42.3, 207.0], [42.4, 207.0], [42.5, 207.0], [42.6, 208.0], [42.7, 208.0], [42.8, 208.0], [42.9, 208.0], [43.0, 209.0], [43.1, 209.0], [43.2, 209.0], [43.3, 209.0], [43.4, 209.0], [43.5, 210.0], [43.6, 210.0], [43.7, 210.0], [43.8, 210.0], [43.9, 210.0], [44.0, 211.0], [44.1, 211.0], [44.2, 211.0], [44.3, 211.0], [44.4, 211.0], [44.5, 211.0], [44.6, 212.0], [44.7, 212.0], [44.8, 212.0], [44.9, 212.0], [45.0, 213.0], [45.1, 213.0], [45.2, 213.0], [45.3, 213.0], [45.4, 213.0], [45.5, 213.0], [45.6, 214.0], [45.7, 214.0], [45.8, 214.0], [45.9, 214.0], [46.0, 214.0], [46.1, 214.0], [46.2, 215.0], [46.3, 215.0], [46.4, 215.0], [46.5, 215.0], [46.6, 215.0], [46.7, 216.0], [46.8, 216.0], [46.9, 216.0], [47.0, 216.0], [47.1, 216.0], [47.2, 217.0], [47.3, 217.0], [47.4, 217.0], [47.5, 217.0], [47.6, 217.0], [47.7, 218.0], [47.8, 218.0], [47.9, 218.0], [48.0, 218.0], [48.1, 218.0], [48.2, 218.0], [48.3, 219.0], [48.4, 219.0], [48.5, 219.0], [48.6, 219.0], [48.7, 219.0], [48.8, 220.0], [48.9, 220.0], [49.0, 220.0], [49.1, 220.0], [49.2, 220.0], [49.3, 220.0], [49.4, 221.0], [49.5, 221.0], [49.6, 221.0], [49.7, 221.0], [49.8, 221.0], [49.9, 221.0], [50.0, 222.0], [50.1, 222.0], [50.2, 222.0], [50.3, 222.0], [50.4, 222.0], [50.5, 223.0], [50.6, 223.0], [50.7, 223.0], [50.8, 223.0], [50.9, 223.0], [51.0, 223.0], [51.1, 224.0], [51.2, 224.0], [51.3, 224.0], [51.4, 224.0], [51.5, 224.0], [51.6, 224.0], [51.7, 225.0], [51.8, 225.0], [51.9, 225.0], [52.0, 225.0], [52.1, 225.0], [52.2, 225.0], [52.3, 226.0], [52.4, 226.0], [52.5, 226.0], [52.6, 226.0], [52.7, 226.0], [52.8, 226.0], [52.9, 227.0], [53.0, 227.0], [53.1, 227.0], [53.2, 227.0], [53.3, 227.0], [53.4, 227.0], [53.5, 228.0], [53.6, 228.0], [53.7, 228.0], [53.8, 228.0], [53.9, 228.0], [54.0, 228.0], [54.1, 228.0], [54.2, 229.0], [54.3, 229.0], [54.4, 229.0], [54.5, 229.0], [54.6, 229.0], [54.7, 230.0], [54.8, 230.0], [54.9, 230.0], [55.0, 230.0], [55.1, 230.0], [55.2, 230.0], [55.3, 231.0], [55.4, 231.0], [55.5, 231.0], [55.6, 231.0], [55.7, 231.0], [55.8, 232.0], [55.9, 232.0], [56.0, 232.0], [56.1, 232.0], [56.2, 232.0], [56.3, 232.0], [56.4, 233.0], [56.5, 233.0], [56.6, 233.0], [56.7, 233.0], [56.8, 233.0], [56.9, 233.0], [57.0, 234.0], [57.1, 234.0], [57.2, 234.0], [57.3, 234.0], [57.4, 234.0], [57.5, 235.0], [57.6, 235.0], [57.7, 235.0], [57.8, 235.0], [57.9, 235.0], [58.0, 235.0], [58.1, 236.0], [58.2, 236.0], [58.3, 236.0], [58.4, 236.0], [58.5, 236.0], [58.6, 237.0], [58.7, 237.0], [58.8, 237.0], [58.9, 237.0], [59.0, 237.0], [59.1, 237.0], [59.2, 238.0], [59.3, 238.0], [59.4, 238.0], [59.5, 238.0], [59.6, 238.0], [59.7, 238.0], [59.8, 239.0], [59.9, 239.0], [60.0, 239.0], [60.1, 239.0], [60.2, 239.0], [60.3, 239.0], [60.4, 240.0], [60.5, 240.0], [60.6, 240.0], [60.7, 240.0], [60.8, 240.0], [60.9, 240.0], [61.0, 241.0], [61.1, 241.0], [61.2, 241.0], [61.3, 241.0], [61.4, 241.0], [61.5, 242.0], [61.6, 242.0], [61.7, 242.0], [61.8, 242.0], [61.9, 243.0], [62.0, 243.0], [62.1, 243.0], [62.2, 243.0], [62.3, 243.0], [62.4, 244.0], [62.5, 244.0], [62.6, 244.0], [62.7, 244.0], [62.8, 244.0], [62.9, 245.0], [63.0, 245.0], [63.1, 245.0], [63.2, 245.0], [63.3, 245.0], [63.4, 246.0], [63.5, 246.0], [63.6, 246.0], [63.7, 246.0], [63.8, 247.0], [63.9, 247.0], [64.0, 247.0], [64.1, 247.0], [64.2, 247.0], [64.3, 247.0], [64.4, 248.0], [64.5, 248.0], [64.6, 248.0], [64.7, 248.0], [64.8, 248.0], [64.9, 249.0], [65.0, 249.0], [65.1, 249.0], [65.2, 249.0], [65.3, 250.0], [65.4, 250.0], [65.5, 250.0], [65.6, 250.0], [65.7, 251.0], [65.8, 251.0], [65.9, 251.0], [66.0, 251.0], [66.1, 251.0], [66.2, 251.0], [66.3, 252.0], [66.4, 252.0], [66.5, 252.0], [66.6, 252.0], [66.7, 253.0], [66.8, 253.0], [66.9, 253.0], [67.0, 253.0], [67.1, 253.0], [67.2, 254.0], [67.3, 254.0], [67.4, 254.0], [67.5, 254.0], [67.6, 255.0], [67.7, 255.0], [67.8, 255.0], [67.9, 255.0], [68.0, 256.0], [68.1, 256.0], [68.2, 256.0], [68.3, 256.0], [68.4, 256.0], [68.5, 257.0], [68.6, 257.0], [68.7, 257.0], [68.8, 257.0], [68.9, 258.0], [69.0, 258.0], [69.1, 258.0], [69.2, 258.0], [69.3, 259.0], [69.4, 259.0], [69.5, 259.0], [69.6, 259.0], [69.7, 259.0], [69.8, 260.0], [69.9, 260.0], [70.0, 260.0], [70.1, 261.0], [70.2, 261.0], [70.3, 261.0], [70.4, 261.0], [70.5, 262.0], [70.6, 262.0], [70.7, 262.0], [70.8, 262.0], [70.9, 263.0], [71.0, 263.0], [71.1, 263.0], [71.2, 263.0], [71.3, 263.0], [71.4, 264.0], [71.5, 264.0], [71.6, 264.0], [71.7, 265.0], [71.8, 265.0], [71.9, 265.0], [72.0, 265.0], [72.1, 266.0], [72.2, 266.0], [72.3, 266.0], [72.4, 266.0], [72.5, 267.0], [72.6, 267.0], [72.7, 267.0], [72.8, 268.0], [72.9, 268.0], [73.0, 268.0], [73.1, 269.0], [73.2, 269.0], [73.3, 269.0], [73.4, 270.0], [73.5, 270.0], [73.6, 270.0], [73.7, 271.0], [73.8, 271.0], [73.9, 271.0], [74.0, 271.0], [74.1, 272.0], [74.2, 272.0], [74.3, 272.0], [74.4, 272.0], [74.5, 273.0], [74.6, 273.0], [74.7, 273.0], [74.8, 274.0], [74.9, 274.0], [75.0, 274.0], [75.1, 275.0], [75.2, 275.0], [75.3, 275.0], [75.4, 275.0], [75.5, 276.0], [75.6, 276.0], [75.7, 276.0], [75.8, 276.0], [75.9, 277.0], [76.0, 277.0], [76.1, 277.0], [76.2, 278.0], [76.3, 278.0], [76.4, 278.0], [76.5, 279.0], [76.6, 279.0], [76.7, 279.0], [76.8, 280.0], [76.9, 280.0], [77.0, 280.0], [77.1, 281.0], [77.2, 281.0], [77.3, 282.0], [77.4, 282.0], [77.5, 282.0], [77.6, 283.0], [77.7, 283.0], [77.8, 283.0], [77.9, 284.0], [78.0, 284.0], [78.1, 284.0], [78.2, 284.0], [78.3, 285.0], [78.4, 285.0], [78.5, 285.0], [78.6, 286.0], [78.7, 286.0], [78.8, 286.0], [78.9, 287.0], [79.0, 287.0], [79.1, 287.0], [79.2, 288.0], [79.3, 288.0], [79.4, 289.0], [79.5, 289.0], [79.6, 289.0], [79.7, 290.0], [79.8, 290.0], [79.9, 290.0], [80.0, 291.0], [80.1, 291.0], [80.2, 291.0], [80.3, 292.0], [80.4, 292.0], [80.5, 292.0], [80.6, 293.0], [80.7, 293.0], [80.8, 293.0], [80.9, 294.0], [81.0, 294.0], [81.1, 295.0], [81.2, 295.0], [81.3, 296.0], [81.4, 296.0], [81.5, 296.0], [81.6, 297.0], [81.7, 297.0], [81.8, 297.0], [81.9, 298.0], [82.0, 298.0], [82.1, 299.0], [82.2, 299.0], [82.3, 299.0], [82.4, 300.0], [82.5, 300.0], [82.6, 301.0], [82.7, 301.0], [82.8, 302.0], [82.9, 302.0], [83.0, 303.0], [83.1, 303.0], [83.2, 303.0], [83.3, 304.0], [83.4, 304.0], [83.5, 305.0], [83.6, 305.0], [83.7, 306.0], [83.8, 306.0], [83.9, 306.0], [84.0, 307.0], [84.1, 308.0], [84.2, 308.0], [84.3, 309.0], [84.4, 309.0], [84.5, 309.0], [84.6, 310.0], [84.7, 311.0], [84.8, 311.0], [84.9, 312.0], [85.0, 312.0], [85.1, 313.0], [85.2, 313.0], [85.3, 314.0], [85.4, 315.0], [85.5, 315.0], [85.6, 316.0], [85.7, 317.0], [85.8, 317.0], [85.9, 318.0], [86.0, 318.0], [86.1, 319.0], [86.2, 319.0], [86.3, 320.0], [86.4, 321.0], [86.5, 321.0], [86.6, 322.0], [86.7, 323.0], [86.8, 323.0], [86.9, 324.0], [87.0, 325.0], [87.1, 326.0], [87.2, 327.0], [87.3, 327.0], [87.4, 328.0], [87.5, 329.0], [87.6, 330.0], [87.7, 330.0], [87.8, 331.0], [87.9, 332.0], [88.0, 332.0], [88.1, 333.0], [88.2, 334.0], [88.3, 335.0], [88.4, 336.0], [88.5, 336.0], [88.6, 337.0], [88.7, 338.0], [88.8, 339.0], [88.9, 339.0], [89.0, 340.0], [89.1, 340.0], [89.2, 341.0], [89.3, 342.0], [89.4, 343.0], [89.5, 343.0], [89.6, 344.0], [89.7, 345.0], [89.8, 346.0], [89.9, 346.0], [90.0, 347.0], [90.1, 348.0], [90.2, 349.0], [90.3, 349.0], [90.4, 350.0], [90.5, 351.0], [90.6, 352.0], [90.7, 353.0], [90.8, 354.0], [90.9, 355.0], [91.0, 356.0], [91.1, 356.0], [91.2, 357.0], [91.3, 358.0], [91.4, 359.0], [91.5, 360.0], [91.6, 361.0], [91.7, 362.0], [91.8, 363.0], [91.9, 363.0], [92.0, 364.0], [92.1, 366.0], [92.2, 367.0], [92.3, 367.0], [92.4, 368.0], [92.5, 369.0], [92.6, 369.0], [92.7, 370.0], [92.8, 371.0], [92.9, 371.0], [93.0, 372.0], [93.1, 372.0], [93.2, 373.0], [93.3, 374.0], [93.4, 374.0], [93.5, 375.0], [93.6, 375.0], [93.7, 376.0], [93.8, 376.0], [93.9, 377.0], [94.0, 378.0], [94.1, 379.0], [94.2, 379.0], [94.3, 380.0], [94.4, 380.0], [94.5, 381.0], [94.6, 382.0], [94.7, 382.0], [94.8, 383.0], [94.9, 384.0], [95.0, 384.0], [95.1, 385.0], [95.2, 385.0], [95.3, 386.0], [95.4, 387.0], [95.5, 387.0], [95.6, 388.0], [95.7, 389.0], [95.8, 390.0], [95.9, 390.0], [96.0, 391.0], [96.1, 391.0], [96.2, 392.0], [96.3, 393.0], [96.4, 394.0], [96.5, 394.0], [96.6, 395.0], [96.7, 396.0], [96.8, 396.0], [96.9, 397.0], [97.0, 398.0], [97.1, 399.0], [97.2, 400.0], [97.3, 400.0], [97.4, 401.0], [97.5, 402.0], [97.6, 403.0], [97.7, 403.0], [97.8, 404.0], [97.9, 405.0], [98.0, 406.0], [98.1, 407.0], [98.2, 408.0], [98.3, 408.0], [98.4, 410.0], [98.5, 411.0], [98.6, 412.0], [98.7, 413.0], [98.8, 414.0], [98.9, 415.0], [99.0, 417.0], [99.1, 418.0], [99.2, 420.0], [99.3, 422.0], [99.4, 424.0], [99.5, 427.0], [99.6, 430.0], [99.7, 435.0], [99.8, 441.0], [99.9, 526.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 13928.0, "series": [{"data": [[0.0, 6616.0], [300.0, 4765.0], [1200.0, 24.0], [1300.0, 3.0], [100.0, 5793.0], [200.0, 13928.0], [400.0, 864.0], [500.0, 7.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 31888.0, "series": [{"data": [[0.0, 31888.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 34.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 78.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.62048588312541, "minX": 1.734158397E12, "maxY": 1032.4602829162125, "series": [{"data": [[1.734158397E12, 9.165751920965969], [1.734158398E12, 8.62048588312541], [1.734158399E12, 22.685171102661595], [1.7341584E12, 421.4886616273904], [1.734158406E12, 648.910177595628], [1.734158407E12, 792.7942700396214], [1.734158408E12, 763.6599932134368], [1.734158409E12, 447.8237082066877], [1.734158401E12, 1032.4602829162125], [1.734158402E12, 943.2167058034202], [1.734158403E12, 489.74663072776303], [1.734158404E12, 564.0827489481069], [1.734158405E12, 664.0383891607077]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.734158409E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.4805194805194803, "minX": 1.0, "maxY": 502.5, "series": [{"data": [[2.0, 3.4805194805194803], [3.0, 4.582159624413146], [4.0, 4.241721854304635], [5.0, 4.358361774744031], [6.0, 4.305389221556884], [7.0, 4.377581120943948], [8.0, 4.650557620817843], [9.0, 4.7551020408163245], [10.0, 5.170403587443945], [11.0, 5.394557823129254], [12.0, 5.841059602649003], [13.0, 6.074766355140188], [14.0, 6.041666666666666], [15.0, 5.994219653179191], [16.0, 6.129496402877697], [17.0, 6.816666666666666], [18.0, 7.4559999999999995], [19.0, 7.057692307692311], [20.0, 6.829457364341085], [21.0, 8.470085470085468], [22.0, 6.412698412698416], [23.0, 8.251908396946565], [24.0, 8.933333333333328], [25.0, 9.870967741935484], [26.0, 12.79591836734694], [27.0, 13.119999999999997], [28.0, 13.96153846153846], [29.0, 15.09090909090909], [30.0, 15.250000000000002], [31.0, 20.565217391304348], [33.0, 14.166666666666664], [32.0, 21.840000000000003], [35.0, 14.22222222222222], [34.0, 15.360000000000001], [37.0, 27.387755102040828], [36.0, 15.321428571428571], [38.0, 16.65], [39.0, 13.431818181818187], [41.0, 20.870967741935484], [40.0, 12.468085106382981], [43.0, 11.73846153846154], [42.0, 14.577777777777783], [44.0, 23.94736842105263], [45.0, 15.93548387096774], [46.0, 12.789473684210524], [47.0, 15.72], [49.0, 19.0], [48.0, 24.0], [50.0, 45.75], [51.0, 11.333333333333334], [52.0, 51.22222222222222], [53.0, 31.2], [55.0, 102.0], [54.0, 94.0], [57.0, 158.0], [56.0, 134.0], [59.0, 23.80952380952381], [58.0, 33.25], [60.0, 21.999999999999996], [61.0, 20.375], [63.0, 44.666666666666664], [62.0, 52.111111111111114], [64.0, 31.153846153846153], [66.0, 22.75], [65.0, 37.333333333333336], [67.0, 78.33333333333333], [68.0, 33.0], [70.0, 35.52631578947368], [71.0, 28.166666666666664], [69.0, 43.0], [72.0, 33.857142857142854], [73.0, 30.599999999999998], [74.0, 45.3], [75.0, 29.73333333333333], [76.0, 33.4], [77.0, 37.294117647058826], [78.0, 40.769230769230774], [79.0, 26.636363636363637], [80.0, 36.0], [83.0, 33.125], [82.0, 34.625], [81.0, 30.909090909090907], [84.0, 41.0625], [86.0, 33.88888888888889], [85.0, 34.0], [87.0, 70.0], [89.0, 32.142857142857146], [88.0, 33.333333333333336], [90.0, 95.75], [91.0, 36.5], [93.0, 47.33333333333333], [94.0, 64.6], [95.0, 33.5], [92.0, 157.5], [99.0, 32.57142857142857], [98.0, 84.0], [97.0, 147.0], [96.0, 158.0], [103.0, 45.8], [102.0, 44.8], [101.0, 40.04761904761905], [100.0, 72.75], [105.0, 47.33333333333333], [107.0, 45.142857142857146], [106.0, 42.875], [104.0, 194.0], [109.0, 34.69230769230769], [110.0, 27.88888888888889], [111.0, 56.36363636363637], [108.0, 49.57142857142857], [112.0, 64.33333333333333], [113.0, 92.0], [114.0, 86.0], [115.0, 136.0], [119.0, 77.33333333333334], [118.0, 69.66666666666667], [117.0, 194.0], [116.0, 162.0], [120.0, 58.166666666666664], [122.0, 63.8], [123.0, 62.0], [121.0, 35.699999999999996], [127.0, 216.0], [126.0, 211.0], [125.0, 132.0], [124.0, 140.0], [128.0, 104.0], [130.0, 93.5], [132.0, 87.0], [133.0, 98.0], [135.0, 137.0], [134.0, 202.0], [131.0, 183.0], [129.0, 214.0], [140.0, 58.222222222222214], [141.0, 92.66666666666666], [143.0, 81.25], [139.0, 137.0], [138.0, 146.5], [136.0, 132.0], [144.0, 53.33333333333334], [147.0, 80.0], [146.0, 58.59090909090909], [148.0, 60.58333333333333], [149.0, 63.57142857142857], [150.0, 60.882352941176464], [151.0, 51.06666666666668], [145.0, 53.6], [152.0, 54.53333333333333], [154.0, 54.60000000000001], [156.0, 63.666666666666664], [155.0, 47.499999999999986], [153.0, 84.5], [159.0, 145.0], [158.0, 198.5], [163.0, 102.5], [165.0, 63.30769230769231], [167.0, 71.0], [166.0, 55.3], [164.0, 92.0], [162.0, 151.0], [161.0, 167.0], [160.0, 215.0], [173.0, 146.0], [172.0, 65.0], [171.0, 98.0], [170.0, 107.0], [169.0, 29.5], [168.0, 130.66666666666666], [175.0, 147.0], [174.0, 145.0], [180.0, 132.5], [183.0, 146.33333333333334], [181.0, 228.0], [179.0, 164.0], [178.0, 225.5], [177.0, 181.0], [188.0, 86.66666666666666], [190.0, 228.0], [189.0, 151.0], [187.0, 141.0], [186.0, 203.0], [185.0, 179.5], [194.0, 106.8], [193.0, 72.96000000000002], [195.0, 81.8], [196.0, 111.66666666666667], [198.0, 72.68750000000001], [197.0, 96.5], [199.0, 79.66666666666666], [192.0, 97.5], [200.0, 126.0], [202.0, 147.0], [204.0, 154.5], [205.0, 146.5], [207.0, 147.5], [206.0, 211.0], [203.0, 226.0], [201.0, 211.0], [209.0, 123.75], [210.0, 83.5], [211.0, 132.33333333333334], [212.0, 128.0], [215.0, 132.0], [214.0, 136.0], [213.0, 201.0], [208.0, 203.0], [217.0, 77.0], [218.0, 133.25], [219.0, 95.5], [222.0, 70.81818181818181], [221.0, 94.66666666666666], [223.0, 103.5], [220.0, 72.6], [216.0, 209.0], [225.0, 67.0], [224.0, 77.71428571428571], [228.0, 88.16666666666666], [229.0, 75.5], [227.0, 104.75], [226.0, 60.666666666666664], [231.0, 217.0], [230.0, 155.0], [234.0, 85.0], [235.0, 101.0], [236.0, 95.46153846153845], [237.0, 89.53846153846153], [239.0, 143.0], [238.0, 158.0], [233.0, 200.0], [240.0, 127.77777777777777], [241.0, 111.0], [245.0, 149.0], [247.0, 210.0], [246.0, 220.0], [244.0, 197.0], [243.0, 203.5], [242.0, 211.5], [255.0, 77.0], [254.0, 219.0], [253.0, 210.0], [252.0, 218.0], [251.0, 213.0], [250.0, 209.0], [249.0, 220.0], [248.0, 204.0], [270.0, 159.0], [257.0, 95.0], [256.0, 228.0], [263.0, 147.0], [262.0, 148.0], [261.0, 157.0], [260.0, 158.0], [258.0, 173.66666666666666], [271.0, 134.5], [269.0, 160.0], [268.0, 168.0], [259.0, 150.0], [267.0, 174.0], [266.0, 159.0], [265.0, 147.0], [264.0, 177.0], [287.0, 117.66666666666667], [284.0, 141.0], [275.0, 186.5], [274.0, 139.33333333333334], [273.0, 142.5], [272.0, 158.0], [285.0, 133.85714285714286], [286.0, 137.0], [283.0, 153.72727272727272], [282.0, 133.81818181818184], [281.0, 137.70000000000002], [280.0, 141.13333333333333], [279.0, 134.0], [278.0, 147.0], [277.0, 185.5], [276.0, 185.5], [302.0, 128.75], [289.0, 147.5], [295.0, 123.4193548387097], [288.0, 175.0], [294.0, 113.8], [293.0, 129.8181818181818], [292.0, 124.77777777777777], [303.0, 127.8], [301.0, 123.90909090909089], [300.0, 127.46153846153845], [291.0, 123.95454545454544], [290.0, 131.0], [299.0, 111.45], [298.0, 113.47619047619047], [297.0, 118.47058823529412], [296.0, 121.66666666666664], [318.0, 157.75], [311.0, 132.54166666666663], [305.0, 128.20000000000002], [304.0, 130.55555555555554], [307.0, 141.5], [306.0, 116.0], [314.0, 134.0], [316.0, 146.99999999999997], [317.0, 166.77777777777777], [315.0, 145.625], [313.0, 135.10344827586206], [312.0, 140.42857142857142], [319.0, 148.16666666666669], [310.0, 132.59090909090915], [309.0, 129.0], [308.0, 103.8888888888889], [332.0, 147.49999999999997], [322.0, 151.36363636363635], [320.0, 136.875], [321.0, 141.16666666666666], [326.0, 149.2], [327.0, 119.22222222222221], [323.0, 124.29411764705881], [324.0, 131.7], [325.0, 138.375], [329.0, 129.5], [331.0, 180.33333333333334], [330.0, 122.88888888888889], [334.0, 160.4], [328.0, 144.84615384615384], [335.0, 148.875], [333.0, 166.15000000000003], [350.0, 144.5], [336.0, 164.0], [337.0, 183.0], [343.0, 171.33333333333334], [340.0, 189.0], [342.0, 169.0], [341.0, 204.5], [338.0, 183.33333333333334], [351.0, 174.84615384615384], [349.0, 163.16666666666666], [348.0, 168.5], [339.0, 169.0], [347.0, 183.0], [346.0, 168.0], [345.0, 170.0], [344.0, 149.66666666666666], [366.0, 166.42857142857144], [367.0, 145.87499999999997], [365.0, 182.66666666666666], [364.0, 129.4], [363.0, 156.66666666666666], [362.0, 151.5], [361.0, 176.0], [360.0, 145.6], [359.0, 113.16666666666667], [353.0, 158.5], [352.0, 180.85714285714283], [355.0, 129.52380952380952], [354.0, 126.88461538461542], [358.0, 116.2121212121212], [357.0, 130.2173913043478], [356.0, 135.35999999999999], [382.0, 177.42857142857142], [375.0, 177.5], [368.0, 167.625], [369.0, 148.33333333333334], [371.0, 166.3076923076923], [370.0, 158.57142857142858], [374.0, 146.5], [373.0, 165.36363636363635], [372.0, 156.8], [378.0, 143.8], [381.0, 167.4], [380.0, 171.0], [379.0, 148.5], [377.0, 159.25], [376.0, 169.44444444444446], [383.0, 105.4], [384.0, 155.83333333333334], [387.0, 142.23076923076923], [396.0, 136.2], [397.0, 126.0], [398.0, 126.77777777777776], [399.0, 123.60000000000001], [391.0, 121.72727272727273], [392.0, 139.9], [393.0, 126.07692307692307], [395.0, 167.84615384615387], [394.0, 141.69999999999996], [390.0, 124.25], [389.0, 138.4615384615385], [388.0, 133.9333333333333], [386.0, 139.29166666666663], [385.0, 162.45454545454547], [415.0, 141.25], [407.0, 168.66666666666666], [406.0, 159.0], [404.0, 156.9], [405.0, 129.875], [413.0, 149.88888888888889], [414.0, 144.42105263157893], [412.0, 140.2857142857143], [403.0, 141.33333333333334], [402.0, 146.0], [401.0, 141.5], [400.0, 111.35], [411.0, 142.8421052631579], [410.0, 147.89999999999998], [409.0, 172.125], [408.0, 142.75], [418.0, 127.74999999999999], [419.0, 148.44444444444446], [428.0, 190.28571428571428], [421.0, 138.8421052631579], [422.0, 126.66666666666666], [420.0, 157.1379310344828], [417.0, 176.07142857142856], [423.0, 120.58333333333333], [416.0, 159.9090909090909], [429.0, 172.61538461538464], [431.0, 171.48], [427.0, 185.83333333333334], [426.0, 137.0], [425.0, 173.8148148148148], [424.0, 153.9090909090909], [430.0, 191.125], [444.0, 187.0625], [434.0, 187.5], [436.0, 200.8], [437.0, 199.4137931034483], [439.0, 183.8235294117647], [438.0, 182.66666666666666], [435.0, 180.6], [433.0, 146.25], [432.0, 162.69230769230768], [443.0, 195.0666666666667], [442.0, 202.7142857142857], [441.0, 187.9375], [440.0, 187.43750000000003], [447.0, 155.00000000000003], [446.0, 167.3888888888889], [445.0, 166.75], [462.0, 162.21052631578948], [453.0, 179.0], [452.0, 187.50000000000003], [454.0, 172.25], [458.0, 174.54545454545453], [459.0, 176.46153846153848], [460.0, 176.08695652173913], [455.0, 179.4], [449.0, 206.16000000000003], [448.0, 195.88], [451.0, 201.8181818181818], [450.0, 203.0], [463.0, 167.04], [461.0, 186.14285714285714], [457.0, 181.07142857142856], [456.0, 161.8620689655172], [465.0, 146.12499999999997], [464.0, 162.0], [466.0, 140.89999999999998], [467.0, 113.0], [477.0, 139.4375], [476.0, 141.3125], [478.0, 135.6], [479.0, 155.75], [472.0, 142.66666666666669], [469.0, 133.99999999999997], [468.0, 145.23076923076925], [471.0, 178.76190476190473], [470.0, 157.0], [473.0, 132.00000000000003], [475.0, 139.05263157894737], [474.0, 132.1538461538462], [493.0, 193.5], [480.0, 136.84848484848484], [487.0, 133.36363636363635], [486.0, 147.2], [485.0, 154.0625], [484.0, 129.94444444444446], [481.0, 164.11111111111111], [482.0, 147.76190476190476], [492.0, 125.63414634146339], [483.0, 139.06896551724142], [489.0, 135.24489795918367], [490.0, 146.26315789473685], [491.0, 125.99999999999999], [494.0, 188.63636363636363], [495.0, 185.89999999999998], [488.0, 131.0], [497.0, 169.66666666666666], [496.0, 176.0], [498.0, 177.0], [499.0, 171.0], [500.0, 157.75], [501.0, 168.0], [502.0, 199.2], [503.0, 150.57894736842104], [504.0, 173.25], [510.0, 168.20000000000002], [511.0, 166.42857142857142], [508.0, 175.85714285714286], [509.0, 154.6], [505.0, 198.13333333333335], [506.0, 174.9032258064516], [507.0, 172.9], [539.0, 191.1578947368421], [529.0, 155.91379310344823], [515.0, 173.6], [514.0, 188.66666666666666], [512.0, 204.0], [513.0, 189.0], [527.0, 190.66666666666669], [517.0, 205.0], [518.0, 189.0], [516.0, 186.5], [526.0, 184.2], [525.0, 186.5], [524.0, 174.0], [523.0, 203.0], [522.0, 198.0], [521.0, 201.25], [520.0, 199.66666666666666], [519.0, 182.14285714285714], [530.0, 154.35483870967738], [528.0, 192.78571428571428], [542.0, 194.5454545454546], [543.0, 201.86956521739128], [540.0, 195.69565217391303], [541.0, 198.32258064516122], [531.0, 209.88888888888886], [533.0, 205.05263157894734], [532.0, 201.93333333333334], [534.0, 206.58333333333331], [535.0, 208.8695652173913], [536.0, 200.20000000000002], [538.0, 188.09090909090904], [537.0, 190.31818181818184], [546.0, 187.71428571428572], [545.0, 192.27272727272728], [544.0, 193.22222222222223], [547.0, 191.29166666666666], [548.0, 192.69230769230768], [549.0, 202.16666666666666], [554.0, 190.50000000000003], [553.0, 196.86046511627907], [552.0, 155.375], [558.0, 186.625], [557.0, 185.41176470588235], [556.0, 201.1176470588235], [555.0, 183.4], [559.0, 192.23076923076925], [560.0, 190.41666666666669], [574.0, 214.14285714285717], [575.0, 229.77777777777774], [572.0, 224.62499999999997], [573.0, 216.6], [570.0, 209.79999999999998], [569.0, 207.92592592592595], [568.0, 215.06976744186045], [551.0, 189.77777777777777], [550.0, 202.36363636363637], [571.0, 208.05128205128207], [561.0, 195.21428571428572], [563.0, 185.49999999999997], [562.0, 200.85714285714286], [564.0, 199.20000000000005], [567.0, 220.99999999999997], [566.0, 207.12820512820514], [565.0, 198.03030303030303], [602.0, 206.02739726027397], [587.0, 207.59027777777777], [584.0, 212.88541666666663], [585.0, 209.956043956044], [586.0, 200.34104046242774], [588.0, 202.5769230769231], [589.0, 197.26153846153844], [590.0, 208.67213114754094], [592.0, 205.53968253968256], [591.0, 209.59459459459464], [577.0, 213.3382352941176], [576.0, 223.8], [579.0, 212.02105263157895], [578.0, 220.39999999999995], [581.0, 197.31818181818184], [580.0, 204.2025316455697], [583.0, 194.46236559139786], [582.0, 191.30263157894737], [601.0, 204.4712643678161], [600.0, 214.37804878048783], [603.0, 204.5384615384615], [604.0, 209.7682926829269], [605.0, 211.12676056338026], [606.0, 200.5384615384615], [607.0, 216.00000000000006], [595.0, 207.9358974358975], [594.0, 203.62666666666664], [593.0, 208.08333333333334], [596.0, 208.14529914529913], [597.0, 213.13750000000005], [599.0, 220.6279069767442], [598.0, 207.2608695652174], [613.0, 217.30666666666673], [608.0, 205.6875], [609.0, 198.1346153846154], [612.0, 210.21666666666664], [611.0, 202.82191780821918], [610.0, 200.1625], [616.0, 209.31578947368422], [618.0, 200.86000000000004], [617.0, 208.2432432432432], [620.0, 198.27499999999998], [619.0, 203.03389830508468], [622.0, 198.96774193548384], [621.0, 206.95348837209306], [623.0, 200.08888888888893], [633.0, 212.04210526315788], [632.0, 210.60606060606045], [615.0, 210.44117647058826], [614.0, 201.1875], [634.0, 209.6774193548387], [639.0, 220.21052631578948], [625.0, 211.04494382022477], [624.0, 203.5818181818182], [627.0, 213.82608695652178], [626.0, 218.19354838709677], [629.0, 218.71698113207555], [628.0, 220.49999999999994], [631.0, 209.625], [630.0, 214.83333333333331], [638.0, 215.49999999999997], [637.0, 212.68888888888893], [635.0, 202.86206896551724], [636.0, 211.03225806451616], [664.0, 229.27631578947373], [658.0, 210.88524590163937], [650.0, 220.0857142857143], [649.0, 211.780487804878], [648.0, 208.843137254902], [651.0, 224.8965517241379], [655.0, 215.16470588235296], [641.0, 202.4210526315789], [640.0, 202.85714285714286], [643.0, 210.23076923076923], [642.0, 199.06382978723403], [645.0, 210.93220338983053], [644.0, 218.52083333333331], [647.0, 222.55555555555557], [646.0, 213.37254901960776], [654.0, 214.40540540540545], [653.0, 215.85714285714283], [652.0, 209.84745762711867], [659.0, 225.48387096774195], [660.0, 243.4102564102564], [661.0, 226.09210526315786], [662.0, 225.22535211267615], [663.0, 230.40909090909088], [667.0, 254.6144578313253], [666.0, 238.81081081081084], [665.0, 237.89423076923077], [669.0, 230.2142857142857], [668.0, 233.07575757575756], [671.0, 251.09090909090918], [657.0, 209.34065934065933], [656.0, 215.97647058823537], [670.0, 220.03636363636366], [699.0, 282.49382716049377], [673.0, 230.13114754098365], [674.0, 243.7247706422019], [672.0, 230.8918918918919], [680.0, 258.3108108108108], [681.0, 252.58558558558553], [679.0, 270.7258064516128], [696.0, 274.92307692307696], [698.0, 268.27272727272725], [697.0, 295.12499999999994], [702.0, 258.175], [701.0, 288.8947368421052], [700.0, 284.03333333333336], [703.0, 276.7424242424242], [688.0, 273.84172661870514], [690.0, 315.28749999999997], [689.0, 308.3333333333334], [693.0, 258.48571428571427], [692.0, 265.5454545454546], [691.0, 266.8867924528302], [695.0, 267.35135135135135], [694.0, 262.02083333333326], [678.0, 250.38028169014086], [677.0, 236.02857142857138], [676.0, 239.43023255813952], [675.0, 244.06849315068487], [682.0, 248.34615384615378], [683.0, 259.3333333333335], [684.0, 272.20869565217396], [686.0, 264.1], [685.0, 272.90277777777777], [687.0, 263.4935064935065], [710.0, 226.09677419354836], [716.0, 241.49484536082474], [715.0, 235.4761904761905], [714.0, 230.046511627907], [713.0, 240.87499999999997], [712.0, 218.10256410256406], [717.0, 250.531914893617], [718.0, 244.53947368421046], [719.0, 230.6808510638298], [705.0, 261.51136363636357], [704.0, 273.2828947368422], [707.0, 257.37931034482756], [706.0, 250.3037974683544], [709.0, 243.85057471264375], [708.0, 248.04444444444448], [720.0, 230.18181818181822], [721.0, 231.53125000000003], [732.0, 211.44444444444443], [731.0, 245.64285714285717], [730.0, 250.77586206896552], [734.0, 255.90322580645164], [733.0, 249.1176470588235], [735.0, 235.64705882352945], [722.0, 256.77586206896547], [724.0, 222.00000000000006], [723.0, 239.28070175438594], [727.0, 235.22222222222226], [726.0, 229.38235294117646], [725.0, 227.32835820895525], [728.0, 248.0263157894737], [711.0, 233.94915254237293], [729.0, 238.41379310344826], [739.0, 241.3269230769231], [737.0, 226.90140845070417], [736.0, 233.20689655172413], [751.0, 253.98181818181814], [750.0, 246.9411764705882], [749.0, 248.3157894736842], [748.0, 256.6219512195122], [747.0, 252.0491803278688], [746.0, 255.29999999999998], [738.0, 223.65217391304347], [744.0, 246.49999999999997], [745.0, 249.9636363636364], [743.0, 221.0851063829787], [760.0, 254.18749999999997], [761.0, 245.41025641025638], [762.0, 236.6551724137931], [764.0, 242.67213114754105], [763.0, 244.65714285714284], [765.0, 249.5728155339806], [766.0, 251.39506172839506], [767.0, 246.1153846153847], [752.0, 270.73267326732673], [753.0, 245.35087719298244], [754.0, 262.48837209302326], [757.0, 250.28205128205124], [756.0, 243.97297297297294], [755.0, 250.07812499999997], [759.0, 244.34090909090904], [758.0, 250.74666666666667], [742.0, 248.54054054054046], [741.0, 215.62121212121218], [740.0, 237.93333333333334], [795.0, 234.23529411764707], [786.0, 243.695652173913], [771.0, 242.11764705882348], [782.0, 231.07407407407405], [781.0, 238.36], [780.0, 239.84615384615378], [779.0, 240.71428571428564], [778.0, 245.10000000000002], [777.0, 251.6969696969697], [776.0, 252.7142857142857], [783.0, 255.72727272727272], [768.0, 246.30952380952377], [770.0, 239.2051282051282], [769.0, 248.3684210526316], [784.0, 243.28000000000003], [785.0, 236.29166666666666], [798.0, 264.8611111111111], [799.0, 265.4918032786886], [787.0, 236.57142857142858], [788.0, 243.76923076923072], [789.0, 247.34782608695653], [791.0, 238.35897435897434], [790.0, 242.05555555555554], [794.0, 237.3714285714286], [793.0, 226.52941176470588], [792.0, 221.51162790697674], [775.0, 249.11538461538464], [772.0, 239.1025641025641], [774.0, 239.39473684210526], [773.0, 235.9444444444444], [796.0, 254.8421052631579], [797.0, 236.93103448275863], [806.0, 271.34285714285716], [801.0, 274.4528301886792], [800.0, 266.2162162162163], [811.0, 252.07142857142858], [812.0, 262.7272727272727], [814.0, 241.3571428571428], [813.0, 245.047619047619], [815.0, 252.27777777777777], [802.0, 244.26666666666662], [803.0, 239.0], [804.0, 250.3888888888889], [805.0, 252.34883720930236], [807.0, 252.61538461538456], [824.0, 274.4897959183673], [825.0, 311.5217391304348], [826.0, 267.8974358974359], [827.0, 274.60869565217394], [828.0, 263.9130434782608], [829.0, 270.42857142857156], [831.0, 253.62500000000006], [816.0, 266.0652173913044], [818.0, 270.6086956521739], [817.0, 277.6078431372549], [830.0, 257.56097560975616], [819.0, 270.3421052631579], [820.0, 256.75000000000006], [821.0, 262.56000000000006], [822.0, 266.29166666666674], [823.0, 254.17073170731717], [809.0, 249.37037037037038], [808.0, 246.57692307692307], [810.0, 270.4444444444444], [860.0, 260.16666666666663], [847.0, 270.81818181818187], [844.0, 271.0833333333333], [843.0, 280.6923076923077], [842.0, 300.1], [841.0, 287.5333333333333], [840.0, 285.14814814814815], [845.0, 295.79999999999995], [846.0, 267.80000000000007], [848.0, 263.81818181818176], [863.0, 264.3333333333333], [862.0, 262.3333333333333], [861.0, 246.5609756097561], [859.0, 250.9], [858.0, 279.62162162162156], [857.0, 243.55172413793107], [856.0, 253.92592592592595], [839.0, 276.6363636363637], [838.0, 261.96296296296293], [837.0, 274.1521739130435], [836.0, 291.48], [835.0, 283.8181818181818], [834.0, 284.0454545454546], [833.0, 271.2173913043478], [832.0, 269.72727272727275], [849.0, 275.6060606060606], [850.0, 290.9047619047619], [851.0, 298.2857142857143], [852.0, 286.6206896551724], [853.0, 274.81578947368416], [855.0, 259.48], [854.0, 278.047619047619], [868.0, 274.92857142857144], [881.0, 270.74509803921575], [864.0, 272.85416666666663], [874.0, 313.6666666666667], [873.0, 281.25], [872.0, 264.7272727272727], [875.0, 310.61538461538464], [877.0, 278.2105263157894], [876.0, 261.00000000000006], [879.0, 267.3636363636364], [878.0, 266.99999999999994], [880.0, 286.39473684210526], [891.0, 300.55], [890.0, 265.75], [889.0, 287.25], [888.0, 283.8571428571429], [893.0, 302.0], [894.0, 290.8], [892.0, 282.75], [895.0, 296.1578947368421], [871.0, 277.4166666666667], [870.0, 271.68421052631584], [869.0, 297.42857142857144], [867.0, 280.29411764705895], [866.0, 285.89130434782606], [865.0, 253.25806451612902], [882.0, 287.74074074074065], [883.0, 294.00000000000006], [884.0, 262.3714285714285], [885.0, 286.7272727272728], [886.0, 275.4857142857143], [887.0, 276.8571428571429], [924.0, 322.8888888888889], [901.0, 275.41860465116275], [899.0, 275.91999999999985], [898.0, 289.7777777777778], [897.0, 297.5357142857142], [896.0, 286.50000000000006], [911.0, 257.40909090909093], [910.0, 270.2068965517242], [909.0, 284.43750000000006], [900.0, 282.1842105263158], [902.0, 280.3617021276595], [903.0, 287.1860465116279], [904.0, 293.09302325581393], [905.0, 271.86956521739125], [907.0, 278.55555555555554], [906.0, 262.55555555555554], [908.0, 286.59999999999997], [919.0, 346.42105263157896], [927.0, 326.8148148148147], [913.0, 276.8181818181818], [912.0, 279.6521739130435], [915.0, 286.65000000000003], [914.0, 295.7692307692308], [917.0, 297.0], [916.0, 285.5], [918.0, 305.71428571428567], [925.0, 309.16666666666674], [926.0, 315.84999999999997], [920.0, 318.0], [921.0, 340.2], [923.0, 288.75], [922.0, 340.44444444444446], [934.0, 328.95], [929.0, 350.56249999999994], [928.0, 349.02941176470586], [943.0, 373.5882352941177], [942.0, 383.21212121212113], [940.0, 356.09090909090907], [941.0, 354.344827586207], [938.0, 317.8636363636363], [939.0, 318.4651162790697], [931.0, 340.00000000000006], [930.0, 355.5652173913043], [932.0, 365.5882352941176], [933.0, 349.47368421052636], [935.0, 296.2978723404256], [952.0, 347.71052631578954], [954.0, 337.10606060606057], [953.0, 371.7857142857143], [956.0, 369.64705882352956], [958.0, 367.8039215686274], [957.0, 386.2702702702702], [949.0, 348.734375], [948.0, 343.7088607594935], [947.0, 356.2399999999999], [946.0, 361.14285714285705], [945.0, 373.6829268292682], [944.0, 359.7435897435897], [959.0, 377.4827586206896], [951.0, 367.66666666666663], [950.0, 351.76666666666665], [955.0, 361.14864864864865], [936.0, 315.52000000000004], [937.0, 308.8260869565218], [986.0, 319.35135135135124], [990.0, 321.65], [976.0, 376.40816326530614], [982.0, 314.4358974358974], [981.0, 325.29999999999995], [980.0, 359.5], [979.0, 324.84615384615387], [978.0, 299.4594594594595], [977.0, 344.0980392156863], [983.0, 328.26666666666665], [991.0, 314.65384615384625], [989.0, 313.77142857142854], [988.0, 310.576923076923], [987.0, 321.12500000000006], [985.0, 320.8846153846153], [984.0, 322.4], [975.0, 359.20000000000005], [961.0, 346.75], [960.0, 378.41666666666663], [963.0, 327.0555555555555], [962.0, 342.2727272727273], [965.0, 343.2142857142857], [964.0, 366.625], [967.0, 370.1], [966.0, 381.11764705882354], [974.0, 360.9428571428571], [973.0, 387.09090909090907], [972.0, 393.32], [971.0, 399.0], [970.0, 356.92857142857144], [969.0, 374.55555555555554], [968.0, 370.3571428571429], [996.0, 309.3666666666667], [993.0, 322.1034482758621], [992.0, 368.2105263157895], [1007.0, 392.6], [1004.0, 394.0], [1005.0, 422.0], [1006.0, 375.25], [1002.0, 382.6], [1003.0, 392.7142857142857], [998.0, 320.1111111111111], [997.0, 315.1875], [999.0, 288.0555555555555], [1016.0, 436.0], [1018.0, 399.0], [1017.0, 407.0], [1020.0, 415.0], [1019.0, 409.5], [1021.0, 370.0], [1023.0, 401.0], [1022.0, 390.0], [1008.0, 401.25], [1009.0, 388.3333333333333], [1010.0, 383.6], [1015.0, 419.5], [1014.0, 419.0], [1013.0, 426.0], [1012.0, 433.0], [1011.0, 427.375], [1000.0, 318.6666666666667], [1001.0, 365.0], [995.0, 343.77777777777777], [994.0, 393.8], [1036.0, 385.5], [1048.0, 368.25], [1030.0, 378.0], [1028.0, 390.75], [1026.0, 408.4], [1024.0, 417.2], [1032.0, 413.0], [1034.0, 392.0], [1054.0, 399.0], [1050.0, 382.66666666666663], [1052.0, 371.75], [1046.0, 346.4], [1038.0, 369.0], [1056.0, 364.0], [1086.0, 377.7272727272727], [1084.0, 344.9375], [1080.0, 358.16000000000014], [1082.0, 363.3333333333333], [1078.0, 355.49999999999994], [1074.0, 366.56666666666666], [1072.0, 385.66666666666663], [1076.0, 352.3684210526316], [1058.0, 361.66666666666663], [1060.0, 391.45454545454544], [1062.0, 359.75], [1064.0, 373.7142857142857], [1066.0, 372.4], [1068.0, 396.3333333333333], [1070.0, 372.75000000000006], [1040.0, 376.0], [1042.0, 351.0909090909091], [1044.0, 371.77777777777777], [1092.0, 364.7647058823529], [1100.0, 372.74999999999994], [1088.0, 368.33333333333326], [1118.0, 379.46153846153845], [1116.0, 354.5], [1114.0, 354.20000000000005], [1112.0, 342.3333333333333], [1106.0, 372.5714285714286], [1104.0, 358.44444444444446], [1108.0, 362.2], [1110.0, 360.8620689655173], [1090.0, 374.6666666666667], [1094.0, 386.1052631578947], [1096.0, 364.3], [1098.0, 392.03125000000006], [1102.0, 372.7058823529411], [1136.0, 385.0], [1140.0, 379.7619047619048], [1142.0, 355.93877551020415], [1144.0, 369.84482758620686], [1148.0, 368.2307692307692], [1150.0, 388.97058823529414], [1120.0, 389.2], [1146.0, 376.33928571428567], [1138.0, 391.0], [1122.0, 362.5], [1124.0, 354.77777777777777], [1126.0, 359.41666666666663], [1128.0, 384.0], [1130.0, 361.5], [1134.0, 398.7142857142857], [1132.0, 388.85714285714283], [1180.0, 382.3333333333333], [1152.0, 386.2], [1178.0, 376.25], [1176.0, 389.25], [1174.0, 374.0], [1172.0, 385.6], [1156.0, 400.9500000000001], [1158.0, 401.7142857142858], [1160.0, 385.82352941176475], [1154.0, 319.6], [1166.0, 453.0], [1168.0, 402.6666666666667], [1170.0, 381.625], [1035.0, 502.5], [1037.0, 357.7142857142857], [1043.0, 372.304347826087], [1031.0, 359.0], [1029.0, 379.7142857142857], [1027.0, 398.5], [1025.0, 402.6666666666667], [1033.0, 400.4], [1055.0, 338.0], [1049.0, 393.6666666666667], [1051.0, 390.0], [1053.0, 363.6666666666667], [1047.0, 391.0], [1039.0, 388.22222222222223], [1087.0, 374.1515151515152], [1085.0, 367.24999999999994], [1081.0, 359.11764705882354], [1083.0, 354.78260869565213], [1079.0, 359.21276595744683], [1075.0, 353.5909090909091], [1073.0, 370.1818181818182], [1077.0, 360.6875000000001], [1057.0, 353.75], [1059.0, 376.0], [1061.0, 378.8], [1063.0, 369.0], [1065.0, 365.375], [1067.0, 366.9545454545455], [1069.0, 383.53333333333336], [1071.0, 362.57142857142856], [1041.0, 357.0], [1045.0, 376.9285714285714], [1091.0, 386.49999999999994], [1119.0, 358.6666666666667], [1117.0, 381.0], [1115.0, 353.7142857142857], [1113.0, 345.15384615384625], [1111.0, 363.7857142857143], [1105.0, 381.69230769230774], [1107.0, 355.95652173913044], [1109.0, 377.27272727272725], [1089.0, 375.2777777777778], [1093.0, 374.375], [1095.0, 386.3636363636363], [1097.0, 370.1818181818182], [1099.0, 384.0], [1101.0, 356.57142857142856], [1103.0, 366.88235294117646], [1137.0, 382.9375], [1141.0, 379.391304347826], [1143.0, 371.0731707317073], [1145.0, 370.27173913043475], [1147.0, 386.96153846153845], [1149.0, 378.77777777777794], [1151.0, 406.9230769230769], [1121.0, 386.0], [1139.0, 377.3333333333333], [1123.0, 364.22222222222223], [1125.0, 371.7857142857142], [1127.0, 373.6666666666667], [1129.0, 358.5], [1131.0, 380.6], [1133.0, 405.6666666666667], [1135.0, 375.33333333333337], [1179.0, 378.3333333333333], [1153.0, 382.2307692307692], [1177.0, 376.0], [1175.0, 373.0], [1173.0, 397.33333333333337], [1155.0, 408.0], [1157.0, 397.5], [1159.0, 382.6923076923077], [1167.0, 393.0], [1169.0, 295.6666666666667], [1171.0, 392.6666666666667], [1.0, 17.666666666666668]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[589.2181874999939, 203.63796875000114]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1180.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 202242.0, "minX": 1.734158397E12, "maxY": 1613867.0, "series": [{"data": [[1.734158397E12, 202242.0], [1.734158398E12, 338106.0], [1.734158399E12, 583860.0], [1.7341584E12, 500322.0], [1.734158406E12, 650045.0], [1.734158407E12, 728614.0], [1.734158408E12, 655104.0], [1.734158409E12, 292152.0], [1.734158401E12, 612054.0], [1.734158402E12, 661811.0], [1.734158403E12, 658925.0], [1.734158404E12, 633144.0], [1.734158405E12, 589883.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.734158397E12, 448144.0], [1.734158398E12, 749207.0], [1.734158399E12, 1293549.0], [1.7341584E12, 1105945.0], [1.734158406E12, 1440053.0], [1.734158407E12, 1613867.0], [1.734158408E12, 1449568.0], [1.734158409E12, 647253.0], [1.734158401E12, 1356038.0], [1.734158402E12, 1466054.0], [1.734158403E12, 1459930.0], [1.734158404E12, 1402923.0], [1.734158405E12, 1306843.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.734158409E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4.424819435325022, "minX": 1.734158397E12, "maxY": 362.3102985575304, "series": [{"data": [[1.734158397E12, 7.399560922063674], [1.734158398E12, 4.424819435325022], [1.734158399E12, 7.310266159695815], [1.7341584E12, 129.30057803468208], [1.734158406E12, 219.17896174863364], [1.734158407E12, 236.28741237427576], [1.734158408E12, 272.5649813369533], [1.734158409E12, 189.90045592705167], [1.734158401E12, 332.3830250272038], [1.734158402E12, 362.3102985575304], [1.734158403E12, 190.7398921832876], [1.734158404E12, 175.58415147265077], [1.734158405E12, 248.18592397440753]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.734158409E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4.391989494418916, "minX": 1.734158397E12, "maxY": 362.2113384770218, "series": [{"data": [[1.734158397E12, 6.549945115257963], [1.734158398E12, 4.391989494418916], [1.734158399E12, 7.292015209125458], [1.7341584E12, 129.229879946643], [1.734158406E12, 218.8374316939889], [1.734158407E12, 236.03779335568387], [1.734158408E12, 272.38920936545554], [1.734158409E12, 189.62613981762937], [1.734158401E12, 332.25970257526257], [1.734158402E12, 362.2113384770218], [1.734158403E12, 190.41812668463623], [1.734158404E12, 175.37447405329584], [1.734158405E12, 247.9958599924729]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.734158409E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.734158397E12, "maxY": 10.537071885585236, "series": [{"data": [[1.734158397E12, 1.3194291986827666], [1.734158398E12, 0.34471437951411676], [1.734158399E12, 0.24676806083650157], [1.7341584E12, 0.5246776345042238], [1.734158406E12, 0.21311475409836114], [1.734158407E12, 0.1798232246266378], [1.734158408E12, 0.18527315914489292], [1.734158409E12, 0.0], [1.734158401E12, 0.24301777294160312], [1.734158402E12, 0.18416638711841665], [1.734158403E12, 0.15599730458221056], [1.734158404E12, 0.19249649368863936], [1.734158405E12, 10.537071885585236]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.734158409E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.734158397E12, "maxY": 1354.0, "series": [{"data": [[1.734158397E12, 76.0], [1.734158398E12, 36.0], [1.734158399E12, 77.0], [1.7341584E12, 371.0], [1.734158406E12, 302.0], [1.734158407E12, 367.0], [1.734158408E12, 406.0], [1.734158409E12, 301.0], [1.734158401E12, 564.0], [1.734158402E12, 599.0], [1.734158403E12, 327.0], [1.734158404E12, 294.0], [1.734158405E12, 1354.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.734158397E12, 12.0], [1.734158398E12, 6.600000000000136], [1.734158399E12, 13.0], [1.7341584E12, 236.0], [1.734158406E12, 255.0], [1.734158407E12, 279.0], [1.734158408E12, 312.0], [1.734158409E12, 225.0], [1.734158401E12, 392.0], [1.734158402E12, 413.9000000000001], [1.734158403E12, 258.0], [1.734158404E12, 232.0], [1.734158405E12, 287.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.734158397E12, 61.879999999999995], [1.734158398E12, 13.759999999999991], [1.734158399E12, 23.690000000000055], [1.7341584E12, 320.8600000000001], [1.734158406E12, 285.0], [1.734158407E12, 311.25999999999976], [1.734158408E12, 340.82000000000016], [1.734158409E12, 252.0], [1.734158401E12, 431.4200000000001], [1.734158402E12, 439.0], [1.734158403E12, 300.0], [1.734158404E12, 258.4699999999998], [1.734158405E12, 1242.4399999999987]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.734158397E12, 37.39999999999998], [1.734158398E12, 8.0], [1.734158399E12, 16.0], [1.7341584E12, 269.0], [1.734158406E12, 264.0], [1.734158407E12, 289.0], [1.734158408E12, 322.0], [1.734158409E12, 236.0], [1.734158401E12, 404.0], [1.734158402E12, 423.0], [1.734158403E12, 268.0], [1.734158404E12, 241.0], [1.734158405E12, 298.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.734158397E12, 2.0], [1.734158398E12, 2.0], [1.734158399E12, 2.0], [1.7341584E12, 5.0], [1.734158406E12, 5.0], [1.734158407E12, 4.0], [1.734158408E12, 13.0], [1.734158409E12, 7.0], [1.734158401E12, 9.0], [1.734158402E12, 4.0], [1.734158403E12, 5.0], [1.734158404E12, 8.0], [1.734158405E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.734158397E12, 4.0], [1.734158398E12, 4.0], [1.734158399E12, 6.0], [1.7341584E12, 130.0], [1.734158406E12, 222.0], [1.734158407E12, 237.0], [1.734158408E12, 273.0], [1.734158409E12, 196.0], [1.734158401E12, 340.0], [1.734158402E12, 372.0], [1.734158403E12, 192.0], [1.734158404E12, 187.0], [1.734158405E12, 239.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.734158409E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 911.0, "maxY": 400.0, "series": [{"data": [[2249.0, 130.0], [2630.0, 6.0], [2657.0, 239.0], [2757.0, 340.0], [2852.0, 187.0], [2928.0, 222.0], [2981.0, 372.0], [2968.0, 192.0], [2947.0, 273.0], [3281.0, 237.0], [911.0, 4.0], [1316.0, 196.0], [1523.0, 4.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2249.0, 138.0], [2657.0, 257.0], [2928.0, 192.0], [2981.0, 400.0], [2968.0, 242.0], [2947.0, 294.0], [3281.0, 241.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3281.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 911.0, "maxY": 400.0, "series": [{"data": [[2249.0, 130.0], [2630.0, 6.0], [2657.0, 238.5], [2757.0, 340.0], [2852.0, 187.0], [2928.0, 222.0], [2981.0, 372.0], [2968.0, 192.0], [2947.0, 272.0], [3281.0, 237.0], [911.0, 4.0], [1316.0, 195.5], [1523.0, 4.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2249.0, 138.0], [2657.0, 257.0], [2928.0, 192.0], [2981.0, 400.0], [2968.0, 242.0], [2947.0, 294.0], [3281.0, 241.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3281.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 653.0, "minX": 1.734158397E12, "maxY": 3342.0, "series": [{"data": [[1.734158397E12, 917.0], [1.734158398E12, 1529.0], [1.734158399E12, 2677.0], [1.7341584E12, 3071.0], [1.734158406E12, 2874.0], [1.734158407E12, 3342.0], [1.734158408E12, 2845.0], [1.734158409E12, 653.0], [1.734158401E12, 3048.0], [1.734158402E12, 2495.0], [1.734158403E12, 2594.0], [1.734158404E12, 3139.0], [1.734158405E12, 2816.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.734158409E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.734158397E12, "maxY": 3273.0, "series": [{"data": [[1.734158397E12, 911.0], [1.734158398E12, 1523.0], [1.734158399E12, 2630.0], [1.7341584E12, 2213.0], [1.734158406E12, 2927.0], [1.734158407E12, 3273.0], [1.734158408E12, 2917.0], [1.734158409E12, 1316.0], [1.734158401E12, 2757.0], [1.734158402E12, 2980.0], [1.734158403E12, 2967.0], [1.734158404E12, 2852.0], [1.734158405E12, 2656.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.734158406E12, 1.0], [1.734158407E12, 8.0], [1.734158408E12, 30.0], [1.7341584E12, 36.0], [1.734158402E12, 1.0], [1.734158403E12, 1.0], [1.734158405E12, 1.0]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.734158409E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.734158397E12, "maxY": 3273.0, "series": [{"data": [[1.734158397E12, 911.0], [1.734158398E12, 1523.0], [1.734158399E12, 2630.0], [1.7341584E12, 2213.0], [1.734158406E12, 2927.0], [1.734158407E12, 3273.0], [1.734158408E12, 2917.0], [1.734158409E12, 1316.0], [1.734158401E12, 2757.0], [1.734158402E12, 2980.0], [1.734158403E12, 2967.0], [1.734158404E12, 2852.0], [1.734158405E12, 2656.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.734158406E12, 1.0], [1.734158407E12, 8.0], [1.734158408E12, 30.0], [1.7341584E12, 36.0], [1.734158402E12, 1.0], [1.734158403E12, 1.0], [1.734158405E12, 1.0]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.734158409E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.734158397E12, "maxY": 3273.0, "series": [{"data": [[1.734158397E12, 911.0], [1.734158398E12, 1523.0], [1.734158399E12, 2630.0], [1.7341584E12, 2213.0], [1.734158406E12, 2927.0], [1.734158407E12, 3273.0], [1.734158408E12, 2917.0], [1.734158409E12, 1316.0], [1.734158401E12, 2757.0], [1.734158402E12, 2980.0], [1.734158403E12, 2967.0], [1.734158404E12, 2852.0], [1.734158405E12, 2656.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.734158406E12, 1.0], [1.734158407E12, 8.0], [1.734158408E12, 30.0], [1.7341584E12, 36.0], [1.734158402E12, 1.0], [1.734158403E12, 1.0], [1.734158405E12, 1.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.734158409E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

