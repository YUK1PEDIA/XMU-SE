/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 6143.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 4.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 4.0], [1.4, 4.0], [1.5, 4.0], [1.6, 4.0], [1.7, 4.0], [1.8, 4.0], [1.9, 4.0], [2.0, 4.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 4.0], [2.8, 4.0], [2.9, 4.0], [3.0, 4.0], [3.1, 4.0], [3.2, 4.0], [3.3, 4.0], [3.4, 4.0], [3.5, 4.0], [3.6, 4.0], [3.7, 4.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 4.0], [4.9, 4.0], [5.0, 4.0], [5.1, 4.0], [5.2, 4.0], [5.3, 4.0], [5.4, 5.0], [5.5, 5.0], [5.6, 5.0], [5.7, 5.0], [5.8, 5.0], [5.9, 5.0], [6.0, 5.0], [6.1, 5.0], [6.2, 5.0], [6.3, 5.0], [6.4, 5.0], [6.5, 5.0], [6.6, 5.0], [6.7, 5.0], [6.8, 5.0], [6.9, 5.0], [7.0, 5.0], [7.1, 5.0], [7.2, 5.0], [7.3, 5.0], [7.4, 5.0], [7.5, 5.0], [7.6, 5.0], [7.7, 5.0], [7.8, 5.0], [7.9, 5.0], [8.0, 5.0], [8.1, 5.0], [8.2, 5.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 9.0], [11.8, 9.0], [11.9, 9.0], [12.0, 9.0], [12.1, 10.0], [12.2, 10.0], [12.3, 10.0], [12.4, 10.0], [12.5, 11.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 12.0], [13.3, 12.0], [13.4, 12.0], [13.5, 12.0], [13.6, 12.0], [13.7, 12.0], [13.8, 13.0], [13.9, 13.0], [14.0, 13.0], [14.1, 13.0], [14.2, 13.0], [14.3, 13.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 15.0], [14.9, 15.0], [15.0, 16.0], [15.1, 16.0], [15.2, 17.0], [15.3, 17.0], [15.4, 17.0], [15.5, 18.0], [15.6, 18.0], [15.7, 18.0], [15.8, 19.0], [15.9, 21.0], [16.0, 22.0], [16.1, 23.0], [16.2, 25.0], [16.3, 26.0], [16.4, 27.0], [16.5, 27.0], [16.6, 28.0], [16.7, 29.0], [16.8, 29.0], [16.9, 29.0], [17.0, 31.0], [17.1, 32.0], [17.2, 32.0], [17.3, 33.0], [17.4, 34.0], [17.5, 35.0], [17.6, 36.0], [17.7, 37.0], [17.8, 38.0], [17.9, 39.0], [18.0, 40.0], [18.1, 41.0], [18.2, 43.0], [18.3, 45.0], [18.4, 49.0], [18.5, 49.0], [18.6, 55.0], [18.7, 57.0], [18.8, 61.0], [18.9, 67.0], [19.0, 69.0], [19.1, 70.0], [19.2, 70.0], [19.3, 71.0], [19.4, 72.0], [19.5, 73.0], [19.6, 74.0], [19.7, 75.0], [19.8, 77.0], [19.9, 78.0], [20.0, 81.0], [20.1, 83.0], [20.2, 85.0], [20.3, 87.0], [20.4, 89.0], [20.5, 92.0], [20.6, 93.0], [20.7, 97.0], [20.8, 100.0], [20.9, 102.0], [21.0, 104.0], [21.1, 107.0], [21.2, 108.0], [21.3, 108.0], [21.4, 110.0], [21.5, 112.0], [21.6, 114.0], [21.7, 115.0], [21.8, 116.0], [21.9, 119.0], [22.0, 119.0], [22.1, 121.0], [22.2, 122.0], [22.3, 126.0], [22.4, 259.0], [22.5, 264.0], [22.6, 266.0], [22.7, 267.0], [22.8, 269.0], [22.9, 270.0], [23.0, 271.0], [23.1, 274.0], [23.2, 276.0], [23.3, 277.0], [23.4, 279.0], [23.5, 282.0], [23.6, 283.0], [23.7, 284.0], [23.8, 285.0], [23.9, 286.0], [24.0, 288.0], [24.1, 291.0], [24.2, 294.0], [24.3, 297.0], [24.4, 298.0], [24.5, 299.0], [24.6, 302.0], [24.7, 303.0], [24.8, 304.0], [24.9, 305.0], [25.0, 307.0], [25.1, 308.0], [25.2, 308.0], [25.3, 309.0], [25.4, 310.0], [25.5, 311.0], [25.6, 312.0], [25.7, 313.0], [25.8, 314.0], [25.9, 316.0], [26.0, 317.0], [26.1, 318.0], [26.2, 320.0], [26.3, 323.0], [26.4, 323.0], [26.5, 324.0], [26.6, 326.0], [26.7, 328.0], [26.8, 329.0], [26.9, 331.0], [27.0, 332.0], [27.1, 333.0], [27.2, 334.0], [27.3, 335.0], [27.4, 336.0], [27.5, 337.0], [27.6, 338.0], [27.7, 340.0], [27.8, 341.0], [27.9, 343.0], [28.0, 345.0], [28.1, 347.0], [28.2, 350.0], [28.3, 356.0], [28.4, 361.0], [28.5, 367.0], [28.6, 371.0], [28.7, 382.0], [28.8, 386.0], [28.9, 388.0], [29.0, 471.0], [29.1, 483.0], [29.2, 489.0], [29.3, 502.0], [29.4, 516.0], [29.5, 524.0], [29.6, 530.0], [29.7, 537.0], [29.8, 542.0], [29.9, 546.0], [30.0, 556.0], [30.1, 568.0], [30.2, 585.0], [30.3, 589.0], [30.4, 594.0], [30.5, 599.0], [30.6, 605.0], [30.7, 612.0], [30.8, 622.0], [30.9, 629.0], [31.0, 638.0], [31.1, 646.0], [31.2, 650.0], [31.3, 653.0], [31.4, 653.0], [31.5, 656.0], [31.6, 658.0], [31.7, 659.0], [31.8, 662.0], [31.9, 668.0], [32.0, 671.0], [32.1, 675.0], [32.2, 677.0], [32.3, 678.0], [32.4, 680.0], [32.5, 682.0], [32.6, 685.0], [32.7, 689.0], [32.8, 693.0], [32.9, 696.0], [33.0, 699.0], [33.1, 705.0], [33.2, 709.0], [33.3, 716.0], [33.4, 721.0], [33.5, 723.0], [33.6, 731.0], [33.7, 741.0], [33.8, 751.0], [33.9, 755.0], [34.0, 760.0], [34.1, 765.0], [34.2, 780.0], [34.3, 782.0], [34.4, 796.0], [34.5, 797.0], [34.6, 800.0], [34.7, 802.0], [34.8, 805.0], [34.9, 808.0], [35.0, 809.0], [35.1, 810.0], [35.2, 811.0], [35.3, 814.0], [35.4, 816.0], [35.5, 820.0], [35.6, 823.0], [35.7, 831.0], [35.8, 833.0], [35.9, 835.0], [36.0, 840.0], [36.1, 842.0], [36.2, 851.0], [36.3, 854.0], [36.4, 856.0], [36.5, 857.0], [36.6, 859.0], [36.7, 863.0], [36.8, 867.0], [36.9, 869.0], [37.0, 870.0], [37.1, 871.0], [37.2, 873.0], [37.3, 874.0], [37.4, 875.0], [37.5, 877.0], [37.6, 880.0], [37.7, 881.0], [37.8, 882.0], [37.9, 883.0], [38.0, 884.0], [38.1, 884.0], [38.2, 885.0], [38.3, 886.0], [38.4, 888.0], [38.5, 888.0], [38.6, 889.0], [38.7, 897.0], [38.8, 916.0], [38.9, 1031.0], [39.0, 1033.0], [39.1, 1039.0], [39.2, 1043.0], [39.3, 1047.0], [39.4, 1050.0], [39.5, 1054.0], [39.6, 1058.0], [39.7, 1061.0], [39.8, 1062.0], [39.9, 1068.0], [40.0, 1070.0], [40.1, 1074.0], [40.2, 1077.0], [40.3, 1080.0], [40.4, 1081.0], [40.5, 1085.0], [40.6, 1088.0], [40.7, 1102.0], [40.8, 1104.0], [40.9, 1106.0], [41.0, 1110.0], [41.1, 1111.0], [41.2, 1112.0], [41.3, 1117.0], [41.4, 1122.0], [41.5, 1126.0], [41.6, 1127.0], [41.7, 1129.0], [41.8, 1146.0], [41.9, 1156.0], [42.0, 1160.0], [42.1, 1180.0], [42.2, 1192.0], [42.3, 1195.0], [42.4, 1403.0], [42.5, 1407.0], [42.6, 1411.0], [42.7, 1415.0], [42.8, 1416.0], [42.9, 1418.0], [43.0, 1420.0], [43.1, 1422.0], [43.2, 1423.0], [43.3, 1427.0], [43.4, 1435.0], [43.5, 1442.0], [43.6, 1474.0], [43.7, 1481.0], [43.8, 1486.0], [43.9, 1491.0], [44.0, 1496.0], [44.1, 1514.0], [44.2, 1516.0], [44.3, 1519.0], [44.4, 1525.0], [44.5, 1659.0], [44.6, 1664.0], [44.7, 1668.0], [44.8, 1671.0], [44.9, 1674.0], [45.0, 1676.0], [45.1, 1676.0], [45.2, 1678.0], [45.3, 1678.0], [45.4, 1679.0], [45.5, 1681.0], [45.6, 1685.0], [45.7, 1686.0], [45.8, 1687.0], [45.9, 1688.0], [46.0, 1689.0], [46.1, 1691.0], [46.2, 1694.0], [46.3, 1695.0], [46.4, 1696.0], [46.5, 1697.0], [46.6, 1698.0], [46.7, 1699.0], [46.8, 1701.0], [46.9, 1702.0], [47.0, 1703.0], [47.1, 1705.0], [47.2, 1706.0], [47.3, 1713.0], [47.4, 1717.0], [47.5, 1719.0], [47.6, 1721.0], [47.7, 1725.0], [47.8, 1733.0], [47.9, 1734.0], [48.0, 1742.0], [48.1, 1751.0], [48.2, 1868.0], [48.3, 1877.0], [48.4, 1879.0], [48.5, 1889.0], [48.6, 1899.0], [48.7, 1900.0], [48.8, 1901.0], [48.9, 1902.0], [49.0, 1936.0], [49.1, 1940.0], [49.2, 1947.0], [49.3, 1949.0], [49.4, 1953.0], [49.5, 2011.0], [49.6, 2022.0], [49.7, 2028.0], [49.8, 2030.0], [49.9, 2031.0], [50.0, 2034.0], [50.1, 2038.0], [50.2, 2040.0], [50.3, 2042.0], [50.4, 2043.0], [50.5, 2045.0], [50.6, 2046.0], [50.7, 2050.0], [50.8, 2052.0], [50.9, 2054.0], [51.0, 2057.0], [51.1, 2060.0], [51.2, 2062.0], [51.3, 2064.0], [51.4, 2066.0], [51.5, 2071.0], [51.6, 2074.0], [51.7, 2076.0], [51.8, 2077.0], [51.9, 2078.0], [52.0, 2080.0], [52.1, 2081.0], [52.2, 2083.0], [52.3, 2084.0], [52.4, 2086.0], [52.5, 2088.0], [52.6, 2089.0], [52.7, 2091.0], [52.8, 2092.0], [52.9, 2094.0], [53.0, 2097.0], [53.1, 2098.0], [53.2, 2101.0], [53.3, 2102.0], [53.4, 2105.0], [53.5, 2107.0], [53.6, 2115.0], [53.7, 2120.0], [53.8, 2126.0], [53.9, 2128.0], [54.0, 2131.0], [54.1, 2144.0], [54.2, 2150.0], [54.3, 2229.0], [54.4, 2233.0], [54.5, 2236.0], [54.6, 2243.0], [54.7, 2251.0], [54.8, 2253.0], [54.9, 2259.0], [55.0, 2264.0], [55.1, 2270.0], [55.2, 2274.0], [55.3, 2276.0], [55.4, 2281.0], [55.5, 2288.0], [55.6, 2294.0], [55.7, 2297.0], [55.8, 2299.0], [55.9, 2301.0], [56.0, 2304.0], [56.1, 2307.0], [56.2, 2311.0], [56.3, 2321.0], [56.4, 2335.0], [56.5, 2347.0], [56.6, 2360.0], [56.7, 2384.0], [56.8, 2386.0], [56.9, 2394.0], [57.0, 2399.0], [57.1, 2409.0], [57.2, 2417.0], [57.3, 2420.0], [57.4, 2424.0], [57.5, 2429.0], [57.6, 2440.0], [57.7, 2454.0], [57.8, 2476.0], [57.9, 2481.0], [58.0, 2510.0], [58.1, 2517.0], [58.2, 2521.0], [58.3, 2539.0], [58.4, 2548.0], [58.5, 2558.0], [58.6, 2564.0], [58.7, 2569.0], [58.8, 2579.0], [58.9, 2585.0], [59.0, 2598.0], [59.1, 2604.0], [59.2, 2608.0], [59.3, 2617.0], [59.4, 2639.0], [59.5, 2650.0], [59.6, 2656.0], [59.7, 2808.0], [59.8, 2814.0], [59.9, 2823.0], [60.0, 2832.0], [60.1, 2842.0], [60.2, 2854.0], [60.3, 2867.0], [60.4, 2872.0], [60.5, 2881.0], [60.6, 2891.0], [60.7, 2903.0], [60.8, 2908.0], [60.9, 2913.0], [61.0, 2917.0], [61.1, 2922.0], [61.2, 2961.0], [61.3, 2966.0], [61.4, 2968.0], [61.5, 2970.0], [61.6, 2973.0], [61.7, 2975.0], [61.8, 2977.0], [61.9, 2979.0], [62.0, 2980.0], [62.1, 2982.0], [62.2, 2983.0], [62.3, 2984.0], [62.4, 2985.0], [62.5, 2985.0], [62.6, 2987.0], [62.7, 2988.0], [62.8, 2990.0], [62.9, 3002.0], [63.0, 3010.0], [63.1, 3041.0], [63.2, 3047.0], [63.3, 3052.0], [63.4, 3053.0], [63.5, 3056.0], [63.6, 3057.0], [63.7, 3059.0], [63.8, 3061.0], [63.9, 3061.0], [64.0, 3063.0], [64.1, 3065.0], [64.2, 3067.0], [64.3, 3070.0], [64.4, 3071.0], [64.5, 3073.0], [64.6, 3079.0], [64.7, 3087.0], [64.8, 3089.0], [64.9, 3095.0], [65.0, 3111.0], [65.1, 3121.0], [65.2, 3127.0], [65.3, 3134.0], [65.4, 3144.0], [65.5, 3153.0], [65.6, 3158.0], [65.7, 3166.0], [65.8, 3176.0], [65.9, 3184.0], [66.0, 3187.0], [66.1, 3191.0], [66.2, 3205.0], [66.3, 3220.0], [66.4, 3222.0], [66.5, 3226.0], [66.6, 3234.0], [66.7, 3235.0], [66.8, 3240.0], [66.9, 3249.0], [67.0, 3256.0], [67.1, 3271.0], [67.2, 3278.0], [67.3, 3282.0], [67.4, 3286.0], [67.5, 3288.0], [67.6, 3437.0], [67.7, 3441.0], [67.8, 3443.0], [67.9, 3444.0], [68.0, 3446.0], [68.1, 3447.0], [68.2, 3449.0], [68.3, 3455.0], [68.4, 3459.0], [68.5, 3461.0], [68.6, 3462.0], [68.7, 3467.0], [68.8, 3476.0], [68.9, 3567.0], [69.0, 3569.0], [69.1, 3571.0], [69.2, 3573.0], [69.3, 3579.0], [69.4, 3583.0], [69.5, 3587.0], [69.6, 3592.0], [69.7, 3594.0], [69.8, 3595.0], [69.9, 3597.0], [70.0, 3599.0], [70.1, 3601.0], [70.2, 3605.0], [70.3, 3607.0], [70.4, 3611.0], [70.5, 3613.0], [70.6, 3616.0], [70.7, 3619.0], [70.8, 3621.0], [70.9, 3626.0], [71.0, 3628.0], [71.1, 3637.0], [71.2, 3641.0], [71.3, 3645.0], [71.4, 3651.0], [71.5, 3652.0], [71.6, 3653.0], [71.7, 3654.0], [71.8, 3657.0], [71.9, 3660.0], [72.0, 3665.0], [72.1, 3667.0], [72.2, 3669.0], [72.3, 3671.0], [72.4, 3675.0], [72.5, 3683.0], [72.6, 3690.0], [72.7, 3693.0], [72.8, 3696.0], [72.9, 3705.0], [73.0, 3712.0], [73.1, 3722.0], [73.2, 3727.0], [73.3, 3739.0], [73.4, 3951.0], [73.5, 3952.0], [73.6, 3953.0], [73.7, 3954.0], [73.8, 3955.0], [73.9, 3956.0], [74.0, 3957.0], [74.1, 3959.0], [74.2, 3961.0], [74.3, 3963.0], [74.4, 3968.0], [74.5, 3979.0], [74.6, 3984.0], [74.7, 3985.0], [74.8, 3987.0], [74.9, 3989.0], [75.0, 3991.0], [75.1, 3996.0], [75.2, 4004.0], [75.3, 4006.0], [75.4, 4102.0], [75.5, 4104.0], [75.6, 4105.0], [75.7, 4107.0], [75.8, 4109.0], [75.9, 4116.0], [76.0, 4119.0], [76.1, 4126.0], [76.2, 4136.0], [76.3, 4145.0], [76.4, 4155.0], [76.5, 4168.0], [76.6, 4174.0], [76.7, 4180.0], [76.8, 4184.0], [76.9, 4186.0], [77.0, 4198.0], [77.1, 4292.0], [77.2, 4297.0], [77.3, 4299.0], [77.4, 4299.0], [77.5, 4301.0], [77.6, 4302.0], [77.7, 4302.0], [77.8, 4305.0], [77.9, 4307.0], [78.0, 4309.0], [78.1, 4310.0], [78.2, 4312.0], [78.3, 4313.0], [78.4, 4315.0], [78.5, 4316.0], [78.6, 4318.0], [78.7, 4319.0], [78.8, 4320.0], [78.9, 4321.0], [79.0, 4322.0], [79.1, 4325.0], [79.2, 4328.0], [79.3, 4337.0], [79.4, 4340.0], [79.5, 4341.0], [79.6, 4349.0], [79.7, 4365.0], [79.8, 4371.0], [79.9, 4374.0], [80.0, 4379.0], [80.1, 4387.0], [80.2, 4400.0], [80.3, 4403.0], [80.4, 4408.0], [80.5, 4412.0], [80.6, 4420.0], [80.7, 4426.0], [80.8, 4436.0], [80.9, 4449.0], [81.0, 4454.0], [81.1, 4471.0], [81.2, 4487.0], [81.3, 4490.0], [81.4, 4498.0], [81.5, 4513.0], [81.6, 4516.0], [81.7, 4532.0], [81.8, 4544.0], [81.9, 4555.0], [82.0, 4562.0], [82.1, 4564.0], [82.2, 4568.0], [82.3, 4576.0], [82.4, 4586.0], [82.5, 4590.0], [82.6, 4602.0], [82.7, 4616.0], [82.8, 4631.0], [82.9, 4633.0], [83.0, 4636.0], [83.1, 4659.0], [83.2, 4662.0], [83.3, 4681.0], [83.4, 4825.0], [83.5, 4836.0], [83.6, 4839.0], [83.7, 4844.0], [83.8, 4847.0], [83.9, 4852.0], [84.0, 4859.0], [84.1, 4861.0], [84.2, 4864.0], [84.3, 4866.0], [84.4, 4875.0], [84.5, 4883.0], [84.6, 4884.0], [84.7, 4887.0], [84.8, 4887.0], [84.9, 4889.0], [85.0, 4893.0], [85.1, 4896.0], [85.2, 4898.0], [85.3, 4900.0], [85.4, 4902.0], [85.5, 4904.0], [85.6, 4906.0], [85.7, 4908.0], [85.8, 4912.0], [85.9, 4916.0], [86.0, 4920.0], [86.1, 4925.0], [86.2, 4929.0], [86.3, 4935.0], [86.4, 4940.0], [86.5, 4943.0], [86.6, 4946.0], [86.7, 4949.0], [86.8, 4954.0], [86.9, 4956.0], [87.0, 4960.0], [87.1, 4971.0], [87.2, 4976.0], [87.3, 4988.0], [87.4, 4997.0], [87.5, 5010.0], [87.6, 5018.0], [87.7, 5024.0], [87.8, 5029.0], [87.9, 5033.0], [88.0, 5039.0], [88.1, 5145.0], [88.2, 5148.0], [88.3, 5150.0], [88.4, 5153.0], [88.5, 5154.0], [88.6, 5155.0], [88.7, 5156.0], [88.8, 5159.0], [88.9, 5161.0], [89.0, 5171.0], [89.1, 5177.0], [89.2, 5183.0], [89.3, 5186.0], [89.4, 5189.0], [89.5, 5195.0], [89.6, 5197.0], [89.7, 5197.0], [89.8, 5200.0], [89.9, 5202.0], [90.0, 5207.0], [90.1, 5306.0], [90.2, 5313.0], [90.3, 5320.0], [90.4, 5324.0], [90.5, 5328.0], [90.6, 5331.0], [90.7, 5333.0], [90.8, 5335.0], [90.9, 5336.0], [91.0, 5337.0], [91.1, 5340.0], [91.2, 5344.0], [91.3, 5348.0], [91.4, 5351.0], [91.5, 5359.0], [91.6, 5363.0], [91.7, 5368.0], [91.8, 5369.0], [91.9, 5377.0], [92.0, 5380.0], [92.1, 5382.0], [92.2, 5386.0], [92.3, 5391.0], [92.4, 5396.0], [92.5, 5402.0], [92.6, 5406.0], [92.7, 5408.0], [92.8, 5411.0], [92.9, 5414.0], [93.0, 5420.0], [93.1, 5435.0], [93.2, 5452.0], [93.3, 5456.0], [93.4, 5468.0], [93.5, 5480.0], [93.6, 5506.0], [93.7, 5511.0], [93.8, 5514.0], [93.9, 5518.0], [94.0, 5521.0], [94.1, 5532.0], [94.2, 5554.0], [94.3, 5692.0], [94.4, 5696.0], [94.5, 5697.0], [94.6, 5698.0], [94.7, 5700.0], [94.8, 5702.0], [94.9, 5706.0], [95.0, 5714.0], [95.1, 5721.0], [95.2, 5723.0], [95.3, 5725.0], [95.4, 5729.0], [95.5, 5733.0], [95.6, 5735.0], [95.7, 5736.0], [95.8, 5737.0], [95.9, 5740.0], [96.0, 5742.0], [96.1, 5744.0], [96.2, 5746.0], [96.3, 5748.0], [96.4, 5751.0], [96.5, 5752.0], [96.6, 5753.0], [96.7, 5758.0], [96.8, 5761.0], [96.9, 5838.0], [97.0, 5848.0], [97.1, 5855.0], [97.2, 5865.0], [97.3, 5883.0], [97.4, 5891.0], [97.5, 5896.0], [97.6, 5904.0], [97.7, 5907.0], [97.8, 5908.0], [97.9, 5910.0], [98.0, 5914.0], [98.1, 5915.0], [98.2, 5916.0], [98.3, 5918.0], [98.4, 5921.0], [98.5, 5924.0], [98.6, 5930.0], [98.7, 5931.0], [98.8, 5935.0], [98.9, 5942.0], [99.0, 5956.0], [99.1, 5958.0], [99.2, 5962.0], [99.3, 6111.0], [99.4, 6114.0], [99.5, 6122.0], [99.6, 6130.0], [99.7, 6130.0], [99.8, 6134.0], [99.9, 6137.0], [100.0, 6143.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 832.0, "series": [{"data": [[0.0, 832.0], [600.0, 100.0], [700.0, 62.0], [800.0, 166.0], [900.0, 5.0], [1000.0, 74.0], [1100.0, 67.0], [1200.0, 1.0], [1400.0, 66.0], [1500.0, 16.0], [1600.0, 91.0], [1700.0, 59.0], [1800.0, 19.0], [1900.0, 33.0], [2000.0, 146.0], [2100.0, 45.0], [2300.0, 48.0], [2200.0, 62.0], [2400.0, 38.0], [2500.0, 42.0], [2600.0, 26.0], [2800.0, 39.0], [2900.0, 90.0], [3000.0, 82.0], [3100.0, 48.0], [3200.0, 57.0], [3400.0, 51.0], [3500.0, 47.0], [3600.0, 114.0], [3700.0, 20.0], [3900.0, 72.0], [4000.0, 8.0], [4100.0, 67.0], [4200.0, 15.0], [4300.0, 110.0], [4400.0, 49.0], [4500.0, 44.0], [4600.0, 35.0], [4800.0, 76.0], [5000.0, 25.0], [4900.0, 85.0], [5100.0, 69.0], [5200.0, 11.0], [5300.0, 96.0], [5400.0, 46.0], [5500.0, 25.0], [5600.0, 16.0], [5700.0, 91.0], [5800.0, 25.0], [5900.0, 70.0], [6100.0, 30.0], [100.0, 64.0], [200.0, 85.0], [300.0, 178.0], [400.0, 13.0], [500.0, 49.0]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 437.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1991.0, "series": [{"data": [[0.0, 1045.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 527.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1991.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 437.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.8800000000000003, "minX": 1.732949513E12, "maxY": 1153.5771144278606, "series": [{"data": [[1.732949522E12, 719.3173913043481], [1.732949521E12, 620.1866028708133], [1.732949525E12, 1153.5771144278606], [1.732949524E12, 1019.6100000000001], [1.732949523E12, 877.6939890710382], [1.732949517E12, 117.11065573770495], [1.732949516E12, 49.50000000000004], [1.732949515E12, 3.8800000000000003], [1.73294952E12, 495.2838709677417], [1.732949519E12, 325.4298642533939], [1.732949518E12, 244.39344262295074], [1.732949531E12, 91.13812154696133], [1.732949514E12, 5.4849315068493105], [1.732949513E12, 22.0], [1.732949528E12, 689.5986842105265], [1.732949527E12, 875.5409090909097], [1.732949526E12, 1068.6024096385538], [1.73294953E12, 290.53669724770674], [1.732949529E12, 506.5934579439253]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.732949531E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.860986547085198, "minX": 1.0, "maxY": 5931.0, "series": [{"data": [[2.0, 4.860986547085198], [3.0, 96.91911764705881], [4.0, 54.57251908396947], [5.0, 118.76785714285714], [6.0, 209.1935483870968], [7.0, 353.1111111111111], [8.0, 484.84615384615387], [9.0, 19.615384615384617], [10.0, 834.8], [11.0, 704.7777777777778], [12.0, 579.7272727272726], [13.0, 1254.0], [14.0, 713.4444444444445], [15.0, 912.7142857142857], [16.0, 1263.4], [17.0, 811.25], [18.0, 44.4], [19.0, 4090.6666666666665], [20.0, 1062.3333333333333], [21.0, 1569.75], [22.0, 295.8695652173913], [23.0, 307.8636363636364], [24.0, 446.1875], [25.0, 535.8461538461538], [26.0, 443.5], [27.0, 574.0], [28.0, 681.4], [29.0, 85.0], [30.0, 2106.0], [31.0, 1544.75], [32.0, 93.5], [33.0, 1388.2222222222222], [34.0, 1069.0], [35.0, 109.25], [36.0, 1559.625], [37.0, 591.4166666666666], [39.0, 758.3333333333334], [38.0, 593.5833333333334], [40.0, 763.1111111111111], [41.0, 119.85714285714286], [42.0, 3014.75], [43.0, 1573.5], [45.0, 5915.0], [44.0, 5915.0], [47.0, 5916.0], [46.0, 5912.0], [49.0, 5915.0], [48.0, 5918.0], [51.0, 5916.5], [53.0, 5914.0], [52.0, 5915.0], [54.0, 5910.0], [57.0, 5838.0], [56.0, 5922.5], [59.0, 5849.5], [61.0, 5930.0], [60.0, 5885.0], [62.0, 5892.0], [67.0, 5855.0], [66.0, 5848.0], [65.0, 5840.0], [64.0, 5848.0], [70.0, 5861.0], [69.0, 5931.0], [68.0, 5886.0], [75.0, 5865.0], [74.0, 5860.0], [72.0, 5862.0], [79.0, 5891.0], [78.0, 5871.0], [76.0, 5883.0], [83.0, 2167.333333333333], [81.0, 3098.5], [82.0, 5900.0], [80.0, 5886.0], [87.0, 2168.333333333333], [86.0, 3123.0], [85.0, 3107.0], [84.0, 3110.0], [91.0, 2149.166666666667], [90.0, 278.09999999999997], [89.0, 1878.5714285714284], [88.0, 279.5], [95.0, 1091.857142857143], [94.0, 283.00000000000006], [93.0, 993.75], [92.0, 5918.0], [99.0, 3108.0], [98.0, 1430.2], [97.0, 734.5384615384617], [96.0, 638.25], [103.0, 1017.125], [101.0, 3113.5], [100.0, 298.3333333333333], [102.0, 1429.8], [107.0, 1031.5], [106.0, 1122.142857142857], [105.0, 782.6666666666666], [104.0, 778.0], [111.0, 805.2727272727273], [110.0, 1035.5], [109.0, 946.7777777777778], [108.0, 830.6363636363636], [115.0, 1133.142857142857], [114.0, 731.0], [113.0, 798.3333333333333], [112.0, 844.0], [118.0, 1469.0], [117.0, 1024.25], [116.0, 1457.4], [119.0, 1748.75], [123.0, 3164.5], [122.0, 2230.0], [121.0, 2227.333333333333], [120.0, 1469.4], [127.0, 2529.2], [126.0, 376.0], [125.0, 3166.0], [124.0, 2240.0], [131.0, 2182.333333333333], [130.0, 3071.5], [128.0, 1460.4], [129.0, 3070.0], [135.0, 5751.0], [134.0, 5758.0], [133.0, 5746.0], [143.0, 5736.0], [142.0, 5753.0], [141.0, 5752.0], [140.0, 5752.0], [139.0, 5752.0], [138.0, 5748.0], [137.0, 5744.0], [136.0, 5748.0], [151.0, 5732.0], [150.0, 5735.0], [149.0, 5726.0], [148.0, 5723.0], [147.0, 5742.0], [146.0, 5741.0], [145.0, 5737.0], [144.0, 5736.0], [159.0, 470.0], [158.0, 3129.5], [157.0, 5734.0], [156.0, 5725.0], [155.0, 5739.0], [154.0, 5722.0], [153.0, 5733.0], [166.0, 508.0], [165.0, 3121.0], [164.0, 1797.25], [163.0, 3109.0], [162.0, 3108.0], [161.0, 3102.5], [160.0, 3113.75], [167.0, 5726.0], [175.0, 3113.0], [174.0, 3989.6666666666665], [173.0, 517.0], [172.0, 3117.5], [171.0, 3115.0], [170.0, 3114.25], [169.0, 492.0], [168.0, 2238.0], [183.0, 3128.25], [182.0, 544.0], [181.0, 3121.5], [180.0, 1569.8], [179.0, 3118.0], [178.0, 3119.5], [177.0, 2253.666666666667], [176.0, 2254.333333333333], [187.0, 1406.5], [188.0, 3130.5], [185.0, 2275.333333333333], [184.0, 2267.666666666667], [191.0, 5698.5], [189.0, 5697.0], [186.0, 5696.0], [199.0, 595.5], [198.0, 1451.5], [197.0, 1864.25], [196.0, 1861.75], [195.0, 5697.0], [194.0, 5683.0], [193.0, 5685.0], [192.0, 5690.0], [207.0, 3161.5], [206.0, 2313.666666666667], [205.0, 3161.5], [204.0, 2322.333333333333], [203.0, 3171.0], [202.0, 1889.0], [201.0, 3172.0], [200.0, 3148.75], [215.0, 3182.0], [214.0, 3181.0], [213.0, 2329.0], [212.0, 3171.0], [211.0, 3175.0], [210.0, 1896.75], [209.0, 3164.0], [208.0, 3164.5], [223.0, 2352.666666666667], [222.0, 2355.0], [221.0, 1513.1666666666665], [220.0, 1122.9090909090908], [219.0, 1221.5555555555557], [218.0, 1503.0], [217.0, 3194.0], [216.0, 3185.0], [230.0, 1962.0], [229.0, 1952.0], [228.0, 1700.2], [227.0, 1139.5454545454545], [226.0, 1521.5], [225.0, 1937.0], [224.0, 1680.4], [231.0, 3220.5], [239.0, 1917.25], [238.0, 1914.75], [237.0, 1907.75], [236.0, 2315.0], [235.0, 1669.6], [234.0, 1504.5], [233.0, 2323.0], [232.0, 1711.0], [241.0, 1679.4], [240.0, 3124.5], [247.0, 3925.3333333333335], [246.0, 735.0], [245.0, 2327.666666666667], [244.0, 3125.5], [243.0, 3115.5], [242.0, 3120.0], [255.0, 2347.0], [254.0, 3132.0], [253.0, 2344.0], [252.0, 3132.0], [251.0, 3132.0], [250.0, 3131.5], [249.0, 2336.0], [248.0, 3128.5], [264.0, 3140.0], [267.0, 1465.2857142857142], [266.0, 1310.888888888889], [265.0, 2347.333333333333], [263.0, 3137.0], [257.0, 1951.0], [256.0, 5507.0], [262.0, 3130.5], [261.0, 3142.5], [260.0, 1707.2], [259.0, 2337.333333333333], [269.0, 1968.0], [268.0, 1969.75], [271.0, 810.8571428571429], [270.0, 1231.3636363636365], [258.0, 3127.0], [286.0, 1995.75], [287.0, 1625.5], [285.0, 1765.6], [284.0, 1757.8], [283.0, 1604.6666666666667], [282.0, 2376.333333333333], [281.0, 1604.3333333333333], [280.0, 3137.5], [279.0, 1987.5], [273.0, 3155.0], [272.0, 1974.2499999999998], [275.0, 2361.0], [274.0, 1743.2], [278.0, 1595.1666666666667], [277.0, 3902.6666666666665], [276.0, 823.5], [291.0, 1375.3333333333333], [297.0, 1232.3846153846155], [298.0, 2386.666666666667], [299.0, 5386.0], [296.0, 1387.111111111111], [303.0, 5380.0], [302.0, 5369.0], [301.0, 3132.5], [300.0, 3146.5], [295.0, 1183.3333333333335], [294.0, 1443.0], [293.0, 1376.3333333333333], [292.0, 1222.7692307692307], [290.0, 1625.8333333333333], [289.0, 1770.2], [288.0, 1996.0], [318.0, 5344.0], [306.0, 2400.333333333333], [305.0, 2398.0], [304.0, 5382.0], [311.0, 5362.0], [310.0, 5359.0], [309.0, 5359.0], [308.0, 5377.0], [319.0, 5347.0], [317.0, 5348.0], [316.0, 5344.0], [307.0, 5368.0], [315.0, 5340.0], [314.0, 5344.0], [313.0, 5343.0], [312.0, 5361.0], [334.0, 5328.0], [335.0, 5339.0], [333.0, 5327.0], [332.0, 5324.0], [331.0, 5340.0], [330.0, 5339.0], [329.0, 5350.0], [328.0, 5348.0], [327.0, 5339.0], [321.0, 5350.0], [320.0, 5351.0], [323.0, 5333.0], [322.0, 5335.0], [326.0, 5340.0], [325.0, 5337.0], [324.0, 5335.0], [350.0, 3177.0], [351.0, 3180.5], [349.0, 1760.1666666666665], [348.0, 1661.5714285714284], [347.0, 3197.0], [346.0, 1892.6], [345.0, 1523.3333333333333], [344.0, 1648.857142857143], [343.0, 3191.5], [336.0, 5327.0], [339.0, 5331.5], [337.0, 5327.0], [342.0, 5312.0], [341.0, 5312.0], [340.0, 5331.0], [366.0, 1947.0], [367.0, 3220.0], [365.0, 1798.666666666667], [364.0, 1935.8], [363.0, 1803.5], [362.0, 3210.5], [361.0, 1930.4], [360.0, 2143.0], [359.0, 2133.75], [358.0, 2137.5], [353.0, 2121.0], [352.0, 2473.0], [355.0, 3198.5], [354.0, 1915.6], [357.0, 1778.8333333333333], [356.0, 3193.0], [371.0, 1820.6666666666667], [375.0, 1833.3333333333335], [376.0, 1733.5714285714284], [383.0, 2569.666666666667], [382.0, 3279.0], [381.0, 5386.0], [380.0, 5384.0], [377.0, 2186.0], [379.0, 5381.0], [378.0, 5380.0], [374.0, 2185.5], [373.0, 2538.666666666667], [372.0, 2175.5], [370.0, 2528.666666666667], [369.0, 1958.4], [368.0, 2521.333333333333], [398.0, 1193.0], [386.0, 2212.0], [387.0, 5401.0], [385.0, 2573.0], [384.0, 2212.0], [391.0, 5377.0], [390.0, 5403.0], [389.0, 5377.0], [388.0, 5403.0], [394.0, 3293.0], [395.0, 5406.0], [393.0, 3283.5], [392.0, 3288.0], [397.0, 2033.4], [396.0, 5407.0], [399.0, 3304.75], [414.0, 5202.0], [400.0, 3198.0], [401.0, 5195.0], [403.0, 5198.0], [402.0, 5197.0], [407.0, 5196.0], [406.0, 5200.0], [405.0, 5195.0], [404.0, 5194.0], [415.0, 5188.0], [413.0, 5206.0], [412.0, 5192.0], [411.0, 5201.0], [410.0, 5200.0], [409.0, 5196.0], [408.0, 5195.0], [430.0, 5182.0], [431.0, 5188.0], [429.0, 5182.0], [428.0, 5186.0], [427.0, 5201.0], [426.0, 5205.0], [425.0, 5204.0], [424.0, 5214.0], [423.0, 5197.0], [416.0, 5189.0], [419.0, 5184.0], [418.0, 5202.0], [422.0, 5197.0], [421.0, 5197.0], [420.0, 5187.0], [435.0, 5179.5], [447.0, 5147.0], [445.0, 5149.0], [443.0, 5169.0], [442.0, 5172.5], [440.0, 5173.5], [438.0, 5169.0], [437.0, 5184.0], [436.0, 5183.0], [433.0, 5201.0], [432.0, 5184.0], [461.0, 5154.0], [462.0, 5157.0], [460.0, 5155.0], [451.0, 5146.0], [449.0, 5145.0], [448.0, 5144.0], [459.0, 5154.0], [457.0, 5153.0], [456.0, 5152.0], [455.0, 5150.0], [454.0, 5146.0], [453.0, 5150.0], [472.0, 2037.6666666666665], [474.0, 1793.1000000000001], [475.0, 1957.2857142857142], [473.0, 2353.5], [471.0, 2034.5], [465.0, 5155.0], [464.0, 5152.5], [467.0, 5154.0], [466.0, 5156.0], [470.0, 2348.25], [469.0, 2655.666666666667], [468.0, 3279.0], [476.0, 2358.25], [478.0, 1434.0], [477.0, 5161.0], [479.0, 3297.5], [493.0, 2633.0], [481.0, 2613.666666666667], [482.0, 4947.0], [480.0, 2312.75], [485.0, 2328.25], [484.0, 4954.0], [487.0, 4939.0], [486.0, 4958.0], [494.0, 2350.25], [491.0, 3215.0], [495.0, 2632.333333333333], [492.0, 4953.0], [483.0, 4954.0], [490.0, 4947.0], [489.0, 4943.0], [488.0, 4941.0], [498.0, 3215.0], [501.0, 2643.666666666667], [500.0, 3212.5], [499.0, 2638.333333333333], [497.0, 3218.5], [496.0, 2173.8], [503.0, 4915.0], [502.0, 4914.0], [509.0, 3223.0], [510.0, 4916.0], [505.0, 2361.5], [504.0, 4917.0], [511.0, 4906.0], [508.0, 2198.0], [507.0, 2195.4], [506.0, 2362.0], [540.0, 4897.0], [543.0, 4904.0], [528.0, 4886.0], [530.0, 4887.0], [529.0, 4883.0], [532.0, 4887.0], [531.0, 4888.0], [542.0, 4901.0], [541.0, 4900.0], [539.0, 4897.0], [538.0, 4898.0], [537.0, 4895.0], [536.0, 4893.0], [526.0, 4886.0], [513.0, 4905.0], [512.0, 4908.0], [515.0, 4910.0], [514.0, 4897.0], [517.0, 4895.0], [516.0, 4912.0], [519.0, 4896.0], [518.0, 4895.0], [525.0, 4886.5], [523.0, 4901.0], [521.0, 4900.0], [520.0, 4899.0], [535.0, 4889.0], [534.0, 4889.5], [572.0, 2254.833333333333], [575.0, 2532.5], [561.0, 2087.0], [560.0, 1948.0833333333333], [563.0, 2053.222222222222], [562.0, 2046.888888888889], [565.0, 1700.5833333333335], [564.0, 2103.25], [574.0, 2256.5], [573.0, 2519.5], [571.0, 3008.4], [570.0, 1710.5], [569.0, 2802.333333333333], [568.0, 2063.4444444444443], [559.0, 1972.2727272727275], [545.0, 4902.0], [544.0, 4905.0], [547.0, 4907.0], [546.0, 4903.0], [549.0, 4908.0], [548.0, 4906.0], [551.0, 4912.0], [550.0, 4910.0], [558.0, 2480.75], [557.0, 2216.5], [556.0, 2208.8333333333335], [555.0, 3292.0], [554.0, 1663.0], [553.0, 3287.0], [552.0, 4916.0], [567.0, 1996.2727272727273], [566.0, 2236.25], [604.0, 5033.0], [579.0, 2554.0], [577.0, 2548.75], [576.0, 2799.0], [591.0, 5004.0], [590.0, 4997.0], [589.0, 4991.5], [587.0, 4992.0], [586.0, 4988.0], [578.0, 2811.333333333333], [585.0, 3369.0], [584.0, 2555.0], [583.0, 2825.0], [582.0, 2826.333333333333], [581.0, 4975.0], [580.0, 4971.0], [607.0, 5034.0], [593.0, 5013.0], [592.0, 5008.0], [595.0, 5016.0], [594.0, 5010.0], [597.0, 5021.0], [596.0, 5018.0], [599.0, 5023.0], [598.0, 5021.0], [606.0, 5031.0], [605.0, 5027.0], [603.0, 5029.0], [602.0, 5026.0], [601.0, 5024.0], [600.0, 5024.0], [637.0, 1900.0], [639.0, 2883.6666666666665], [638.0, 4857.5], [625.0, 2860.6666666666665], [624.0, 4837.0], [627.0, 2618.75], [626.0, 2863.0], [629.0, 3356.5], [628.0, 2622.75], [636.0, 3374.0], [635.0, 2883.0], [634.0, 3378.0], [633.0, 3377.5], [632.0, 3373.5], [615.0, 4851.0], [613.0, 5039.0], [612.0, 5036.5], [610.0, 5032.0], [609.0, 5033.0], [608.0, 5034.0], [623.0, 4832.0], [622.0, 4844.0], [621.0, 4842.0], [620.0, 4839.0], [619.0, 4840.0], [618.0, 4827.0], [617.0, 4825.0], [616.0, 4851.0], [631.0, 3367.0], [630.0, 2872.6666666666665], [644.0, 2898.6666666666665], [653.0, 3411.5], [654.0, 3421.5], [640.0, 3381.5], [655.0, 4865.0], [642.0, 3382.0], [643.0, 4856.0], [641.0, 3381.0], [645.0, 3380.0], [652.0, 2683.75], [651.0, 2530.4], [650.0, 2679.5], [649.0, 3114.6], [648.0, 1939.5], [647.0, 2672.25], [664.0, 4884.0], [667.0, 4682.0], [665.0, 4887.0], [669.0, 4686.0], [668.0, 4671.0], [671.0, 4672.0], [657.0, 4875.0], [656.0, 4874.0], [659.0, 4882.0], [658.0, 4881.0], [661.0, 4887.0], [660.0, 4883.0], [663.0, 4887.0], [662.0, 4883.0], [670.0, 4673.0], [646.0, 3381.0], [700.0, 2599.2], [703.0, 2376.1111111111113], [688.0, 2574.2], [690.0, 2494.1666666666665], [691.0, 2710.0], [689.0, 2380.625], [693.0, 2081.5714285714284], [692.0, 2577.8], [702.0, 2414.875], [701.0, 2457.4285714285716], [699.0, 3341.0], [698.0, 2372.777777777778], [697.0, 2294.5833333333335], [696.0, 2363.0], [687.0, 2342.5555555555557], [673.0, 4662.0], [672.0, 4684.0], [675.0, 4660.0], [674.0, 4659.0], [677.0, 2554.8], [676.0, 2683.25], [679.0, 2026.0], [678.0, 2912.3333333333335], [686.0, 2424.0000000000005], [685.0, 2419.285714285714], [684.0, 2332.6666666666665], [683.0, 2415.857142857143], [682.0, 2562.4], [681.0, 2364.125], [680.0, 2618.1111111111113], [695.0, 2412.0], [694.0, 2722.75], [707.0, 3348.0], [716.0, 3354.0], [717.0, 2752.0], [719.0, 4562.0], [718.0, 4562.0], [706.0, 2722.75], [705.0, 3758.0], [704.0, 2099.3333333333335], [715.0, 3350.5], [714.0, 2740.75], [713.0, 2953.0], [712.0, 2949.6666666666665], [710.0, 2943.6666666666665], [728.0, 4540.0], [711.0, 4564.0], [731.0, 4544.0], [730.0, 4542.5], [733.0, 4531.0], [732.0, 4530.0], [735.0, 4532.0], [720.0, 4564.0], [723.0, 4567.0], [721.0, 4565.0], [725.0, 4554.0], [724.0, 4551.0], [727.0, 4558.0], [726.0, 4555.0], [734.0, 4532.0], [709.0, 3352.75], [708.0, 2118.0], [764.0, 2830.75], [767.0, 2727.4], [752.0, 2997.3333333333335], [755.0, 2814.25], [754.0, 3151.0], [757.0, 3370.5], [756.0, 2816.75], [766.0, 2725.2], [765.0, 2829.5], [763.0, 2903.285714285714], [762.0, 2299.5], [761.0, 3365.5], [760.0, 3001.6666666666665], [751.0, 2697.8], [737.0, 4513.0], [736.0, 4533.0], [739.0, 4513.0], [738.0, 4513.0], [741.0, 4516.0], [740.0, 4515.0], [743.0, 4496.0], [742.0, 4515.0], [750.0, 2809.0], [749.0, 3746.6666666666665], [748.0, 2236.0], [747.0, 2990.0], [746.0, 2609.833333333333], [745.0, 2610.5], [744.0, 3374.5], [759.0, 2902.7142857142853], [758.0, 2271.5], [771.0, 3367.5], [772.0, 3017.3333333333335], [770.0, 3019.3333333333335], [769.0, 2839.25], [768.0, 2607.5714285714284], [783.0, 3038.0], [782.0, 3376.0], [781.0, 4410.0], [775.0, 3376.0], [792.0, 4399.0], [794.0, 3393.0], [793.0, 4400.0], [786.0, 3379.0], [785.0, 4403.0], [784.0, 4417.0], [796.0, 3386.5], [798.0, 4386.0], [797.0, 4400.0], [799.0, 3067.6666666666665], [795.0, 2784.2], [788.0, 3386.5], [789.0, 4414.0], [791.0, 3055.0], [790.0, 3399.5], [787.0, 3040.3333333333335], [774.0, 3021.6666666666665], [773.0, 3369.0], [780.0, 3027.3333333333335], [778.0, 3024.0], [779.0, 4412.0], [777.0, 3372.5], [776.0, 4428.0], [807.0, 3396.5], [800.0, 2890.5], [803.0, 2794.2], [804.0, 4372.0], [806.0, 4379.0], [805.0, 4376.0], [802.0, 2802.2], [801.0, 2903.0], [810.0, 3077.6666666666665], [811.0, 4371.0], [813.0, 4354.0], [812.0, 4374.0], [809.0, 2814.4], [808.0, 2907.25], [819.0, 3083.0], [818.0, 4339.0], [817.0, 4339.0], [816.0, 4354.0], [821.0, 4340.0], [820.0, 4341.0], [823.0, 4342.0], [822.0, 4345.0], [830.0, 3101.0], [829.0, 4325.0], [828.0, 4341.0], [831.0, 4328.0], [827.0, 2788.1666666666665], [826.0, 3405.5], [825.0, 3408.0], [824.0, 4343.0], [815.0, 2443.3333333333335], [814.0, 2821.6], [838.0, 2963.5], [839.0, 3416.0], [856.0, 3443.0], [858.0, 3157.0], [862.0, 3015.25], [863.0, 4312.0], [861.0, 3447.0], [860.0, 3447.0], [859.0, 4317.0], [857.0, 3449.5], [840.0, 2819.0], [841.0, 3419.5], [848.0, 2896.6], [847.0, 2985.75], [833.0, 4324.0], [832.0, 4330.0], [835.0, 4321.0], [834.0, 4320.0], [837.0, 4321.0], [836.0, 4320.0], [846.0, 3428.5], [845.0, 4320.0], [844.0, 4323.0], [843.0, 4316.0], [842.0, 4321.0], [853.0, 2997.0], [855.0, 2856.166666666667], [854.0, 3148.6666666666665], [852.0, 3436.5], [851.0, 4331.0], [850.0, 4321.0], [849.0, 4321.0], [871.0, 3181.3333333333335], [867.0, 2942.6], [866.0, 3026.25], [865.0, 4312.0], [864.0, 4316.0], [869.0, 3032.25], [868.0, 3456.0], [870.0, 3458.0], [885.0, 2982.4], [886.0, 3476.0], [883.0, 3200.0], [882.0, 4299.0], [881.0, 4301.0], [880.0, 4300.5], [895.0, 4300.0], [894.0, 4300.0], [893.0, 4302.0], [892.0, 4297.0], [891.0, 4295.0], [890.0, 4309.0], [889.0, 4307.0], [888.0, 4302.5], [884.0, 3060.5], [873.0, 3466.0], [872.0, 3465.0], [879.0, 2640.0], [878.0, 3468.5], [876.0, 4299.0], [875.0, 4297.0], [874.0, 4296.0], [924.0, 4117.0], [927.0, 4119.0], [912.0, 4304.0], [915.0, 4294.0], [914.0, 4301.5], [917.0, 4114.0], [916.0, 4292.0], [926.0, 4120.0], [925.0, 4115.0], [923.0, 4107.0], [922.0, 4105.0], [921.0, 4100.0], [920.0, 4104.0], [911.0, 4307.0], [897.0, 4299.0], [896.0, 4305.0], [899.0, 4306.0], [898.0, 4305.0], [901.0, 4308.0], [900.0, 4308.0], [903.0, 4312.0], [902.0, 4309.0], [910.0, 4302.0], [909.0, 4302.0], [908.0, 4315.0], [907.0, 4313.0], [906.0, 4310.0], [905.0, 4309.0], [904.0, 4306.0], [919.0, 4109.0], [918.0, 4115.0], [952.0, 3292.3333333333335], [958.0, 3523.0], [959.0, 3308.6666666666665], [945.0, 3467.5], [944.0, 3465.5], [947.0, 3497.0], [946.0, 3465.0], [957.0, 3508.5], [956.0, 3288.6666666666665], [954.0, 2846.5], [953.0, 4145.0], [955.0, 4141.0], [943.0, 3250.3333333333335], [928.0, 4123.0], [931.0, 4118.0], [929.0, 4126.0], [933.0, 4107.0], [932.0, 4102.0], [935.0, 4118.0], [934.0, 4116.0], [942.0, 3460.5], [941.0, 3488.5], [940.0, 3262.6666666666665], [939.0, 3246.3333333333335], [938.0, 3457.0], [937.0, 3241.6666666666665], [936.0, 3454.0], [951.0, 3717.6666666666665], [950.0, 2839.0], [949.0, 3268.3333333333335], [948.0, 3483.0], [965.0, 3526.0], [973.0, 3127.5], [977.0, 3347.0], [976.0, 4186.0], [978.0, 4201.0], [980.0, 4185.0], [979.0, 4203.0], [983.0, 4190.0], [982.0, 4186.0], [991.0, 3101.625], [990.0, 3085.777777777778], [989.0, 3479.5], [988.0, 3992.0], [986.0, 3994.0], [985.0, 4199.0], [984.0, 4198.0], [967.0, 3536.5], [966.0, 3317.6666666666665], [964.0, 3527.5], [963.0, 3518.0], [962.0, 3516.5], [961.0, 3304.3333333333335], [960.0, 3513.0], [975.0, 3343.6666666666665], [974.0, 3342.0], [972.0, 3547.5], [971.0, 3546.5], [970.0, 3333.6666666666665], [969.0, 3330.0], [968.0, 3222.5], [996.0, 3068.3333333333335], [1004.0, 3334.3333333333335], [1005.0, 3337.3333333333335], [1007.0, 3984.0], [1006.0, 3987.0], [993.0, 3101.5], [992.0, 3180.6], [995.0, 3166.6363636363635], [994.0, 2981.125], [1003.0, 3250.75], [1002.0, 3322.6666666666665], [1001.0, 3483.5], [1000.0, 3483.0], [999.0, 3492.5], [1017.0, 3238.4], [1016.0, 3205.0], [1019.0, 3287.75], [1018.0, 3184.1428571428573], [1021.0, 3154.3], [1020.0, 3241.4], [1023.0, 3289.5], [1009.0, 3987.0], [1008.0, 4007.0], [1011.0, 3988.0], [1010.0, 3995.0], [1013.0, 4004.0], [1012.0, 3996.0], [1015.0, 3991.0], [1014.0, 3984.0], [1022.0, 3245.2], [998.0, 3132.4285714285716], [997.0, 3239.0], [1072.0, 3466.0], [1036.0, 3523.5], [1060.0, 3332.2], [1064.0, 3585.0], [1070.0, 3721.0], [1066.0, 3467.5], [1062.0, 3704.3333333333335], [1058.0, 3565.5], [1056.0, 3565.0], [1024.0, 3168.666666666667], [1026.0, 3514.5], [1028.0, 3202.625], [1030.0, 3207.142857142857], [1032.0, 3512.0], [1034.0, 3377.0], [1074.0, 3321.0], [1076.0, 3469.0], [1078.0, 3478.0], [1080.0, 3395.6666666666665], [1082.0, 3473.25], [1084.0, 3564.6666666666665], [1086.0, 3393.6666666666665], [1038.0, 3526.5], [1054.0, 3557.0], [1052.0, 3955.0], [1050.0, 3414.3333333333335], [1048.0, 3547.0], [1046.0, 3681.0], [1044.0, 3676.3333333333335], [1042.0, 3542.0], [1040.0, 3534.5], [1138.0, 3628.0], [1098.0, 3421.6666666666665], [1100.0, 3682.0], [1136.0, 3620.0], [1140.0, 3626.0], [1144.0, 3613.0], [1146.0, 3599.0], [1148.0, 3459.777777777778], [1134.0, 3624.0], [1132.0, 3610.0], [1130.0, 3619.0], [1128.0, 3626.0], [1126.0, 3642.0], [1124.0, 3638.0], [1122.0, 3654.0], [1150.0, 3466.777777777778], [1096.0, 3451.2], [1094.0, 3419.0], [1092.0, 3482.0], [1090.0, 3476.0], [1088.0, 3399.0], [1118.0, 3641.0], [1116.0, 3657.0], [1114.0, 3659.0], [1112.0, 3653.0], [1110.0, 3658.0], [1108.0, 3651.0], [1104.0, 3671.0], [1208.0, 3592.3333333333335], [1212.0, 3609.5], [1156.0, 3497.25], [1152.0, 3483.6], [1182.0, 3564.0], [1180.0, 3569.0], [1178.0, 3571.0], [1176.0, 3572.0], [1174.0, 3597.0], [1172.0, 3599.0], [1170.0, 3594.0], [1168.0, 3592.0], [1154.0, 3487.8333333333335], [1184.0, 3565.0], [1186.0, 3569.0], [1188.0, 3570.0], [1190.0, 3651.0], [1192.0, 3574.0], [1194.0, 3584.0], [1196.0, 3576.0], [1198.0, 3654.0], [1214.0, 3638.5], [1210.0, 3617.0], [1206.0, 3607.0], [1204.0, 3583.0], [1202.0, 3598.0], [1200.0, 3593.0], [1166.0, 3594.0], [1164.0, 3587.0], [1162.0, 3612.0], [1160.0, 3602.0], [1158.0, 3592.0], [1226.0, 3673.5], [1224.0, 3671.3333333333335], [1222.0, 3663.5], [1220.0, 3658.6666666666665], [1218.0, 3652.5], [1216.0, 3649.0], [1057.0, 3561.5], [1067.0, 3373.3333333333335], [1069.0, 3740.0], [1071.0, 3722.0], [1065.0, 3584.0], [1063.0, 3382.75], [1061.0, 3178.3333333333335], [1059.0, 3574.5], [1055.0, 3161.0], [1025.0, 3093.6], [1027.0, 3389.3333333333335], [1029.0, 3297.0], [1031.0, 3512.0], [1033.0, 3372.0], [1035.0, 3520.5], [1037.0, 3523.5], [1039.0, 3322.5], [1073.0, 3346.0], [1075.0, 3324.0], [1079.0, 3311.714285714286], [1077.0, 3471.0], [1081.0, 3235.0], [1083.0, 3265.5], [1085.0, 3482.5], [1087.0, 3466.0], [1053.0, 3158.0], [1051.0, 3551.0], [1049.0, 3552.5], [1047.0, 3548.5], [1045.0, 3134.0], [1043.0, 3124.0], [1041.0, 3543.5], [1143.0, 3612.0], [1095.0, 3283.6666666666665], [1099.0, 3690.0], [1103.0, 3665.5], [1101.0, 3680.0], [1137.0, 3630.0], [1139.0, 3620.0], [1141.0, 3628.0], [1145.0, 3616.0], [1147.0, 3520.0], [1149.0, 3457.333333333333], [1151.0, 3534.5], [1135.0, 3618.0], [1133.0, 3616.0], [1131.0, 3619.0], [1129.0, 3627.0], [1127.0, 3626.0], [1125.0, 3641.0], [1121.0, 3652.0], [1097.0, 3486.5], [1093.0, 3361.0], [1091.0, 3404.0], [1089.0, 3471.5], [1119.0, 3640.0], [1117.0, 3653.0], [1115.0, 3653.0], [1113.0, 3656.0], [1111.0, 3654.0], [1109.0, 3658.0], [1107.0, 3657.5], [1105.0, 3671.0], [1155.0, 3483.875], [1201.0, 3594.0], [1183.0, 3570.0], [1181.0, 3569.0], [1179.0, 3571.0], [1177.0, 3569.0], [1175.0, 3600.0], [1173.0, 3596.0], [1171.0, 3595.0], [1169.0, 3582.0], [1153.0, 3499.25], [1215.0, 3637.0], [1185.0, 3572.0], [1187.0, 3567.0], [1189.0, 3573.0], [1191.0, 3654.0], [1193.0, 3579.0], [1195.0, 3595.0], [1197.0, 3571.0], [1199.0, 3594.0], [1213.0, 3645.0], [1205.0, 3607.5], [1167.0, 3607.0], [1165.0, 3598.0], [1163.0, 3593.0], [1161.0, 3605.0], [1159.0, 3600.0], [1157.0, 3605.0], [1203.0, 3579.0], [1223.0, 3667.4], [1225.0, 3674.5], [1217.0, 3652.0], [1.0, 363.7647058823529]], "isOverall": false, "label": "Products", "isController": false}, {"data": [[451.9310000000003, 2262.329250000002]], "isOverall": false, "label": "Products-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1226.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3813.0, "minX": 1.732949513E12, "maxY": 528918.0, "series": [{"data": [[1.732949522E12, 341384.0], [1.732949521E12, 295616.0], [1.732949525E12, 304977.0], [1.732949524E12, 283940.0], [1.732949523E12, 260639.0], [1.732949517E12, 349723.0], [1.732949516E12, 377203.0], [1.732949515E12, 467863.0], [1.73294952E12, 241635.0], [1.732949519E12, 313009.0], [1.732949518E12, 361525.0], [1.732949531E12, 260942.0], [1.732949514E12, 528918.0], [1.732949513E12, 24699.0], [1.732949528E12, 224135.0], [1.732949527E12, 316793.0], [1.732949526E12, 237472.0], [1.73294953E12, 325929.0], [1.732949529E12, 306911.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.732949522E12, 54175.0], [1.732949521E12, 49520.0], [1.732949525E12, 47784.0], [1.732949524E12, 47132.0], [1.732949523E12, 43219.0], [1.732949517E12, 57551.0], [1.732949516E12, 60641.0], [1.732949515E12, 76828.0], [1.73294952E12, 36883.0], [1.732949519E12, 52069.0], [1.732949518E12, 57700.0], [1.732949531E12, 42868.0], [1.732949514E12, 86070.0], [1.732949513E12, 3813.0], [1.732949528E12, 35990.0], [1.732949527E12, 51785.0], [1.732949526E12, 39225.0], [1.73294953E12, 51504.0], [1.732949529E12, 50704.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.732949531E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.457534246575339, "minX": 1.732949513E12, "maxY": 5892.127071823203, "series": [{"data": [[1.732949522E12, 2155.0869565217404], [1.732949521E12, 1858.043062200957], [1.732949525E12, 3473.5422885572134], [1.732949524E12, 3056.330000000001], [1.732949523E12, 2631.956284153006], [1.732949517E12, 350.04918032786895], [1.732949516E12, 146.58593750000009], [1.732949515E12, 9.307692307692312], [1.73294952E12, 1484.316129032258], [1.732949519E12, 976.2307692307694], [1.732949518E12, 730.5368852459014], [1.732949531E12, 5892.127071823203], [1.732949514E12, 8.457534246575339], [1.732949513E12, 29.5625], [1.732949528E12, 4666.855263157896], [1.732949527E12, 4280.072727272723], [1.732949526E12, 3813.7108433734934], [1.73294953E12, 5474.619266055047], [1.732949529E12, 5031.000000000004]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.732949531E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8.399999999999999, "minX": 1.732949513E12, "maxY": 5892.121546961329, "series": [{"data": [[1.732949522E12, 2154.947826086957], [1.732949521E12, 1857.9904306220087], [1.732949525E12, 3473.52736318408], [1.732949524E12, 3056.3199999999993], [1.732949523E12, 2631.9071038251363], [1.732949517E12, 350.0204918032789], [1.732949516E12, 146.55859374999997], [1.732949515E12, 9.270769230769229], [1.73294952E12, 1484.3096774193546], [1.732949519E12, 976.2171945701357], [1.732949518E12, 730.4836065573769], [1.732949531E12, 5892.121546961329], [1.732949514E12, 8.399999999999999], [1.732949513E12, 29.500000000000004], [1.732949528E12, 4666.842105263159], [1.732949527E12, 4280.059090909092], [1.732949526E12, 3813.6987951807228], [1.73294953E12, 5474.596330275227], [1.732949529E12, 5030.971962616822]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.732949531E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.49532710280373815, "minX": 1.732949513E12, "maxY": 16.875, "series": [{"data": [[1.732949522E12, 0.5434782608695652], [1.732949521E12, 0.7368421052631582], [1.732949525E12, 0.6517412935323382], [1.732949524E12, 0.6200000000000002], [1.732949523E12, 0.5683060109289614], [1.732949517E12, 1.0286885245901645], [1.732949516E12, 0.6757812499999998], [1.732949515E12, 0.7323076923076923], [1.73294952E12, 0.5290322580645163], [1.732949519E12, 0.6244343891402715], [1.732949518E12, 0.7008196721311472], [1.732949531E12, 0.6408839779005525], [1.732949514E12, 1.665753424657533], [1.732949513E12, 16.875], [1.732949528E12, 0.513157894736842], [1.732949527E12, 0.5818181818181818], [1.732949526E12, 0.5120481927710845], [1.73294953E12, 0.49999999999999994], [1.732949529E12, 0.49532710280373815]], "isOverall": false, "label": "Products", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.732949531E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.732949513E12, "maxY": 6143.0, "series": [{"data": [[1.732949522E12, 2362.0], [1.732949521E12, 2150.0], [1.732949525E12, 3683.0], [1.732949524E12, 3203.0], [1.732949523E12, 2929.0], [1.732949517E12, 564.0], [1.732949516E12, 395.0], [1.732949515E12, 35.0], [1.73294952E12, 1721.0], [1.732949519E12, 1130.0], [1.732949518E12, 891.0], [1.732949531E12, 6143.0], [1.732949514E12, 37.0], [1.732949513E12, 40.0], [1.732949528E12, 4887.0], [1.732949527E12, 4442.0], [1.732949526E12, 4006.0], [1.73294953E12, 5761.0], [1.732949529E12, 5201.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.732949522E12, 2307.0], [1.732949521E12, 2105.0], [1.732949525E12, 3659.0], [1.732949524E12, 3166.6], [1.732949523E12, 2907.9], [1.732949517E12, 522.5], [1.732949516E12, 346.20000000000005], [1.732949515E12, 20.900000000000034], [1.73294952E12, 1699.0], [1.732949519E12, 1111.0], [1.732949518E12, 871.0], [1.732949531E12, 6128.0], [1.732949514E12, 13.0], [1.732949513E12, 38.2], [1.732949528E12, 4865.5], [1.732949527E12, 4406.3], [1.732949526E12, 3987.5], [1.73294953E12, 5718.2], [1.732949529E12, 5188.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.732949522E12, 2359.82], [1.732949521E12, 2149.18], [1.732949525E12, 3679.6], [1.732949524E12, 3200.69], [1.732949523E12, 2926.56], [1.732949517E12, 555.25], [1.732949516E12, 390.04], [1.732949515E12, 31.089999999999975], [1.73294952E12, 1721.0], [1.732949519E12, 1129.06], [1.732949518E12, 889.0], [1.732949531E12, 6141.2], [1.732949514E12, 33.75999999999999], [1.732949513E12, 40.0], [1.732949528E12, 4887.0], [1.732949527E12, 4441.03], [1.732949526E12, 4005.55], [1.73294953E12, 5759.0], [1.732949529E12, 5201.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.732949522E12, 2332.2], [1.732949521E12, 2127.9], [1.732949525E12, 3668.75], [1.732949524E12, 3184.3], [1.732949523E12, 2917.0], [1.732949517E12, 539.75], [1.732949516E12, 371.79999999999995], [1.732949515E12, 27.0], [1.73294952E12, 1702.65], [1.732949519E12, 1122.8999999999999], [1.732949518E12, 884.0], [1.732949531E12, 6133.0], [1.732949514E12, 26.000000000000057], [1.732949513E12, 40.0], [1.732949528E12, 4882.25], [1.732949527E12, 4424.0], [1.732949526E12, 3991.0], [1.73294953E12, 5748.8], [1.732949529E12, 5197.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.732949522E12, 2011.0], [1.732949521E12, 1656.0], [1.732949525E12, 3205.0], [1.732949524E12, 2961.0], [1.732949523E12, 2356.0], [1.732949517E12, 259.0], [1.732949516E12, 29.0], [1.732949515E12, 3.0], [1.73294952E12, 1143.0], [1.732949519E12, 801.0], [1.732949518E12, 584.0], [1.732949531E12, 5698.0], [1.732949514E12, 4.0], [1.732949513E12, 9.0], [1.732949528E12, 4449.0], [1.732949527E12, 4100.0], [1.732949526E12, 3599.0], [1.73294953E12, 5306.0], [1.732949529E12, 4883.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.732949522E12, 2097.5], [1.732949521E12, 1878.0], [1.732949525E12, 3466.0], [1.732949524E12, 3057.0], [1.732949523E12, 2583.0], [1.732949517E12, 319.0], [1.732949516E12, 97.0], [1.732949515E12, 5.0], [1.73294952E12, 1480.5], [1.732949519E12, 1033.0], [1.732949518E12, 709.0], [1.732949531E12, 5908.0], [1.732949514E12, 5.0], [1.732949513E12, 33.0], [1.732949528E12, 4615.5], [1.732949527E12, 4311.0], [1.732949526E12, 3846.0], [1.73294953E12, 5411.0], [1.732949529E12, 4994.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.732949531E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 16.0, "maxY": 5908.0, "series": [{"data": [[155.0, 1480.5], [152.0, 4615.5], [166.0, 3846.0], [183.0, 2583.0], [181.0, 5908.0], [200.0, 3057.0], [201.0, 3466.0], [209.0, 1878.0], [214.0, 4994.0], [221.0, 1033.0], [220.0, 4311.0], [218.0, 5411.0], [230.0, 2097.5], [244.0, 585.0], [16.0, 33.0], [256.0, 97.0], [325.0, 5.0], [365.0, 5.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[155.0, 1718.0], [152.0, 4849.0], [166.0, 3709.5], [183.0, 2598.0], [181.0, 5885.5], [200.0, 3074.5], [201.0, 3603.0], [209.0, 1733.5], [214.0, 4976.0], [221.0, 1070.0], [220.0, 4255.0], [218.0, 5403.0], [230.0, 2081.0], [244.0, 561.0], [16.0, 38.0], [256.0, 114.0], [325.0, 12.0], [365.0, 14.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 365.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 16.0, "maxY": 5908.0, "series": [{"data": [[155.0, 1480.5], [152.0, 4615.5], [166.0, 3846.0], [183.0, 2583.0], [181.0, 5908.0], [200.0, 3057.0], [201.0, 3466.0], [209.0, 1878.0], [214.0, 4994.0], [221.0, 1032.0], [220.0, 4311.0], [218.0, 5411.0], [230.0, 2097.5], [244.0, 585.0], [16.0, 33.0], [256.0, 97.0], [325.0, 5.0], [365.0, 5.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[155.0, 1718.0], [152.0, 4849.0], [166.0, 3709.5], [183.0, 2598.0], [181.0, 5885.5], [200.0, 3074.5], [201.0, 3603.0], [209.0, 1733.5], [214.0, 4976.0], [221.0, 1070.0], [220.0, 4255.0], [218.0, 5403.0], [230.0, 2081.0], [244.0, 561.0], [16.0, 38.0], [256.0, 114.0], [325.0, 12.0], [365.0, 14.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 365.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.732949513E12, "maxY": 360.0, "series": [{"data": [[1.732949522E12, 333.0], [1.732949521E12, 334.0], [1.732949525E12, 283.0], [1.732949524E12, 333.0], [1.732949523E12, 333.0], [1.732949517E12, 333.0], [1.732949516E12, 333.0], [1.732949515E12, 335.0], [1.73294952E12, 333.0], [1.732949519E12, 333.0], [1.732949518E12, 335.0], [1.732949514E12, 360.0], [1.732949513E12, 22.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.732949525E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.732949513E12, "maxY": 323.0, "series": [{"data": [[1.732949522E12, 208.0], [1.732949521E12, 181.0], [1.732949525E12, 184.0], [1.732949524E12, 176.0], [1.732949523E12, 160.0], [1.732949517E12, 214.0], [1.732949516E12, 231.0], [1.732949515E12, 290.0], [1.73294952E12, 146.0], [1.732949519E12, 193.0], [1.732949518E12, 219.0], [1.732949531E12, 159.0], [1.732949514E12, 323.0], [1.732949513E12, 15.0], [1.732949528E12, 134.0], [1.732949527E12, 196.0], [1.732949526E12, 144.0], [1.73294953E12, 201.0], [1.732949529E12, 189.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.732949522E12, 22.0], [1.732949521E12, 28.0], [1.732949525E12, 17.0], [1.732949524E12, 24.0], [1.732949523E12, 23.0], [1.732949517E12, 30.0], [1.732949516E12, 25.0], [1.732949515E12, 35.0], [1.73294952E12, 9.0], [1.732949519E12, 28.0], [1.732949518E12, 25.0], [1.732949531E12, 22.0], [1.732949514E12, 42.0], [1.732949513E12, 1.0], [1.732949528E12, 18.0], [1.732949527E12, 24.0], [1.732949526E12, 22.0], [1.73294953E12, 17.0], [1.732949529E12, 25.0]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.732949531E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.732949513E12, "maxY": 323.0, "series": [{"data": [[1.732949522E12, 22.0], [1.732949521E12, 28.0], [1.732949525E12, 17.0], [1.732949524E12, 24.0], [1.732949523E12, 23.0], [1.732949517E12, 30.0], [1.732949516E12, 25.0], [1.732949515E12, 35.0], [1.73294952E12, 9.0], [1.732949519E12, 28.0], [1.732949518E12, 25.0], [1.732949531E12, 22.0], [1.732949514E12, 42.0], [1.732949513E12, 1.0], [1.732949528E12, 18.0], [1.732949527E12, 24.0], [1.732949526E12, 22.0], [1.73294953E12, 17.0], [1.732949529E12, 25.0]], "isOverall": false, "label": "Products-failure", "isController": false}, {"data": [[1.732949522E12, 208.0], [1.732949521E12, 181.0], [1.732949525E12, 184.0], [1.732949524E12, 176.0], [1.732949523E12, 160.0], [1.732949517E12, 214.0], [1.732949516E12, 231.0], [1.732949515E12, 290.0], [1.73294952E12, 146.0], [1.732949519E12, 193.0], [1.732949518E12, 219.0], [1.732949531E12, 159.0], [1.732949514E12, 323.0], [1.732949513E12, 15.0], [1.732949528E12, 134.0], [1.732949527E12, 196.0], [1.732949526E12, 144.0], [1.73294953E12, 201.0], [1.732949529E12, 189.0]], "isOverall": false, "label": "Products-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.732949531E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.732949513E12, "maxY": 323.0, "series": [{"data": [[1.732949522E12, 208.0], [1.732949521E12, 181.0], [1.732949525E12, 184.0], [1.732949524E12, 176.0], [1.732949523E12, 160.0], [1.732949517E12, 214.0], [1.732949516E12, 231.0], [1.732949515E12, 290.0], [1.73294952E12, 146.0], [1.732949519E12, 193.0], [1.732949518E12, 219.0], [1.732949531E12, 159.0], [1.732949514E12, 323.0], [1.732949513E12, 15.0], [1.732949528E12, 134.0], [1.732949527E12, 196.0], [1.732949526E12, 144.0], [1.73294953E12, 201.0], [1.732949529E12, 189.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.732949522E12, 22.0], [1.732949521E12, 28.0], [1.732949525E12, 17.0], [1.732949524E12, 24.0], [1.732949523E12, 23.0], [1.732949517E12, 30.0], [1.732949516E12, 25.0], [1.732949515E12, 35.0], [1.73294952E12, 9.0], [1.732949519E12, 28.0], [1.732949518E12, 25.0], [1.732949531E12, 22.0], [1.732949514E12, 42.0], [1.732949513E12, 1.0], [1.732949528E12, 18.0], [1.732949527E12, 24.0], [1.732949526E12, 22.0], [1.73294953E12, 17.0], [1.732949529E12, 25.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.732949531E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

