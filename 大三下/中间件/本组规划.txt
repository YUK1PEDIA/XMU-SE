小组成员：宋泽涛（25120222201292）、潘宇科（37320222204170）

项目：
基于分布式架构的秒杀系统

实现技术栈：
· 后端框架：Spring Boot + Spring Cloud
· 缓存与队列：Redis（缓存热点数据）、RocketMQ（异步削峰）  
· 数据库：MySQL（订单持久化）  

大致实现思路：
问题分析：
秒杀系统需要应对高并发、低延迟的业务场景，传统单体架构无法满足高并发需求，数据库容易成为瓶颈。  
关键挑战包括：
· 高并发流量导致数据库压力过大  
· 商品超卖问题  
· 订单超时未支付导致库存锁死  
· 请求重复提交问题  

能力扩展方案：
· 限流与削峰：使用Redis和MQ进行请求限流和异步处理，避免数据库被瞬时流量冲垮。  
· 库存预扣减：利用Redis的原子操作预扣库存，避免超卖。  
· 分布式锁：使用Redis或Zookeeper保证库存修改操作的并发安全性。  
· 订单超时处理：RocketMQ实现延迟队列，定时回滚未支付订单的库存。  

实现细节：
1. 请求层优化：
   - 使用Nginx+Lua进行流量过滤，限制恶意请求。  
   - 令牌桶算法进行限流，避免瞬时高并发。  

2. 商品库存管理：
   - Redis缓存库存，使用Lua脚本保证扣减库存的原子性。  
   - 数据库最终一致性：秒杀成功的订单异步落地MySQL。  

3. 订单处理：
   - RocketMQ异步处理秒杀订单，削峰填谷，提高系统吞吐量。  
   - 订单状态更新采用分布式事务（如RocketMQ事务消息或TCC）。  

4. 超时订单回滚：
   - 订单未支付则使用RocketMQ的TTL+死信队列，超时后自动释放库存。  

5. 防止超卖：
   - 采用Redis分布式锁保证库存一致性。  
   - 事务性消息保证订单和库存的原子更新。  